













































Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics


Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 608–615,
Prague, Czech Republic, June 2007. c©2007 Association for Computational Linguistics

Beyond Projectivity: Multilingual Evaluation
of Constraints and Measures on Non-Projective Structures

Jiřı́ Havelka

Institute of Formal and Applied Linguistics

Charles University in Prague

Czech Republic

havelka@ufal.mff.cuni.cz

Abstract

Dependency analysis of natural language

has gained importance for its applicability

to NLP tasks. Non-projective structures

are common in dependency analysis, there-

fore we need fine-grained means of describ-

ing them, especially for the purposes of

machine-learning oriented approaches like

parsing. We present an evaluation on

twelve languages which explores several

constraints and measures on non-projective

structures. We pursue an edge-based ap-

proach concentrating on properties of in-

dividual edges as opposed to properties of

whole trees. In our evaluation, we include

previously unreported measures taking into

account levels of nodes in dependency trees.

Our empirical results corroborate theoreti-

cal results and show that an edge-based ap-

proach using levels of nodes provides an

accurate and at the same time expressive

means for capturing non-projective struc-

tures in natural language.

1 Introduction

Dependency analysis of natural language has been

gaining an ever increasing interest thanks to its ap-

plicability in many tasks of NLP—a recent example

is the dependency parsing work of McDonald et al.

(2005), which introduces an approach based on the

search for maximum spanning trees, capable of han-

dling non-projective structures naturally.

The study of dependency structures occurring in

natural language can be approached from two sides:

by trying to delimit permissible dependency struc-

tures through formal constraints (for a recent review

paper, see Kuhlmann and Nivre (2006)), or by pro-

viding their linguistic description (see e.g. Veselá et

al. (2004) and Hajičová et al. (2004) for a linguistic

analysis of non-projective constructions in Czech.1)

We think that it is worth bearing in mind that

neither syntactic structures in dependency tree-

banks, nor structures arising in machine-learning ap-

proaches, such as MST dependency parsing, need a

priori fall into any formal subclass of dependency

trees. We should therefore aim at formal means ca-

pable of describing all non-projective structures that

are both expressive and fine-grained enough to be

useful in statistical approaches, and at the same time

suitable for an adequate linguistic description.2

Holan et al. (1998) first defined an infinite hierar-

chy of classes of dependency trees, going from pro-

jective to unrestricted dependency trees, based on

the notion of gap degree for subtrees (cf. Section 3).

Holan et al. (2000) present linguistic considerations

concerning Czech and English with respect to this

hierarchy (cf. also Section 6).

In this paper, we consider all constraints and mea-

sures evaluated by Kuhlmann and Nivre (2006)—

with some minor variations, cf. Section 4.2. Ad-

1These two papers contain an error concerning an alternative
condition of projectivity, which is rectified in Havelka (2005).
2The importance of such means becomes more evident from

the asymptotically negligible proportion of projective trees to
all dependency trees; there are super-exponentially many unre-
stricted trees compared to exponentially many projective trees
on n nodes. Unrestricted dependency trees (i.e. labelled rooted
trees) and projective dependency trees are counted by sequences
A000169 and A006013 (offset 1), respectively, in the On-Line
Encyclopedia of Sequences (Sloane, 2007).

608



ditionally, we introduce several measures not con-

sidered in their work. We also extend the empirical

basis from Czech and Danish to twelve languages,

which were made available in the CoNLL-X shared

task on dependency parsing.

In our evaluation, we do not address the issue of

what possible effects the annotations and/or conver-

sions used when creating the data might have on

non-projective structures in the different languages.

The newly considered measures have the first or

both of the following desiderata: they are based

on properties of individual non-projective edges (cf.

Definition 3); and they take into account levels of

nodes in dependency trees explicitly. None of the

constraints and measures in Kuhlmann and Nivre

(2006) take into account levels of nodes explicitly.

Level types of non-projective edges, introduced

by Havelka (2005), have both desiderata. They pro-

vide an edge-based means of characterizing all non-

projective structures; they also have some further in-

teresting formal properties.

We propose a novel, more detailed measure, level

signatures of non-projective edges, combining lev-

els of nodes with the partitioning of gaps of non-

projective edges into components. We derive a for-

mal property of these signatures that links them to

the constraint of well-nestedness, which is an exten-

sion of the result for level types (see also Havelka

(2007b)).

The paper is organized as follows: Section 2 con-

tains formal preliminaries; in Section 3 we review

the constraint of projectivity and define related no-

tions necessary in Section 4, where we define and

discuss all evaluated constraints and measures; Sec-

tion 5 describes our data and experimental setup;

empirical results are presented in Section 6.

2 Formal preliminaries

Here we provide basic definitions and notation used

in subsequent sections.

Definition 1 A dependency tree is a triple

(V,→,�), where V is a finite set of nodes,→ a de-
pendency relation on V , and � a total order on V .3

3We adopt the following convention: nodes are drawn top-
down according to their increasing level, with nodes on the
same level being the same distance from the root; nodes are
drawn from left to right according to the total order on nodes;
edges are drawn as solid lines, paths as dotted curves.

Relation→ models linguistic dependency, and so
represents a directed, rooted tree on V . There are

many ways of characterizing rooted trees, we give

here a characterization via the properties of→: there
is a root r∈V such that r→∗ v for all v∈V and there
is a unique edge p→ v for all v ∈ V , v 6= r, and no
edge into r. Relation →∗ is the reflexive transitive
closure of→ and is usually called subordination.

For each node i we define its level as the length of

the path r→∗ i; we denote it leveli. The symmetriza-
tion ↔ =→∪→−1 makes it possible to talk about
edges (pairs of nodes i, j such that i→ j) without
explicitly specifying the parent (head; i here) and

the child (dependent; j here); so → represents di-
rected edges and↔ undirected edges. To retain the
ability to talk about the direction of edges, we define

Parenti↔ j =

{

i if i→ j

j if j→ i
and Childi↔ j =

{

j if i→ j

i if j→ i
.

To make the exposition clearer by avoiding overuse

of the symbol →, we introduce notation for rooted
subtrees not only for nodes, but also for edges:

Subtreei = {v ∈ V | i→
∗ v}, Subtreei↔ j = {v ∈ V |

Parenti↔ j→
∗ v} (note that the subtree of an edge is

defined relative to its parent node). To be able to talk

concisely about the total order on nodes �, we de-
fine open intervals whose endpoints need not be in

a prescribed order (i, j) = {v ∈V |min�{i, j} ≺ v≺
max�{i, j}}.

3 Condition of projectivity

Projectivity of a dependency tree can be character-

ized both through the properties of its subtrees and

through the properties of its edges.4

Definition 2 A dependency tree T = (V,→,�) is
projective if it satisfies the following equivalent con-

ditions:

i→ j & v ∈ (i, j) =⇒ v ∈ Subtreei ,
(Harper & Hays)

j ∈ Subtreei & v ∈ (i, j) =⇒ v ∈ Subtreei ,
(Lecerf & Ihm)

j1, j2 ∈ Subtreei & v ∈ ( j1, j2) =⇒ v ∈ Subtreei .
(Fitialov)

Otherwise T is non-projective.

4There are many other equivalent characterizations of pro-
jectivity, we give only three historically prominent ones.

609



It was Marcus (1965) who proved the equivalence

of the conditions in Definition 2, proposed in the

early 1960’s (we denote them by the names of those

to whom Marcus attributes their authorship).

We see that the antecedents of the projectiv-

ity conditions move from edge-focused to subtree-

focused (i.e. from talking about dependency to talk-

ing about subordination).

It is the condition of Fitialov that has been mostly

explored when studying so-called relaxations of pro-

jectivity. (The condition is usually worded as fol-

lows: A dependency tree is projective if the nodes

of all its subtrees constitute contiguous intervals in

the total order on nodes.)

However, we find the condition of Harper & Hays

to be the most appealing from the linguistic point

of view because it gives prominence to the primary

notion of dependency edges over the derived notion

of subordination. We therefore use an edge-based

approach whenever we find it suitable.

To that end, we need the notion of a non-

projective edge and its gap.

Definition 3 For any edge i↔ j in a dependency
tree T we define its gap as follows

Gapi↔ j = {v ∈V | v ∈ (i, j) & v /∈ Subtreei↔ j} .

An edge with an empty gap is projective, an edge

whose gap is non-empty is non-projective.5

We see that non-projective are those edges i↔ j
for which there is a node v such that together they

violate the condition of Harper & Hays; we group

all such nodes v into Gapi↔ j, the gap of the non-

projective edge i↔ j.
The notion of gap is defined differently for sub-

trees of a dependency tree (Holan et al., 1998;

Bodirsky et al., 2005). There it is defined through

the nodes of the whole dependency tree not in the

considered subtree that intervene between its nodes

in the total order on nodes �.

4 Relaxations of projectivity: evaluated

constraints and measures

In this section we present all constraints and mea-

sures on dependency trees that we evaluate empir-

5In figures with sample configurations we adopt this con-
vention: for a non-projective edge, we draw all nodes in its gap
explicitly and assume that no node on any path crossing the span
of the edge lies in the interval delimited by its endpoints.

ically in Section 6. First we give definitions of

global constraints on dependency trees, then we

present measures of non-projectivity based on prop-

erties of individual non-projective edges (some of

the edge-based measures have corresponding tree-

based counterparts, however we do not discuss them

in detail).

4.1 Tree constraints

We consider the following three global constraints

on dependency trees: projectivity, planarity, and

well-nestedness. All three constraints can be applied

to more general structures, e.g. dependency forests

or even general directed graphs. Here we adhere to

their primary application to dependency trees.

Definition 4 A dependency tree T is non-planar if

there are two edges i1↔ j1, i2↔ j2 in T such that

i1 ∈ (i2, j2) & i2 ∈ (i1, j1) .

Otherwise T is planar.

Planarity is a relaxation of projectivity that cor-

responds to the “no crossing edges” constraint. Al-

though it might get confused with projectivity, it is in

fact a strictly weaker constraint. Planarity is equiv-

alent to projectivity for dependency trees with their

root node at either the left or right fringe of the tree.

Planarity is a recent name for a constraint stud-

ied under different names already in the 1960’s—

we are aware of independent work in the USSR

(weakly non-projective trees; see the survey paper

by Dikovsky and Modina (2000) for references) and

in Czechoslovakia (smooth trees; Nebeský (1979)

presents a survey of his results).

Definition 5 A dependency tree T is ill-nested if

there are two non-projective edges i1↔ j1, i2↔ j2
in T such that

i1 ∈ Gapi2↔ j2 & i2 ∈ Gapi1↔ j1 .

Otherwise T is well-nested.

Well-nestedness was proposed by Bodirsky et al.

(2005). The original formulation forbids interleav-

ing of disjoint subtrees in the total order on nodes;

we present an equivalent formulation in terms of

non-projective edges, derived in (Havelka, 2007b).

Figure 1 illustrates the subset hierarchy between

classes of dependency trees satisfying the particular

constraints:

projective( planar( well-nested( unrestricted

610



projective planar well-nested unrestricted

Figure 1: Sample dependency trees (trees satisfy corre-
sponding constraints and violate all preceding ones)

4.2 Edge measures

The first two measures are based on two ways of

partitioning the gap of a non-projective edge—into

intervals and into components. The third measure,

level type, is based on levels of nodes. We also pro-

pose a novel measure combining levels of nodes and

the partitioning of gaps into components.

Definition 6 For any edge i↔ j in a dependency
tree T we define its interval degree as follows

idegi↔ j = number of intervals in Gapi↔ j .

By an interval we mean a contiguous interval in �,
i.e. a maximal set of nodes comprising all nodes be-

tween its endpoints in the total order on nodes �.

This measure corresponds to the tree-based gap

degree measure in (Kuhlmann and Nivre, 2006),

which was first introduced in (Holan et al., 1998)—

there it is defined as the maximum over gap degrees

of all subtrees of a dependency tree (the gap degree

of a subtree is the number of contiguous intervals

in the gap of the subtree). The interval degree of an

edge is bounded from above by the gap degree of the

subtree rooted in its parent node.

Definition 7 For any edge i↔ j in a dependency
tree T we define its component degree as follows

cdegi↔ j = number of components in Gapi↔ j .

By a component we mean a connected component

in the relation↔, in other words a weak component
in the relation→ (we consider relations induced on
the set Gapi↔ j by relations on T ).

This measure was introduced by Nivre (2006);

Kuhlmann and Nivre (2006) call it edge degree.

Again, they define it as the maximum over all edges.

Each component of a gap can be represented by

a single node, its root in the dependency relation in-

duced on the nodes of the gap (i.e. a node of the com-

ponent closest to the root of the whole tree). Note

that a component need not constitute a full subtree

positive type type 0 negative type

Figure 2: Sample configurations with non-projective

edges of different level types

of the dependency tree (there may be nodes in the

subtree of the component root that lie outside the

span of the particular non-projective edge).

Definition 8 The level type (or just type) of a non-

projective edge i↔ j in a dependency tree T is de-
fined as follows

Typei↔ j = levelChildi↔ j −minn∈Gapi↔ j leveln .

The level type of an edge is the relative distance in

levels of its child node and a node in its gap closest

to the root; there may be more than one node wit-

nessing an edge’s type. For sample configurations

see Figure 2. Properties of level types are presented

in Havelka (2005; 2007b).6

We propose a new measure combining level types

and component degrees. (We do not use interval de-

grees, i.e. the partitioning of gaps into intervals, be-

cause we cannot specify a unique representative of

an interval with respect to the tree structure.)

Definition 9 The level signature (or just signature)

of an edge i↔ j in a dependency tree T is a mapping
Signaturei↔ j : P (V )→

ZN0 defined as follows

Signaturei↔ j = {levelChildi↔ j − levelr |

r is component root in Gapi↔ j} .

(The right-hand side is considered as a multiset, i.e.

elements may repeat.) We call the elements of a sig-

nature component levels.

The signature of an edge is a multiset consisting

of the relative distances in levels of all component

roots in its gap from its child node.

Further, we disregard any possible orderings on

signatures and concentrate only on the relative dis-

tances in levels. We present signatures as non-

6For example, presence of non-projective edges of nonnega-
tive level type in equivalent to non-projectivity of a dependency
tree; moreover, all such edges can be found in linear time.

611



decreasing sequences and write them in angle brack-

ets 〈 〉, component levels separated by commas (by
doing so, we avoid combinatorial explosion).

Notice that level signatures subsume level types:

the level type of a non-projective edge is the com-

ponent level of any of possibly several component

roots closest to the root of the whole tree. In other

words, the level type of an edge is equal to the largest

component level occurring in its level signature.

Level signatures share interesting formal proper-

ties with level types of non-projective edges. The

following result is a direct extension of the results

presented in Havelka (2005; 2007b).

Theorem 10 Let i↔ j be a non-projective edge in a
dependency tree T . For any component c in Gapi↔ j
represented by root rc with component level lc ≤ 0
(< 0) there is a non-projective edge v→ rc in T with
Typev↔rc ≥ 0 (> 0) such that either i ∈ Gapv↔rc , or
j ∈ Gapv↔rc .

PROOF. From the assumptions lc ≤ 0 and rc ∈
Gapi↔ j the parent v of node rc lies outside the

span of the edge i ↔ j, hence v /∈ Gapi↔ j. Thus
either i ∈ (v,rc), or j ∈ (v,rc). Since levelv ≥
levelParenti↔ j , we have that Parenti↔ j /∈ Subtreev, and
so either i ∈ Gapv↔rc , or j ∈ Gapv↔rc . Finally from
lc = levelChildi↔ j − levelrc ≤ 0 (< 0) we get levelrc −
levelChildi↔ j ≥ 0 (> 0), hence Typev↔rc ≥ 0 (> 0).

This result links level signatures to well-

nestedness: it tells us that whenever an edge’s sig-

nature contains a nonpositive component level, the

whole dependency tree is ill-nested (because then

there are two edges satisfying Definition 5).

All discussed edge measures take integer values:

interval and component degrees take only nonneg-

ative values, level types and level signatures take

integer values (in all cases, their absolute values

are bounded by the size of the whole dependency

tree). Both interval and component degrees are de-

fined also for projective edges (for which they take

value 0), level type is undefined for projective edges,

however the level signature of projective edges is

defined—it is the empty multiset/sequence.

5 Data and experimental setup

We evaluate all constraints and measures described

in the previous section on 12 languages, whose tree-

banks were made available in the CoNLL-X shared

Figure 3: Sample non-projective tree considered

planar in empirical evaluation

task on dependency parsing (Buchholz and Marsi,

2006). In alphabetical order they are: Arabic, Bul-

garian, Czech, Danish, Dutch, German, Japanese,

Portuguese, Slovene, Spanish, Swedish, and Turk-

ish (Hajič et al., 2004; Simov et al., 2005; Böhmová

et al., 2003; Kromann, 2003; van der Beek et al.,

2002; Brants et al., 2002; Kawata and Bartels, 2000;

Afonso et al., 2002; Džeroski et al., 2006; Civit Tor-

ruella and Martı́ Antonı́n, 2002; Nilsson et al., 2005;

Oflazer et al., 2003).7 We do not include Chinese,

which is also available in this data format, because

all trees in this data set are projective.

We take the data “as is”, although we are aware

that structures occurring in different languages de-

pend on the annotations and/or conversions used

(some languages were not originally annotated with

dependency syntax, but only converted to a unified

dependency format from other representations).

The CoNLL data format is a simple tabular for-

mat for capturing dependency analyses of natural

language sentences. For each sentence, it uses a

technical root node to which dependency analyses of

parts of the sentence (possibly several) are attached.

Equivalently, the representation of a sentence can be

viewed as a forest consisting of dependency trees.

By conjoining partial dependency analyses under

one technical root node, we let all their edges inter-

act. Since the technical root comes before the sen-

tence itself, no new non-projective edges are intro-

duced. However, edges from technical roots may

introduce non-planarity. Therefore, in our empirical

evaluation we disregard all such edges when count-

ing trees conforming to the planarity constraint; we

also exclude them from the total numbers of edges.

Figure 3 exemplifies how this may affect counts of

non-planar trees;8 cf. also the remark after Defini-

tion 4. Counts of well-nested trees are not affected.

7All data sets are the train parts of the CoNLL-X shared task.
8The sample tree is non-planar according to Definition 4,

however we do not consider it as such, because all pairs of
“crossing edges” involve an edge from the technical root (edges
from the technical root are depicted as dotted lines).

612



6 Empirical results

Our complete results for global constraints on de-

pendency trees are given in Table 1. They confirm

the findings of Kuhlmann and Nivre (2006): pla-

narity seems to be almost as restrictive as projectiv-

ity; well-nestedness, on the other hand, covers large

proportions of trees in all languages.

In contrast to global constraints, properties of in-

dividual non-projective edges allow us to pinpoint

the causes of non-projectivity. Therefore they pro-

vide a means for a much more fine-grained classifi-

cation of non-projective structures occurring in natu-

ral language. Table 2 presents highlights of our anal-

ysis of edge measures.

Both interval and component degrees take gen-

erally low values. On the other hand, Holan et al.

(1998; 2000) show that at least for Czech neither of

these two measures can in principle be bounded.

Taking levels of nodes into account seems to bring

both better accuracy and expressivity. Since level

signatures subsume level types as their last compo-

nents, we only provide counts of edges of positive,

nonpositive, and negative level types. For lack of

space, we do not present full distributions of level

types nor of level signatures.

Positive level types give an even better fit with

real linguistic data than the global constraint of well-

nestedness (an ill-nested tree need not contain a non-

projective edge of nonpositive level type; cf. The-

orem 10). For example, in German less than one

tenth of ill-nested trees contain an edge of nonpos-

itive level type. Minimum negative level types for

Czech, Slovene, Swedish, and Turkish are respec-

tively −1, −5, −2, and −4.

Level signatures combine level types and compo-

nent degrees, and so give an even more detailed pic-

ture of the gaps of non-projective edges. In some

languages the actually occurring signatures are quite

limited, in others there is a large variation.

Because we consider it linguistically relevant, we

also count how many non-projective edges contain

in their gaps a component rooted in an ancestor of

the edge (an ancestor of an edge is any node on the

path from the root of the whole tree to the parent

node of the edge). The proportions of such non-

projective edges vary widely among languages and

for some this property seems highly important.

Empirical evidence shows that edge measures of

non-projectivity taking into account levels of nodes

fit very well with linguistic data. This supports

our theoretical results and confirms that properties

of non-projective edges provide a more accurate

as well as expressive means for describing non-

projective structures in natural language than the

constraints and measures considered by Kuhlmann

and Nivre (2006).

7 Conclusion

In this paper, we evaluate several constraints and

measures on non-projective dependency structures.

We pursue an edge-based approach giving promi-

nence to properties of individual edges. At the same

time, we consider levels of nodes in dependency

trees. We find an edge-based approach also more

appealing linguistically than traditional approaches

based on properties of whole dependency trees or

their subtrees. Furthermore, edge-based properties

allow machine-learning techniques to model global

phenomena locally, resulting in less sparse models.

We propose a new edge measure of non-

projectivity, level signatures of non-projective

edges. We prove that, analogously to level types,

they relate to the constraint of well-nestedness.

Our empirical results on twelve languages can

be summarized as follows: Among the global con-

straints, well-nestedness fits best with linguistic

data. Among edge measures, the previously unre-

ported measures taking into account levels of nodes

stand out. They provide both the best fit with lin-

guistic data of all constraints and measures we have

considered, as well as a substantially more detailed

capability of describing non-projective structures.

The interested reader can find a more in-depth and

broader-coverage discussion of properties of depen-

dency trees and their application to natural language

syntax in (Havelka, 2007a).

As future work, we plan to investigate more lan-

guages and carry out linguistic analyses of non-

projective structures in some of them. We will also

apply our results to statistical approaches to NLP

tasks, such as dependency parsing.

Acknowledgement The research reported in this

paper was supported by Project No. 1ET201120505

of the Ministry of Education of the Czech Republic.

613



L
a
n
g
u
a
g
e

A
ra
b
ic

B
u
lg
a
ri
a
n
C
z
e
c
h
D
a
n
is
h
D
u
tc
h
G
e
rm
a
n
Ja
p
a
n
e
se

P
o
rt
u
g
u
e
se

S
lo
v
e
n
e
S
p
a
n
is
h
S
w
e
d
is
h
T
u
rk
is
h

il
l-
n
e
st
e
d

1
7
9

6
1
5

4
1
6

7
3

7
1

1
4

n
o
n
-p
la
n
a
r

1
5
0

6
7
7
1
3
7
8
3

7
8
7

4
1
1
5

1
0
8
6
5

1
1
7
1
3

2
8
3

5
6

1
0
7
6

5
5
6

n
o
n
-p
ro
je
c
ti
v
e

1
6
3

6
9
0
1
6
8
3
1

8
1
1

4
8
6
5

1
0
8
8
3

9
0
2

1
7
1
8

3
4
0

5
7

1
0
7
9

5
8
0

p
ro
p
o
rt
io
n
o
f
a
ll
(%
)

1
1
.1
6
%

5
.3
8
%

2
3
.1
5
%

1
5
.6
3
%

3
6
.4
4
%

2
7
.7
5
%

5
.2
9
%

1
8
.9
4
%

2
2
.1
6
%

1
.7
2
%

9
.7
7
%

1
1
.6
%

a
ll

1
4
6
0

1
2
8
2
3
7
2
7
0
3

5
1
9
0
1
3
3
4
9

3
9
2
1
6

1
7
0
4
4

9
0
7
1

1
5
3
4

3
3
0
6

1
1
0
4
2

4
9
9
7

T
a
b
le
1
:
C
o
u
n
ts
o
f
d
e
p
e
n
d
e
n
c
y
tr
e
e
s
v
io
la
ti
n
g
g
lo
b
a
l
c
o
n
st
ra
in
ts
o
f
w
e
ll
-n
e
st
e
d
n
e
ss
,
p
la
n
a
ri
ty
,
a
n
d
p
ro
je
c
ti
v
it
y
;
th
e
la
st
li
n
e
g
iv
e
s
th
e
to
ta
l
n
u
m
b
e
rs

o
f
d
e
p
e
n
d
e
n
c
y
tr
e
e
s.
(A
n
e
m
p
ty
c
e
ll
m
e
a
n
s
c
o
u
n
t
z
e
ro
.)

L
a
n
g
u
a
g
e

A
ra
b
ic
B
u
lg
a
ri
a
n

C
z
e
c
h

D
a
n
is
h

D
u
tc
h

G
e
rm
a
n
Ja
p
a
n
e
se

P
o
rt
u
g
u
e
se

S
lo
v
e
n
e
S
p
a
n
is
h

S
w
e
d
is
h

T
u
rk
is
h

id
e
g

=
1

2
1
1

7
2
4

2
3
3
7
6

9
4
0

1
0
2
0
9

1
4
6
0
5

1
5
7
0

2
3
9
8

5
4
8

5
8

1
8
2
9

8
1
3

id
e
g

=
2

1
1
8
9

5
3
4
9

1
1
9
8

8
1

2
7
2

2
1

4
6

2
7

id
e
g

=
3

3
8

3
7

1
2

2
4

9
1

c
d
e
g

=
1

2
0
0

7
2
3

2
3
1
9
0

8
4
2

1
0
2
6
4

1
3
1
0
7

1
4
8
4

2
4
6
6

5
3
1

5
9

1
5
4
6

6
2
3

c
d
e
g

=
2

1
0

1
2
9
2

7
8

2
3
8

2
2
0
6

1
4
3

1
5
1

1
1

2
0
4

1
4
6

c
d
e
g

=
3

1
1

6
6

2
2

4
7

4
3
4

2
6

6
4

2
7
6

5
5

T
y
p
e

>
0

2
1
1

7
2
5

2
3
4
9
5

9
4
2

1
0
5
6
4

1
5
8
0
3

1
6
6
7

2
6
9
9

5
4
7

5
9

1
8
4
7

8
3
3

T
y
p
e
≤
0

7
5

3
2

4
1

3
3

5
0

8
T
y
p
e

<
0

4
2

1
5

2

S
ig
n
a
tu
re
/
c
o
u
n
t

〈1
〉
/
9
2

〈2
〉
/
6
7
4
〈2
〉
/
1
8
5
0
7

〈2
〉
/
5
5
5

〈2
〉
/
8
0
6
1

〈2
〉
/
8
4
0
7
〈1
〉
/
4
6
6

〈2
〉
/
1
6
7
0

〈2
〉
/
3
8
4
〈2
〉
/
4
6

〈2
〉
/
8
2
3

〈2
〉
/
3
4
1

〈2
〉
/
5
6

〈3
〉
/
3
2

〈1
〉
/
2
8
8
6

〈1
〉
/
1
1
5

〈3
〉
/
1
4
6
1

〈1
〉
/
3
1
1
2
〈2
〉
/
2
0
9

〈1
〉
/
5
7
1

〈1
〉
/
6
7

〈3
〉
/
7

〈1
〉
/
5
3
0

〈1
〉
/
1
8
9

〈3
〉
/
1
8

〈1
〉
/
1
0

〈3
〉
/
1
5
1
5

〈3
〉
/
1
0
0

〈1
〉
/
5
1
2

〈1
,1
〉
/
1
5
0
3
〈4
〉
/
1
8
6

〈3
〉
/
2
0
8

〈3
〉
/
4
5

〈4
〉
/
4

〈3
〉
/
1
1
4

〈1
,1
〉
/
9
1

〈4
〉
/
1
0

〈4
〉
/
5

〈4
〉
/
1
5
4

〈1
,1
〉
/
6
3

〈4
〉
/
2
0
1

〈3
〉
/
1
3
9
7
〈3
〉
/
1
8
3

〈1
,1
〉
/
1
1
3

〈4
〉
/
1
3

〈1
〉
/
2

〈1
,1
〉
/
9
4

〈3
〉
/
5
3

〈1
,1
〉
/
8

〈5
〉
/
2
〈1

,1
〉
/
1
1
5

〈4
〉
/
4
1
〈1

,1
〉
/
1
1
8

〈2
,2
〉
/
4
7
6
〈5
〉
/
1
2
6

〈1
,1

,1
〉
/
4
4

〈5
〉
/
1
2

〈0
〉
/
3
1

〈2
,2
〉
/
3
1

〈5
〉
/
7
〈1

,1
,1
〉
/
1

〈0
〉
/
7
0

〈5
〉
/
1
6

〈2
,2
〉
/
5
2
〈1

,1
,1
〉
/
3
1
2
〈6
〉
/
1
1
3

〈2
,2
〉
/
2
9

〈1
,1
〉
/
6

〈1
,3
〉
/
2
7
〈1

,1
,1
〉
/
2
9

〈6
〉
/
6

〈1
,1
〉
/
1

〈2
,2
〉
/
5
8
〈1

,1
,1
〉
/
1
6
〈1

,1
,1
〉
/
2
5

〈4
〉
/
1
3
6

〈7
〉
/
7
8

〈2
,2

,2
〉
/
1
3

〈6
〉
/
4

〈1
,1

,1
〉
/
2
5

〈4
〉
/
1
9

〈7
〉
/
4

〈1
,1

,1
〉
/
4
8

〈2
,2
〉
/
7

〈5
〉
/
2
3

〈3
,3
〉
/
9
8
〈1

,1
〉
/
6
3

〈4
〉
/
1
2
〈1

,1
,1

,1
〉
/
4

〈4
〉
/
2
1
〈2

,2
,2
〉
/
1
0

〈2
,2
〉
/
2

〈2
,4
〉
/
4
4

〈6
〉
/
6

〈1
,3
〉
/
1
6

〈2
,2

,2
〉
/
6
9

〈8
〉
/
4
9

〈1
,1

,1
,1
〉
/
7

〈7
〉
/
2

〈1
,2
〉
/
1
9

〈3
,3
〉
/
6

〈9
〉
/
1

〈1
,3
〉
/
3
2

〈2
,2

,2
〉
/
6

〈3
,3
〉
/
1
5
〈1

,1
,1

,1
〉
/
5
9

〈9
〉
/
3
5
〈1

,1
,1

,1
,1
〉
/
6

〈1
,1

,3
〉
/
2

〈2
,2
〉
/
1
6
〈2

,2
,2

,2
〉
/
6

. . .
. . .

. . .
. . .

. . .
. . .

. . .
. . .

. . .
. . .

a
n
c
e
st
o
r
c
o
m
p
.
ro
o
t

3
9

7
1
1

2
0
0
3
5

7
0
3

9
7
8
1

1
0
1
2
8

0
1
8
3
2

3
9
2

5
7

9
5
0

3
4
5

o
n
ly
a
n
c
e
st
o
r
c
o
m
p
.
r.

3
9

7
1
1

1
9
9
1
3

6
8
5

9
6
9
7

9
5
2
6

0
1
8
2
0

3
8
6

5
7

8
5
7

3
4
0

n
o
n
-p
ro
je
c
ti
v
e

2
1
1

7
2
5

2
3
5
7
0

9
4
5

1
0
5
6
6

1
5
8
4
4

1
6
6
7

2
7
0
2

5
5
0

5
9

1
8
9
7

8
4
1

p
ro
p
o
rt
io
n
o
f
a
ll
(%
)

0
.4
2
%

0
.4
1
%

2
.1
3
%

1
.0
6
%

5
.9
%

2
.4
%

1
.3
2
%

1
.3
7
%

2
.1
3
%

0
.0
7
%

1
.0
5
%

1
.6
1
%

a
ll

5
0
0
9
7

1
7
7
3
9
4

1
1
0
5
4
3
7

8
9
1
7
1

1
7
9
0
6
3

6
6
0
3
9
4
1
2
6
5
1
1

1
9
7
6
0
7

2
5
7
7
7
8
6
0
2
8

1
8
0
4
2
5

5
2
2
7
3

T
a
b
le
2
:
C
o
u
n
ts
fo
r
e
d
g
e
m
e
a
su
re
s
in
te
rv
a
l
d
e
g
re
e
,
c
o
m
p
o
n
e
n
t
d
e
g
re
e
(f
o
r
v
a
lu
e
s
fr
o
m
1
to
3
;
la
rg
e
r
v
a
lu
e
s
a
re
n
o
t
in
c
lu
d
e
d
),
le
v
e
l
ty
p
e
(f
o
r
p
o
si
ti
v
e
,

n
o
n
p
o
si
ti
v
e
,
a
n
d
n
e
g
a
ti
v
e
v
a
lu
e
s)
,
le
v
e
l
si
g
n
a
tu
re
(u
p
to
1
0
m
o
st
fr
e
q
u
e
n
t
v
a
lu
e
s)
,
a
n
d
n
u
m
b
e
rs
o
f
e
d
g
e
s
w
it
h
a
n
c
e
st
o
r
c
o
m
p
o
n
e
n
t
ro
o
ts
in
th
e
ir
g
a
p
s

a
n
d
so
le
ly
w
it
h
a
n
c
e
st
o
r
c
o
m
p
o
n
e
n
t
ro
o
ts
in
th
e
ir
g
a
p
s;
th
e
se
c
o
n
d
to
la
st
li
n
e
g
iv
e
s
th
e
to
ta
l
n
u
m
b
e
rs
o
f
n
o
n
-p
ro
je
c
ti
v
e
e
d
g
e
s,
th
e
la
st
li
n
e
g
iv
e
s
th
e

to
ta
l
n
u
m
b
e
rs
o
f
a
ll
e
d
g
e
s—
w
e
e
x
c
lu
d
e
e
d
g
e
s
fr
o
m
te
c
h
n
ic
a
l
ro
o
ts
.
(T
h
e
li
st
in
g
s
n
e
e
d
n
o
t
b
e
e
x
h
a
u
st
iv
e
;
a
n
e
m
p
ty
c
e
ll
m
e
a
n
s
c
o
u
n
t
z
e
ro
.)

614



References

A. Abeillé, editor. 2003. Treebanks: Building and Using
Parsed Corpora, volume 20 of Text, Speech and Language
Technology. Kluwer Academic Publishers, Dordrecht.

S. Afonso, E. Bick, R. Haber, and D. Santos. 2002. “Floresta
sintá(c)tica”: a treebank for Portuguese. In Proceedings of
the 3rd Intern. Conf. on Language Resources and Evaluation
(LREC), pages 1698–1703.

Manuel Bodirsky, Marco Kuhlmann, and Matthias Möhl. 2005.
Well-nested drawings as models of syntactic structure. In
Proceedings of Tenth Conference on Formal Grammar and
Ninth Meering on Mathematics of Language.

A. Böhmová, J. Hajič, E. Hajičová, and B. Hladká. 2003. The
PDT: a 3-level annotation scenario. In Abeillé (2003), chap-
ter 7.

S. Brants, S. Dipper, S. Hansen, W. Lezius, and G. Smith. 2002.
The TIGER treebank. In Proceedings of the 1st Workshop on
Treebanks and Linguistic Theories (TLT).

S. Buchholz and E. Marsi. 2006. CoNLL-X shared task on
multilingual dependency parsing. In Proceedings of CoNLL-
X. SIGNLL.

M. Civit Torruella and M
a
A. Martı́ Antonı́n. 2002. Design

principles for a Spanish treebank. In Proceedings of the 1st
Workshop on Treebanks and Linguistic Theories (TLT).

Alexander Dikovsky and Larissa Modina. 2000. Dependencies
on the other side of the Curtain. Traitement Automatique des
Langues (TAL), 41(1):67–96.

S. Džeroski, T. Erjavec, N. Ledinek, P. Pajas, Z. Žabokrtsky, and
A. Žele. 2006. Towards a Slovene dependency treebank. In
Proceedings of the 5th Intern. Conf. on Language Resources
and Evaluation (LREC).

J. Hajič, O. Smrž, P. Zemánek, J. Šnaidauf, and E. Beška. 2004.
Prague Arabic dependency treebank: Development in data
and tools. In Proceedings of the NEMLAR Intern. Conf. on
Arabic Language Resources and Tools, pages 110–117.

Eva Hajičová, Jiřı́ Havelka, Petr Sgall, Kateřina Veselá, and
Daniel Zeman. 2004. Issues of Projectivity in the Prague
Dependency Treebank. Prague Bulletin of Mathematical
Linguistics, 81:5–22.

Jiřı́ Havelka. 2005. Projectivity in Totally Ordered Rooted
Trees: An Alternative Definition of Projectivity and Optimal
Algorithms for Detecting Non-Projective Edges and Projec-
tivizing Totally Ordered Rooted Trees. Prague Bulletin of
Mathematical Linguistics, 84:13–30.

Jiřı́ Havelka. 2007a. Mathematical Properties of Dependency
Trees and their Application to Natural Language Syntax.
Ph.D. thesis, Institute of Formal and Applied Linguistics,
Charles University in Prague, Czech Republic.

Jiřı́ Havelka. 2007b. Relationship between Non-Projective
Edges, Their Level Types, and Well-Nestedness. In Pro-
ceedings of HLT/NAACL; Companion Volume, Short Papers,
pages 61–64.

Tomáš Holan, Vladislav Kuboň, Karel Oliva, andMartin Plátek.
1998. Two Useful Measures of Word Order Complexity.
In Alain Polguère and Sylvain Kahane, editors, Proceedings
of Dependency-Based Grammars Workshop, COLING/ACL,
pages 21–28.

Tomáš Holan, Vladislav Kuboň, Karel Oliva, andMartin Plátek.
2000. On Complexity of Word Order. Traitement Automa-
tique des Langues (TAL), 41(1):273–300.

Y. Kawata and J. Bartels. 2000. Stylebook for the Japanese
treebank in VERBMOBIL. Verbmobil-Report 240, Seminar
für Sprachwissenschaft, Universität Tübingen.

M. T. Kromann. 2003. The Danish dependency treebank and
the underlying linguistic theory. In Proceedings of the 2nd
Workshop on Treebanks and Linguistic Theories (TLT).

Marco Kuhlmann and Joakim Nivre. 2006. Mildly Non-
Projective Dependency Structures. In Proceedings of COL-
ING/ACL, pages 507–514.

Solomon Marcus. 1965. Sur la notion de projectivité [On the
notion of projectivity]. Zeitschrift für Mathematische Logik
und Grundlagen der Mathematik, 11:181–192.

Ryan McDonald, Fernando Pereira, Kiril Ribarov, and Jan
Hajič. 2005. Non-Projective Dependency Parsing using
Spanning Tree Algorithms. In Proceedings of HLT/EMNLP,
pages 523–530.

Ladislav Nebeský. 1979. Graph theory and linguistics (chapter
12). In R. J. Wilson and L. W. Beineke, editors, Applications
of Graph Theory, pages 357–380. Academic Press.

J. Nilsson, J. Hall, and J. Nivre. 2005. MAMBAmeets TIGER:
Reconstructing a Swedish treebank from antiquity. In Pro-
ceedings of the NODALIDA Special Session on Treebanks.

Joakim Nivre. 2006. Constraints on Non-Projective Depen-
dency Parsing. In Proceedings of EACL, pages 73–80.

K. Oflazer, B. Say, D. Zeynep Hakkani-Tür, and G. Tür. 2003.
Building a Turkish treebank. In Abeillé (2003), chapter 15.

K. Simov, P. Osenova, A. Simov, and M. Kouylekov. 2005.
Design and implementation of the Bulgarian HPSG-based
treebank. In Journal of Research on Language and Com-
putation – Special Issue, pages 495–522. Kluwer Academic
Publishers.

Neil J. A. Sloane. 2007. On-Line Encyclopedia
of Integer Sequences. Published electronically at
www.research.att.com/˜njas/sequences/.

L. van der Beek, G. Bouma, R. Malouf, and G. van Noord.
2002. The Alpino dependency treebank. In Computational
Linguistics in the Netherlands (CLIN).

Kateřina Veselá, Jiřı́ Havelka, and Eva Hajičová. 2004. Con-
dition of Projectivity in the Underlying Dependency Struc-
tures. In Proceedings of COLING, pages 289–295.

615


