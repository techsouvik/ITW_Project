













































Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics


Proceedings of the ACL 2007 Demo and Poster Sessions, pages 13–16,
Prague, June 2007. c©2007 Association for Computational Linguistics

SemTAG: a platform for specifying Tree Adjoining Grammars and
performing TAG-based Semantic Construction

Claire Gardent
CNRS / LORIA

Campus scientifique - BP 259
54 506 Vandœuvre-Lès-Nancy CEDEX

France
Claire.Gardent@loria.fr

Yannick Parmentier
INRIA / LORIA - Nancy Université

Campus scientifique - BP 259
54 506 Vandœuvre-Lès-Nancy CEDEX

France
Yannick.Parmentier@loria.fr

Abstract

In this paper, we introduce SEMTAG, a free
and open software architecture for the de-
velopment of Tree Adjoining Grammars in-
tegrating a compositional semantics. SEM-
TAG differs from XTAG in two main ways.
First, it provides an expressive grammar
formalism and compiler for factorising and
specifying TAGs. Second, it supports se-
mantic construction.

1 Introduction

Over the last decade, many of the main grammatical
frameworks used in computational linguistics were
extended to support semantic construction (i.e., the
computation of a meaning representation from syn-
tax and word meanings). Thus, the HPSG ERG
grammar for English was extended to output mini-
mal recursive structures as semantic representations
for sentences (Copestake and Flickinger, 2000); the
LFG (Lexical Functional Grammar) grammars to
output lambda terms (Dalrymple, 1999); and Clark
and Curran’s CCG (Combinatory Categorial Gram-
mar) based statistical parser was linked to a seman-
tic construction module allowing for the derivation
of Discourse Representation Structures (Bos et al.,
2004).

For Tree Adjoining Grammar (TAG) on the other
hand, there exists to date no computational frame-
work which supports semantic construction. In this
demo, we present SEMTAG, a free and open soft-
ware architecture that supports TAG based semantic
construction.

The structure of the paper is as follows. First,
we briefly introduce the syntactic and semantic for-
malisms that are being handled (section 2). Second,
we situate our approach with respect to other possi-
ble ways of doing TAG based semantic construction
(section 3). Third, we show how XMG, the linguistic
formalism used to specify the grammar (section 4)
differs from existing computational frameworks for
specifying a TAG and in particular, how it supports
the integration of semantic information. Finally, sec-
tion 5 focuses on the semantic construction module
and reports on the coverage of SEMFRAG, a core
TAG for French including both syntactic and seman-
tic information.

2 Linguistic formalisms

We start by briefly introducing the syntactic and se-
mantic formalisms assumed by SEMTAG namely,
Feature-Based Lexicalised Tree Adjoining Gram-
mar and LU .

Tree Adjoining Grammars (TAG) TAG is a tree
rewriting system (Joshi and Schabes, 1997). A TAG
is composed of (i) two tree sets (a set of initial trees
and a set of auxiliary trees) and (ii) two rewriting op-
erations (substitution and adjunction). Furthermore,
in a Lexicalised TAG, each tree has at least one leaf
which is a terminal.

Initial trees are trees where leaf-nodes are labelled
either by a terminal symbol or by a non-terminal
symbol marked for substitution (↓). Auxiliary trees
are trees where a leaf-node has the same label as the
root node and is marked for adjunction (⋆). This
leaf-node is called a foot node.

13



Further, substitution corresponds to the insertion
of an elementary tree t1 into a tree t2 at a frontier
node having the same label as the root node of t1.
Adjunction corresponds to the insertion of an auxil-
iary tree t1 into a tree t2 at an inner node having the
same label as the root and foot nodes of t1.

In a Feature-Based TAG, the nodes of the trees are
labelled with two feature structures called top and
bot. Derivation leads to unification on these nodes as
follows. Given a substitution, the top feature struc-
tures of the merged nodes are unified. Given an
adjunction, (i) the top feature structure of the inner
node receiving the adjunction and of the root node of
the inserted tree are unified, and (ii) the bot feature
structures of the inner node receiving the adjunction
and of the foot node of the inserted tree are unified.
At the end of a derivation, the top and bot feature
structures of each node in a derived tree are unified.

Semantics (LU ). The semantic representation lan-
guage we use is a unification-based extension of the
PLU language (Bos, 1995). LU is defined as fol-
lows. Let H be a set of hole constants, Lc the set
of label constants, and Lv the set of label variables.
Let Ic (resp. Iv) be the set of individual constants
(resp. variables), let R be a set of n-ary relations
over Ic∪ Iv∪H , and let≥ be a relation over H ∪Lc
called the scope-over relation. Given l ∈ Lc ∪ Lv,
h ∈ H , i1, . . . , in ∈ Iv ∪ Ic ∪H , and R

n ∈ R, we
have:

1. l : Rn(i1, . . . , in) is a LU formula.
2. h ≥ l is a LU formula.
3. φ,ψ is LU formula iff both φ and ψ are LU

formulas.
4. Nothing else is a LU formula.
In short, LU is a flat (i.e., non recursive) version

of first-order predicate logic in which scope may be
underspecified and variables can be unification vari-
ables1.

3 TAG based semantic construction

Semantic construction can be performed either dur-
ing or after derivation of a sentence syntactic struc-
ture. In the first approach, syntactic structure and
semantic representations are built simultaneously.
This is the approach sketched by Montague and

1For mode details on LU , see (Gardent and Kallmeyer,
2003).

adopted e.g., in the HPSG ERG and in synchronous
TAG (Nesson and Shieber, 2006). In the second
approach, semantic construction proceeds from the
syntactic structure of a complete sentence, from a
lexicon associating each word with a semantic rep-
resentation and from a set of semantic rules speci-
fying how syntactic combinations relate to seman-
tic composition. This is the approach adopted for
instance, in the LFG glue semantic framework, in
the CCG approach and in the approaches to TAG-
based semantic construction that are based on the
TAG derivation tree.

SEMTAG implements a hybrid approach to se-
mantic construction where (i) semantic construction
proceeds after derivation and (ii) the semantic lexi-
con is extracted from a TAG which simultaneously
specifies syntax and semantics. In this approach
(Gardent and Kallmeyer, 2003), the TAG used in-
tegrates syntactic and semantic information as fol-
lows. Each elementary tree is associated with a for-
mula of LU representing its meaning. Importantly,
the meaning representations of semantic functors in-
clude unification variables that are shared with spe-
cific feature values occurring in the associated ele-
mentary trees. For instance in figure 1, the variables
x and y appear both in the semantic representation
associated with the tree for aime (love) and in the
tree itself.

Given such a TAG, the semantics of a tree
t derived from combining the elementary trees
t1, . . . , tn is the union of the semantics of t1, . . . , tn
modulo the unifications that results from deriving
that tree. For instance, given the sentence Jean aime
vraiment Marie (John really loves Mary) whose
TAG derivation is given in figure 1, the union of the
semantics of the elementary trees used to derived the
sentence tree is:

l0 : jean(j), l1 : aime(x, y), l2 : vraiment(h0),
ls ≤ h0, l3 : marie(m)

The unifications imposed by the derivations are:

{x→ j, y → m, ls → l1}

Hence the final semantics of the sentence Jean aime
vraiment Marie is:

l0 : jean(j), l1 : aime(j,m), l2 : vraiment(h0),
l1 ≤ h0, l3 : marie(m)

14



S[lab:l1]

NP[idx:j] NP
[idx:x,lab:l1] V[lab:l1] NP

[idx:y,lab:l1] V[lab:l2] NP[idx:m]

Jean aime V[lab:ls]⋆ Adv Marie

vraiment

l0 : jean(j) l1 : aimer(x, y) l2 : vraiment(h0), l3 : marie(m)
ls ≤ h0

Figure 1: Derivation of “Jean aime vraiment Marie”

As shown in (Gardent and Parmentier, 2005), se-
mantic construction can be performed either dur-
ing or after derivation. However, performing se-
mantic construction after derivation preserves mod-
ularity (changes to the semantics do not affect syn-
tactic parsing) and allows the grammar used to re-
main within TAG (the grammar need contain nei-
ther an infinite set of variables nor recursive feature
structures). Moreover, it means that standard TAG
parsers can be used (if semantic construction was
done during derivation, the parser would have to be
adapted to handle the association of each elemen-
tary tree with a semantic representation). Hence in
SEMTAG, semantic construction is performed after
derivation. Section 5 gives more detail about this
process.

4 The XMG formalism and compiler

SEMTAG makes available to the linguist a formalism
(XMG) designed to facilitate the specification of tree
based grammars integrating a semantic dimension.
XMG differs from similar proposals (Xia et al., 1998)
in three main ways (Duchier et al., 2004). First it
supports the description of both syntax and seman-
tics. Specifically, it permits associating each ele-
mentary tree with an LU formula. Second, XMG pro-
vides an expressive formalism in which to factorise
and combine the recurring tree fragments shared by
several TAG elementary trees. Third, XMG pro-
vides a sophisticated treatment of variables which
inter alia, supports variable sharing between seman-
tic representation and syntactic tree. This sharing is
implemented by means of so-called interfaces i.e.,
feature structures that are associated with a given
(syntactic or semantic) fragment and whose scope
is global to several fragments of the grammar speci-
fication.

To specify the syntax / semantics interface
sketched in section 5, XMG is used as follows :

1. The elementary tree of a semantic functor is
defined as the conjunction of its spine (the projec-
tion of its syntactic head) with the tree fragments
describing each of its arguments. For instance, in
figure 2, the tree for an intransitive verb is defined
as the conjunction of the tree fragment for its spine
(Active) with the tree fragment for (a canonical re-
alisation of) its subject argument (Subject).

2. In the tree fragments representing the different
syntactic realizations (canonical, extracted, etc.) of
a given grammatical function, the node representing
the argument (e.g., the subject) is labelled with an
idx feature whose value is shared with a GFidx fea-
ture in the interface (where GF is the grammatical
function).

3. Semantic representations are encapsulated as
fragments where the semantic arguments are vari-
ables shared with the interface. For instance, the ith

argument of a semantic relation is associated with
the argI interface feature.

4. Finally, the mapping between grammatical
functions and thematic roles is specified when con-
joining an elementary tree fragment with a semantic
representation. For instance, in figure 22, the inter-
face unifies the value of arg1 (the thematic role) with
that of subjIdx (a grammatical function) thereby
specifying that the subject argument provides the
value of the first semantic argument.

5 Semantic construction

As mentioned above, SEMTAG performs semantic
construction after derivation. More specifically, se-
mantic construction is supported by the following 3-
step process:

2The interfaces are represented using gray boxes.

15



Intransitive: Subject: Active: 1-ary relation:

S

NP↓[idx=X] VP

l0:Rel(X)

arg0=X

subjIdx=X

⇐
S

NP↓[idx=I] VP

subjIdx=I

∧
S

VP ∧
l0:Rel(A)

arg0=A

Figure 2: Syntax / semantics interface within the metagrammar.

1. First, we extract from the TAG generated by
XMG (i) a purely syntactic TAG G′, and (ii) a purely
semantic TAG G′′ 3 A purely syntactic (resp. seman-
tic) Tag is a TAG whose features are purely syntactic
(resp. semantic) – in other words, G′′ is a TAG with
no semantic features whilst G′′ is a TAG with only
semantic features. Entries of G′ and G′′ are indexed
using the same key.

2. We generate a tabular syntactic parser for G′

using the DyALog system of (de la Clergerie, 2005).
This parser is then used to compute the derivation
forest for the input sentence.

3. A semantic construction algorithm is applied to
the derivation forest. In essence, this algorithm re-
trieves from the semantic TAG G′′ the semantic trees
involved in the derivation(s) and performs on these
the unifications prescribed by the derivation.

SEMTAG has been used to specify a core TAG for
French, called SemFRag. This grammar is currently
under evaluation on the Test Suite for Natural Lan-
guage Processing in terms of syntactic coverage, se-
mantic coverage and semantic ambiguity. For a test-
suite containing 1495 sentences, 62.88 % of the sen-
tences are syntactically parsed, 61.27 % of the sen-
tences are semantically parsed (i.e., at least one se-
mantic representation is computed), and the average
semantic ambiguity (number of semantic represen-
tation per sentence) is 2.46.

SEMTAG is freely available at http://trac.
loria.fr/∼semtag.

3As (Nesson and Shieber, 2006) indicates, this extraction in
fact makes the resulting system a special case of synchronous
TAG where the semantic trees are isomorphic to the syntactic
trees and unification variables across the syntactic and semantic
components are interpreted as synchronous links.

References

J. Bos, S. Clark, M. Steedman, J. R. Curran, and J. Hock-
enmaier. 2004. Wide-coverage semantic representa-
tions from a ccg parser. In Proceedings of the 20th
COLING, Geneva, Switzerland.

J. Bos. 1995. Predicate Logic Unplugged. In Proceed-
ings of the tenth Amsterdam Colloquium, Amsterdam.

A. Copestake and D. Flickinger. 2000. An open-
source grammar development environment and broad-
coverage english grammar using hpsg. In Proceedings
of LREC, Athens, Greece.

Mary Dalrymple, editor. 1999. Semantics and Syntax in
Lexical Functional Grammar. MIT Press.

E. de la Clergerie. 2005. DyALog: a tabular logic pro-
gramming based environment for NLP. In Proceed-
ings of CSLP’05, Barcelona.

D. Duchier, J. Le Roux, and Y. Parmentier. 2004. The
Metagrammar Compiler: An NLP Application with
a Multi-paradigm Architecture. In Proceedings of
MOZ’2004, Charleroi.

C. Gardent and L. Kallmeyer. 2003. Semantic construc-
tion in FTAG. In Proceedings of EACL’03, Budapest.

C. Gardent and Y. Parmentier. 2005. Large scale se-
mantic construction for tree adjoining grammars. In
Proceedings of LACL05, Bordeaux, France.

A. Joshi and Y. Schabes. 1997. Tree-adjoining gram-
mars. In G. Rozenberg and A. Salomaa, editors,
Handbook of Formal Languages, volume 3, pages 69
– 124. Springer, Berlin, New York.

Rebecca Nesson and Stuart M. Shieber. 2006. Sim-
pler TAG semantics through synchronization. In Pro-
ceedings of the 11th Conference on Formal Grammar,
Malaga, Spain, 29–30 July.

F. Xia, M. Palmer, K. Vijay-Shanker, and J. Rosenzweig.
1998. Consistent grammar development using partial-
tree descriptions for lexicalized tree adjoining gram-
mar. Proceedings of TAG+4.

16


