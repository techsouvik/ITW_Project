













































Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics


Proceedings of the ACL 2007 Demo and Poster Sessions, pages 145–148,
Prague, June 2007. c©2007 Association for Computational Linguistics

A Linguistic Service Ontology for Language Infrastructures 

 
Yoshihiko Hayashi 

Graduate School of Language and Culture, Osaka University 
1-8 Machikaneyama-cho, Toyonaka, 560-0043 Japan 

hayashi@lang.osaka-u.ac.jp 
 

 
 

Abstract 

This paper introduces conceptual frame-
work of an ontology for describing linguis-
tic services on network-based language in-
frastructures. The ontology defines a tax-
onomy of processing resources and the as-
sociated static language resources. It also 
develops a sub-ontology for abstract lin-
guistic objects such as expression, meaning, 
and description; these help define function-
alities of a linguistic service. The proposed 
ontology is expected to serve as a solid ba-
sis for the interoperability of technical ele-
ments in language infrastructures. 

1 Introduction 
Several types of linguistic services are currently 
available on the Web, including text translation 
and dictionary access. A variety of NLP tools is 
also available and public. In addition to these, a 
number of community-based language resources 
targeting particular domains of application have 
been developed, and some of them are ready for 
dissemination. A composite linguistic service tai-
lored to a particular user's requirements would be 
composable, if there were a language infrastructure 
on which elemental linguistic services, such as 
NLP tools, and associated language resources 
could be efficiently combined. Such an infrastruc-
ture should provide an efficient mechanism for 
creating workflows of composite services by 
means of authoring tools for the moment, and 
through an automated planning in the future. 

To this end, technical components in an infra-
structure must be properly described, and the se-

mantics of the descriptions should be defined 
based on a shared ontology.  

2 Architecture of a Language Infrastruc-
ture 

The linguistic service ontology described in this 
paper has not been intended for a particular lan-
guage infrastructure. However we expect that the 
ontology should be first introduced in an infra-
structure like the Language Grid 1 , because it, 
unlike other research-oriented infrastructures, tries 
to incorporate a wide range of NLP tools and 
community-based language resources (Ishida, 
2006) in order to be useful for a range of intercul-
tural collaboration activities. 

The fundamental technical components in the 
Language Grid could be: (a) external web-based 
services, (b) on-site NLP core functions, (c) static 
language resources, and (d) wrapper programs.  

Figure 1 depicts the general architecture of the 
infrastructure. The technical components listed 
above are deployed as shown in the figure.  

Computational nodes in the language grid are 
classified into the following two types as described 
in (Murakami et al., 2006). 

 A service node accommodates atomic linguistic 
services that provide functionalities of the NLP 
tool/system running on a node, or they can sim-
ply have a wrapper program that consults an ex-
ternal web-based linguistic service. 
 A core node maintains a repository of the known 
atomic linguistic services, and provides service 
discovery functionality to the possible us-
ers/applications. It also maintains a workflow re-

                                                 
1 Language Grid: http://langrid.nict.go.jp/ 

145



pository for composite linguistic services, and is 
equipped with a workflow engine. 

Figure 1. Architecture of a Language Infrastructure. 
 

Given a technical architecture like this, the lin-
guistic service ontology will serve as a basis for 
composition of composite linguistic services, and 
efficient wrapper generation. The wrapper genera-
tion processes are unavoidable during incorpora-
tion of existing general linguistic services or dis-
semination of newly created community-based 
language resources. Tthe most important desidera-
tum for the ontology, therefore, is that it be able to 
specify the input/output constraints of a linguistic 
service properly. Such input/output specifications 
enable us to derive a taxonomy of linguistic service 
and the associated language resources.  

3 The Upper Ontology 

3.1 The top level 
We have developed the upper part of the service 
ontology so far, and have been working on detail-
ing some of its core parts. Figure 2 shows the top 
level of the proposed linguistic service ontology.  

Figure 2. The Top Level of the Ontology. 
 
The topmost class is NL_Resource, which is 

partitioned into ProcessingResource, and 
LanguageResource. Here, as in GATE (Cun-

ningham, 2002), processing resource refers to pro-
grammatic or algorithmic resources, while lan-
guage resource refers to data-only static resources 
such as lexicons or corpora. The innate relation 
between these two classes is: a processing resource 
can use language resources. This relationship is 
specifically introduced to properly define linguistic 
services that are intended to provide access func-
tions to language resources. 

As shown in the figure, LinguisticSer-
vice is provided by a processing resource, stress-
ing that any linguistic service is realized by a proc-
essing resource, even if its prominent functionality 
is accessing language resources in response to a 
user’s query. It also has the meta-information for 
advertising its non-functional descriptions. 

The fundamental classes for abstract linguistic 
objects, Expression, Meaning, and De-
scription and the innate relations among them 
are illustrated in Figure 3. These play roles in de-
fining functionalities of some types of processing 
resources and associated language resources. As 
shown in Fig. 3, an expression may denote a mean-
ing, and the meaning can be further described by a 
description, especially for human uses. 

Figure 3. Classes for Abstract Linguistic Objects. 
 

In addition to these, NLProcessedStatus 
and LinguisticAnnotation are important in 
the sense that NLP status represents the so-called 
IOPE (Input-Output-Precondition-Effect) parame-
ters of a linguistic processor, which is a subclass of 
the processing resource, and the data schema for 
the results of a linguistic analysis is defined by us-
ing the linguistic annotation class. 

3.2 Taxonomy of language resources 
The language resource class currently is partitioned 
into subclasses for Corpus and Dictionary. 
The immediate subclasses of the dictionary class 
are: (1) MonolingualDictionary, (2) Bi-

hasNLProcessedStatus*hasNLProcessedStatus*

NLP
Tool

Linguistic
Service

External
Linguistic
Service

Language
ResourceAccess

Mechanism

Language
Resource

maintains
-profiles registry

-workflows

Core Node

Service Node

Application
Program

wrapper

NLP
Tool

Linguistic
Service

External
Linguistic
Service

Language
ResourceAccess

Mechanism

Language
Resource

maintains
-profiles registry

-workflows

Core Node

Service Node

Application
Program

wrapper

146



lingualDictionary, (3) Multilingual-
Terminology, and (4) ConceptLexicon. 
The major instances of (1) and (2) are so-called 
machine-readable dictionaries (MRDs). Many of 
the community-based special language resources 
should fall into (3), including multilingual termi-
nology lists specialized for some application do-
mains. For subclass (4), we consider the computa-
tional concept lexicons, which can be modeled by 
a WordNet-like encoding framework (Hayashi and 
Ishida, 2006). 

3.3 Taxonomy of processing resources 
The top level of the processing resource class con-
sists of the following four subclasses, which take 
into account the input/output constraints of proc-
essing resources, as well as the language resources 
they utilize. 

 AbstractReader, AbstractWriter: 
These classes are introduced to describe compu-
tational processes that convert to-and-from non-
textual representation (e.g. speech) and textual 
representation (character strings). 
 LR_Accessor: This class is introduced to de-
scribe language resource access functionalities. It 
is first partitioned into CorpusAccessor and 
DictionaryAccessor, depending on the 
type of language resource it accesses. The input 
to a language resource accessor is a query 
(LR_AccessQuery, sub-class of Expres-
sion), and the output is a kind of ‘dictionary 
meaning’ (DictionaryMeaning), which is a 
sub-class of meaning class. The dictionary mean-
ing class is further divided into sub-classes by re-
ferring to the taxonomy of dictionary.  
 LinguisticProcessor: This class is further 
discussed in the next subsection. 

3.4 Linguistic processors 
The linguistic processor class is introduced to rep-
resent NLP tools/systems. Currently and tenta-
tively, the linguistic processor class is first parti-
tioned into Transformer and Analyzer. 

The transformer class is introduced to represent 
Paraphrasor and Translator; both rewrite 
the input linguistic expression into another expres-
sion while maintaining the original meaning. The 
only difference is the sameness of the input/output 
languages. We explicitly express the input/output 
language constraints in each class definition. 

 
Figure 4. Taxonomy of Linguistic Analyzer. 

 
Figure 4 shows the working taxonomy of the 

analyzer class. While it is not depicted in the figure, 
the input/output constraints of a linguistic analyzer 
are specified by the Expression class, while its 
precondition/effect parameters are defined by 
NLProcessedStatus class. The details are 
also not shown in this figure, these constraints are 
further restricted with respect to the taxonomy of 
the processing resource.  

We also assume that any linguistic analyzer ad-
ditively annotates some linguistic information to 
the input, as proposed by (Cunningham, 2002), 
(Klein and Potter, 2004). That is, an analyzer 
working at a certain linguistic level (or ‘depth’) 
adds the corresponding level of annotations to the 
input. In this sense, any natural language expres-
sion can have a layered/multiple linguistic annota-
tion. To make this happen, a linguistic service on-
tology has to appropriately define a sub-ontology 
for the linguistic annotations by itself or by incor-
porating some external standard, such as LAF (Ide 
and Romary, 2004). 

3.5 NLP status and the associated issues 
Figure 5 illustrates our working taxonomy of NLP 
processed status. Note that, in this figure, only the 
portion related to linguistic analyzer is detailed. 
Benefits from the NLP status class will be twofold: 
(1) as a part of the description of a linguistic ana-
lyzer, we assign corresponding instances of this 
class as its precondition/effect parameters, (2) any 
instance of the expression class can be concisely 

147


