













































Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics


Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 960–967,
Prague, Czech Republic, June 2007. c©2007 Association for Computational Linguistics

Learning Synchronous Grammars for Semantic Parsing with
Lambda Calculus

Yuk Wah Wong and Raymond J. Mooney

Department of Computer Sciences

The University of Texas at Austin

{ywwong,mooney}@cs.utexas.edu

Abstract

This paper presents the first empirical results

to our knowledge on learning synchronous

grammars that generate logical forms. Using

statistical machine translation techniques, a

semantic parser based on a synchronous

context-free grammar augmented with λ-
operators is learned given a set of training

sentences and their correct logical forms.

The resulting parser is shown to be the best-

performing system so far in a database query

domain.

1 Introduction

Originally developed as a theory of compiling pro-

gramming languages (Aho and Ullman, 1972), syn-

chronous grammars have seen a surge of interest re-

cently in the statistical machine translation (SMT)

community as a way of formalizing syntax-based

translation models between natural languages (NL).

In generating multiple parse trees in a single deriva-

tion, synchronous grammars are ideal for model-

ing syntax-based translation because they describe

not only the hierarchical structures of a sentence

and its translation, but also the exact correspon-

dence between their sub-parts. Among the gram-

mar formalisms successfully put into use in syntax-

based SMT are synchronous context-free gram-

mars (SCFG) (Wu, 1997) and synchronous tree-

substitution grammars (STSG) (Yamada and Knight,

2001). Both formalisms have led to SMT sys-

tems whose performance is state-of-the-art (Chiang,

2005; Galley et al., 2006).

Synchronous grammars have also been used in

other NLP tasks, most notably semantic parsing,

which is the construction of a complete, formal

meaning representation (MR) of an NL sentence. In

our previous work (Wong and Mooney, 2006), se-

mantic parsing is cast as a machine translation task,

where an SCFG is used to model the translation

of an NL into a formal meaning-representation lan-

guage (MRL). Our algorithm, WASP, uses statistical

models developed for syntax-based SMT for lexical

learning and parse disambiguation. The result is a

robust semantic parser that gives good performance

in various domains. More recently, we show that

our SCFG-based parser can be inverted to produce a

state-of-the-art NL generator, where a formal MRL

is translated into an NL (Wong and Mooney, 2007).

Currently, the use of learned synchronous gram-

mars in semantic parsing and NL generation is lim-

ited to simple MRLs that are free of logical vari-

ables. This is because grammar formalisms such as

SCFG do not have a principled mechanism for han-

dling logical variables. This is unfortunate because

most existing work on computational semantics is

based on predicate logic, where logical variables

play an important role (Blackburn and Bos, 2005).

For some domains, this problem can be avoided by

transforming a logical language into a variable-free,

functional language (e.g. the GEOQUERY functional

query language in Wong and Mooney (2006)). How-

ever, development of such a functional language is

non-trivial, and as we will see, logical languages can

be more appropriate for certain domains.

On the other hand, most existing methods for

mapping NL sentences to logical forms involve sub-

stantial hand-written components that are difficult

to maintain (Joshi and Vijay-Shanker, 2001; Bayer

et al., 2004; Bos, 2005). Zettlemoyer and Collins

(2005) present a statistical method that is consider-

960



ably more robust, but it still relies on hand-written

rules for lexical acquisition, which can create a per-

formance bottleneck.

In this work, we show that methods developed for

SMT can be brought to bear on tasks where logical

forms are involved, such as semantic parsing. In par-

ticular, we extend the WASP semantic parsing algo-

rithm by adding variable-binding λ-operators to the
underlying SCFG. The resulting synchronous gram-

mar generates logical forms using λ-calculus (Mon-
tague, 1970). A semantic parser is learned given a

set of sentences and their correct logical forms us-

ing SMT methods. The new algorithm is called λ-
WASP, and is shown to be the best-performing sys-

tem so far in the GEOQUERY domain.

2 Test Domain

In this work, we mainly consider the GEOQUERY

domain, where a query language based on Prolog is

used to query a database on U.S. geography (Zelle

and Mooney, 1996). The query language consists

of logical forms augmented with meta-predicates

for concepts such as smallest and count. Figure 1

shows two sample logical forms and their English

glosses. Throughout this paper, we use the notation

x1, x2, . . . for logical variables.

Although Prolog logical forms are the main focus

of this paper, our algorithm makes minimal assump-

tions about the target MRL. The only restriction on

the MRL is that it be defined by an unambiguous

context-free grammar (CFG) that divides a logical

form into subformulas (and terms into subterms).

Figure 2(a) shows a sample parse tree of a logical

form, where each CFG production corresponds to a

subformula.

3 The Semantic Parsing Algorithm

Our work is based on the WASP semantic parsing al-

gorithm (Wong and Mooney, 2006), which translates

NL sentences into MRs using an SCFG. In WASP,

each SCFG production has the following form:

A → 〈α, β〉 (1)

where α is an NL phrase and β is the MR translation
of α. Both α and β are strings of terminal and non-
terminal symbols. Each non-terminal in α appears

in β exactly once. We use indices to show the cor-
respondence between non-terminals in α and β. All
derivations start with a pair of co-indexed start sym-

bols, 〈S
1
, S

1
〉. Each step of a derivation involves

the rewriting of a pair of co-indexed non-terminals

by the same SCFG production. The yield of a deriva-

tion is a pair of terminal strings, 〈e, f〉, where e is
an NL sentence and f is the MR translation of e.

For convenience, we call an SCFG production a rule

throughout this paper.

While WASP works well for target MRLs that

are free of logical variables such as CLANG (Wong

and Mooney, 2006), it cannot easily handle various

kinds of logical forms used in computational seman-

tics, such as predicate logic. The problem is that

WASP lacks a principled mechanism for handling

logical variables. In this work, we extend the WASP

algorithm by adding a variable-binding mechanism

based on λ-calculus, which allows for compositional
semantics for logical forms.

This work is based on an extended version of

SCFG, which we call λ-SCFG, where each rule has
the following form:

A → 〈α, λx1 . . . λxk.β〉 (2)

where α is an NL phrase and β is the MR trans-
lation of α. Unlike (1), β is a string of termi-
nals, non-terminals, and logical variables. The

variable-binding operator λ binds occurrences of
the logical variables x1, . . . , xk in β, which makes
λx1 . . . λxk.β a λ-function of arity k. When ap-
plied to a list of arguments, (xi1 , . . . , xik), the λ-
function gives βσ, where σ is a substitution oper-
ator, {x1/xi1 , . . . , xk/xik}, that replaces all bound
occurrences of xj in β with xij . If any of the ar-
guments xij appear in β as a free variable (i.e. not
bound by any λ), then those free variables in β must
be renamed before function application takes place.

Each non-terminal Aj in β is followed by a list
of arguments, xj = (xj1 , . . . , xjkj

). During pars-

ing, Aj must be rewritten by a λ-function fj of ar-
ity kj . Like SCFG, a derivation starts with a pair
of co-indexed start symbols and ends when all non-

terminals have been rewritten. To compute the yield

of a derivation, each fj is applied to its correspond-
ing arguments xj to obtain an MR string free of λ-
operators with logical variables properly named.

961



(a) answer(x1,smallest(x2,(state(x1),area(x1,x2))))
What is the smallest state by area?

(b) answer(x1,count(x2,(city(x2),major(x2),loc(x2,x3),next to(x3,x4),state(x3),
equal(x4,stateid(texas)))))

How many major cities are in states bordering Texas?

Figure 1: Sample logical forms in the GEOQUERY domain and their English glosses.

(a)
smallest(x2,(FORM,FORM))

QUERY

answer(x1,FORM)

area(x1,x2)state(x1)

(b)
λx1.smallest(x2,(FORM(x1),FORM(x1, x2)))

QUERY

answer(x1,FORM(x1))

λx1.state(x1) λx1.λx2.area(x1,x2)

Figure 2: Parse trees of the logical form in Figure 1(a).

As a concrete example, Figure 2(b) shows an

MR parse tree that corresponds to the English

parse, [What is the [smallest [state] [by area]]],

based on the λ-SCFG rules in Figure 3. To
compute the yield of this MR parse tree, we start

from the leaf nodes: apply λx1.state(x1) to
the argument (x1), and λx1.λx2.area(x1,x2)
to the arguments (x1, x2). This results in two
MR strings: state(x1) and area(x1,x2).
Substituting these MR strings for the FORM non-

terminals in the parent node gives the λ-function
λx1.smallest(x2,(state(x1),area(x1,x2))).
Applying this λ-function to (x1) gives the MR
string smallest(x2,(state(x1),area(x1,x2))).
Substituting this MR string for the FORM non-

terminal in the grandparent node in turn gives the

logical form in Figure 1(a). This is the yield of the

MR parse tree, since the root node of the parse tree

is reached.

3.1 Lexical Acquisition

Given a set of training sentences paired with their

correct logical forms, {〈ei, fi〉}, the main learning
task is to find a λ-SCFG, G, that covers the train-
ing data. Like most existing work on syntax-based

SMT (Chiang, 2005; Galley et al., 2006), we con-

struct G using rules extracted from word alignments.
We use the K = 5 most probable word alignments
for the training set given by GIZA++ (Och and Ney,

2003), with variable names ignored to reduce spar-

sity. Rules are then extracted from each word align-

ment as follows.

To ground our discussion, we use the word align-

ment in Figure 4 as an example. To represent

the logical form in Figure 4, we use its linearized

parse—a list of MRL productions that generate the

logical form, in top-down, left-most order (cf. Fig-

ure 2(a)). Since the MRL grammar is unambiguous,

every logical form has a unique linearized parse. We

assume the alignment to be n-to-1, where each word
is linked to at most one MRL production.

Rules are extracted in a bottom-up manner, start-

ing with MRL productions at the leaves of the

MR parse tree, e.g. FORM → state(x1) in Fig-
ure 2(a). Given an MRL production, A → β, a
rule A → 〈α, λxi1 . . . λxik .β〉 is extracted such that:
(1) α is the NL phrase linked to the MRL produc-
tion; (2) xi1 , . . . , xik are the logical variables that
appear in β and outside the current leaf node in the
MR parse tree. If xi1 , . . . , xik were not bound by
λ, they would become free variables in β, subject to
renaming during function application (and therefore,

invisible to the rest of the logical form). For exam-

ple, since x1 is an argument of the state predicate
as well as answer and area, x1 must be bound
(cf. the corresponding tree node in Figure 2(b)). The

rule extracted for the state predicate is shown in

Figure 3.

The case for the internal nodes of the MR parse

tree is similar. Given an MRL production, A → β,
where β contains non-terminals A1, . . . , An, a rule
A → 〈α, λxi1 . . . λxik .β

′〉 is extracted such that: (1)
α is the NL phrase linked to the MRL production,
with non-terminals A1, . . . , An showing the posi-
tions of the argument strings; (2) β′ is β with each
non-terminal Aj replaced with Aj(xj1 , . . . , xjkj

),
where xj1 , . . . , xjkj

are the bound variables in the

λ-function used to rewrite Aj ; (3) xi1 , . . . , xik are
the logical variables that appear in β′ and outside
the current MR sub-parse. For example, see the rule

962



FORM → 〈state , λx1.state(x1)〉
FORM → 〈by area , λx1.λx2.area(x1,x2)〉
FORM → 〈smallest FORM

1
FORM

2
, λx1.smallest(x2,(FORM 1 (x1),FORM 2 (x1, x2)))〉

QUERY → 〈what is (1) FORM
1

, answer(x1,FORM 1 (x1))〉

Figure 3: λ-SCFG rules for parsing the English sentence in Figure 1(a).

smallest
the

is
what

state
by

area

QUERY → answer(x1,FORM)
FORM → smallest(x2,(FORM,FORM))
FORM → state(x1)
FORM → area(x1,x2)

Figure 4: Word alignment for the sentence pair in Figure 1(a).

extracted for the smallest predicate in Figure 3,

where x2 is an argument of smallest, but it does
not appear outside the formula smallest(...),

so x2 need not be bound by λ. On the other
hand, x1 appears in β

′, and it appears outside

smallest(...) (as an argument of answer),

so x1 must be bound.

Rule extraction continues in this manner until the

root of the MR parse tree is reached. Figure 3 shows

all the rules extracted from Figure 4.1

3.2 Probabilistic Semantic Parsing Model

Since the learned λ-SCFG can be ambiguous, a
probabilistic model is needed for parse disambigua-

tion. We use the maximum-entropy model proposed

in Wong and Mooney (2006), which defines a condi-

tional probability distribution over derivations given

an observed NL sentence. The output MR is the

yield of the most probable derivation according to

this model.

Parameter estimation involves maximizing the

conditional log-likelihood of the training set. For

each rule, r, there is a feature that returns the num-
ber of times r is used in a derivation. More features
will be introduced in Section 5.

4 Promoting NL/MRL Isomorphism

We have described the λ-WASP algorithm which
generates logical forms based on λ-calculus. While
reasonably effective, it can be improved in several

ways. In this section, we focus on improving lexical

acquisition.

1
For details regarding non-isomorphic NL/MR parse trees,

removal of bad links from alignments, and extraction of word
gaps (e.g. the token (1) in the last rule of Figure 3), see Wong
and Mooney (2006).

To see why the current lexical acquisition algo-

rithm can be problematic, consider the word align-

ment in Figure 5 (for the sentence pair in Fig-

ure 1(b)). No rules can be extracted for the state

predicate, because the shortest NL substring that

covers the word states and the argument string

Texas, i.e. states bordering Texas, contains the word

bordering, which is linked to an MRL production

outside the MR sub-parse rooted at state. Rule

extraction is forbidden in this case because it would

destroy the link between bordering and next to.

In other words, the NL and MR parse trees are not

isomorphic.

This problem can be ameliorated by transforming

the logical form of each training sentence so that

the NL and MR parse trees are maximally isomor-

phic. This is possible because some of the opera-

tors used in the logical forms, notably the conjunc-

tion operator (,), are both associative (a,(b,c)

= (a,b),c = a,b,c) and commutative (a,b =
b,a). Hence, conjuncts can be reordered and re-

grouped without changing the meaning of a conjunc-

tion. For example, rule extraction would be pos-

sible if the positions of the next to and state

conjuncts were switched. We present a method for

regrouping conjuncts to promote isomorphism be-

tween NL and MR parse trees.2 Given a conjunc-

tion, it does the following: (See Figure 6 for the

pseudocode, and Figure 5 for an illustration.)

Step 1. Identify the MRL productions that corre-

spond to the conjuncts and the meta-predicate that

takes the conjunction as an argument (count in

Figure 5), and figure them as vertices in an undi-

2
This method also applies to any operators that are associa-

tive and commutative, e.g. disjunction. For concreteness, how-
ever, we use conjunction as an example.

963



QUERY → answer(x1,FORM)
how

many
major
cities

are
in

states
bordering

texas

FORM → count(x2,(CONJ),x1)
CONJ → city(x2),CONJ
CONJ → major(x2),CONJ
CONJ → loc(x2,x3),CONJ
CONJ → next to(x3,x4),CONJ
CONJ → state(x3),FORM
FORM → equal(x4,stateid(texas))

O
ri

g
in

a
l

M
R

p
a
rs

e

x2

x3

x4

how many

cities

in

states

bordering

texas

major

QUERY

answer(x1,FORM)

count(x2,(CONJ),x1)

major(x2),CONJ

city(x2),CONJ

loc(x2,x3),CONJ

state(x3),CONJ

next to(x3,x4),FORM

equal(x4,stateid(texas))

QUERY

answer(x1,FORM)

count(x2,(CONJ),x1)

major(x2),CONJ

city(x2),CONJ

loc(x2,x3),CONJ

equal(x4,stateid(texas))

next to(x3,x4),CONJ

state(x3),FORM

(s
h
o
w

n
a
b
o
v
e

a
s

th
ic

k
e
d
g
e
s)

S
te

p
5
.

F
in

d
M

S
T

Step 4. Assign edge weights

Step 6.

Construct MR parse

F
o
rm

g
ra

p
h

S
te

p
s

1
–
3
.

Figure 5: Transforming the logical form in Figure 1(b). The step numbers correspond to those in Figure 6.

Input: A conjunction, c, of n conjuncts; MRL productions, p1, . . . , pn, that correspond to each conjunct; an MRL production,
p0, that corresponds to the meta-predicate taking c as an argument; an NL sentence, e; a word alignment, a.

Let v(p) be the set of logical variables that appear in p. Create an undirected graph, Γ, with vertices V = {pi|i = 0, . . . , n}1
and edges E = {(pi, pj)|i < j,v(pi) ∩ v(pj) 6= ∅}.
Let e(p) be the set of words in e to which p is linked according to a. Let span(pi, pj) be the shortest substring of e that2
includes e(pi) ∪ e(pj). Subtract {(pi, pj)|i 6= 0, span(pi, pj) ∩ e(p0) 6= ∅} from E.
Add edges (p0, pi) to E if pi is not already connected to p0.3
For each edge (pi, pj) in E, set edge weight to the minimum word distance between e(pi) and e(pj).4
Find a minimum spanning tree, T , for Γ using Kruskal’s algorithm.5
Using p0 as the root, construct a conjunction c

′
based on T , and then replace c with c

′
.6

Figure 6: Algorithm for regrouping conjuncts to promote isomorphism between NL and MR parse trees.

rected graph, Γ. An edge (pi, pj) is in Γ if and only
if pi and pj contain occurrences of the same logical
variables. Each edge in Γ indicates a possible edge
in the transformed MR parse tree. Intuitively, two

concepts are closely related if they involve the same

logical variables, and therefore, should be placed

close together in the MR parse tree. By keeping oc-

currences of a logical variable in close proximity in

the MR parse tree, we also avoid unnecessary vari-

able bindings in the extracted rules.

Step 2. Remove edges from Γ whose inclusion in
the MR parse tree would prevent the NL and MR

parse trees from being isomorphic.

Step 3. Add edges to Γ to make sure that a spanning
tree for Γ exists.
Steps 4–6. Assign edge weights based on word dis-

tance, find a minimum spanning tree, T , for Γ, then
regroup the conjuncts based on T . The choice of T
reflects the intuition that words that occur close to-

gether in a sentence tend to be semantically related.

This procedure is repeated for all conjunctions

that appear in a logical form. Rules are then ex-

tracted from the same input alignment used to re-

group conjuncts. Of course, the regrouping of con-

juncts requires a good alignment to begin with, and

that requires a reasonable ordering of conjuncts in

the training data, since the alignment model is sen-

sitive to word order. This suggests an iterative algo-

rithm in which a better grouping of conjuncts leads

to a better alignment model, which guides further re-

grouping until convergence. We did not pursue this,

as it is not needed in our experiments so far.

964



(a) answer(x1,largest(x2,(state(x1),major(x1),river(x1),traverse(x1,x2))))
What is the entity that is a state and also a major river, that traverses something that is the largest?

(b) answer(x1,smallest(x2,(highest(x1,(point(x1),loc(x1,x3),state(x3))),density(x1,x2))))
Among the highest points of all states, which one has the lowest population density?

(c) answer(x1,equal(x1,stateid(alaska)))
Alaska?

(d) answer(x1,largest(x2,(largest(x1,(state(x1),next to(x1,x3),state(x3))),population(x1,x2))))
Among the largest state that borders some other state, which is the one with the largest population?

Figure 7: Typical errors made by the λ-WASP parser, along with their English interpretations, before any
language modeling for the target MRL was done.

5 Modeling the Target MRL

In this section, we propose two methods for model-

ing the target MRL. This is motivated by the fact that

many of the errors made by the λ-WASP parser can
be detected by inspecting the MR translations alone.

Figure 7 shows some typical errors, which can be

classified into two broad categories:

1. Type mismatch errors. For example, a state can-

not possibly be a river (Figure 7(a)). Also it is

awkward to talk about the population density of a

state’s highest point (Figure 7(b)).

2. Errors that do not involve type mismatch. For ex-

ample, a query can be overly trivial (Figure 7(c)),

or involve aggregate functions on a known single-

ton (Figure 7(d)).

The first type of errors can be fixed by type check-

ing. Each m-place predicate is associated with a list
of m-tuples showing all valid combinations of entity
types that the m arguments can refer to:

point( ): {(POINT)}
density( , ):

{(COUNTRY, NUM), (STATE, NUM), (CITY, NUM)}

These m-tuples of entity types are given as do-
main knowledge. The parser maintains a set of

possible entity types for each logical variable in-

troduced in a partial derivation (except those that

are no longer visible). If there is a logical vari-

able that cannot refer to any types of entities

(i.e. the set of entity types is empty), then the par-

tial derivation is considered invalid. For exam-

ple, based on the tuples shown above, point(x1)
and density(x1, ) cannot be both true, because
{POINT} ∩ {COUNTRY, STATE, CITY} = ∅. The
use of type checking is to exploit the fact that peo-

ple tend not to ask questions that obviously have no

valid answers (Grice, 1975). It is also similar to

Schuler’s (2003) use of model-theoretic interpreta-

tions to guide syntactic parsing.

Errors that do not involve type mismatch are

handled by adding new features to the maximum-

entropy model (Section 3.2). We only consider fea-

tures that are based on the MR translations, and

therefore, these features can be seen as an implicit

language model of the target MRL (Papineni et al.,

1997). Of the many features that we have tried,

one feature set stands out as being the most effec-

tive, the two-level rules in Collins and Koo (2005),

which give the number of times a given rule is used

to expand a non-terminal in a given parent rule.

We use only the MRL part of the rules. For ex-

ample, a negative weight for the combination of

QUERY → answer(x1,FORM(x1)) and FORM
→ λx1.equal(x1, ) would discourage any parse
that yields Figure 7(c). The two-level rules features,

along with the features described in Section 3.2, are

used in the final version of λ-WASP.

6 Experiments

We evaluated the λ-WASP algorithm in the GEO-
QUERY domain. The larger GEOQUERY corpus con-

sists of 880 English questions gathered from various

sources (Wong and Mooney, 2006). The questions

were manually translated into Prolog logical forms.

The average length of a sentence is 7.57 words.

We performed a single run of 10-fold cross

validation, and measured the performance of the

learned parsers using precision (percentage of trans-

lations that were correct), recall (percentage of test

sentences that were correctly translated), and F-

measure (harmonic mean of precision and recall).

A translation is considered correct if it retrieves the

same answer as the correct logical form.

Figure 8 shows the learning curves for the λ-

965



 0

 10

 20

 30

 40

 50

 60

 70

 80

 90

 100

 0  100  200  300  400  500  600  700  800  900

P
re

c
is

io
n

 (
%

)

Number of training examples

lambda-WASP
WASP

SCISSOR
Z&C

(a) Precision

 0

 10

 20

 30

 40

 50

 60

 70

 80

 90

 100

 0  100  200  300  400  500  600  700  800  900

R
e

c
a

ll
 (

%
)

Number of training examples

lambda-WASP
WASP

SCISSOR
Z&C

(b) Recall

Figure 8: Learning curves for various parsing algorithms on the larger GEOQUERY corpus.

(%) λ-WASP WASP SCISSOR Z&C

Precision 91.95 87.19 92.08 96.25

Recall 86.59 74.77 72.27 79.29

F-measure 89.19 80.50 80.98 86.95

Table 1: Performance of various parsing algorithms on the larger GEOQUERY corpus.

WASP algorithm compared to: (1) the original

WASP algorithm which uses a functional query lan-

guage (FunQL); (2) SCISSOR (Ge and Mooney,

2005), a fully-supervised, combined syntactic-

semantic parsing algorithm which also uses FunQL;

and (3) Zettlemoyer and Collins (2005) (Z&C), a

CCG-based algorithm which uses Prolog logical

forms. Table 1 summarizes the results at the end

of the learning curves (792 training examples for λ-
WASP, WASP and SCISSOR, 600 for Z&C).

A few observations can be made. First, algorithms

that use Prolog logical forms as the target MRL gen-

erally show better recall than those using FunQL. In

particular, λ-WASP has the best recall by far. One
reason is that it allows lexical items to be combined

in ways not allowed by FunQL or the hand-written

templates in Z&C, e.g. [smallest [state] [by area]]

in Figure 3. Second, Z&C has the best precision, al-

though their results are based on 280 test examples

only, whereas our results are based on 10-fold cross

validation. Third, λ-WASP has the best F-measure.

To see the relative importance of each component

of the λ-WASP algorithm, we performed two abla-
tion studies. First, we compared the performance

of λ-WASP with and without conjunct regrouping
(Section 4). Second, we compared the performance

of λ-WASP with and without language modeling for
the MRL (Section 5). Table 2 shows the results.

It is found that conjunct regrouping improves recall

(p < 0.01 based on the paired t-test), and the use of
two-level rules in the maximum-entropy model im-

proves precision and recall (p < 0.05). Type check-

ing also significantly improves precision and recall.

A major advantage of λ-WASP over SCISSOR and
Z&C is that it does not require any prior knowl-

edge of the NL syntax. Figure 9 shows the perfor-

mance of λ-WASP on the multilingual GEOQUERY
data set. The 250-example data set is a subset of the

larger GEOQUERY corpus. All English questions in

this data set were manually translated into Spanish,

Japanese and Turkish, while the corresponding Pro-

log queries remain unchanged. Figure 9 shows that

λ-WASP performed comparably for all NLs. In con-
trast, SCISSOR cannot be used directly on the non-

English data, because syntactic annotations are only

available in English. Z&C cannot be used directly

either, because it requires NL-specific templates for

building CCG grammars.

7 Conclusions

We have presented λ-WASP, a semantic parsing al-
gorithm based on a λ-SCFG that generates logical
forms using λ-calculus. A semantic parser is learned
given a set of training sentences and their correct

logical forms using standard SMT techniques. The

result is a robust semantic parser for predicate logic,

and it is the best-performing system so far in the

GEOQUERY domain.

This work shows that it is possible to use standard

SMT methods in tasks where logical forms are in-

volved. For example, it should be straightforward

to adapt λ-WASP to the NL generation task—all
one needs is a decoder that can handle input logical

forms. Other tasks that can potentially benefit from

966



(%) Precision Recall

λ-WASP 91.95 86.59
w/o conj. regrouping 90.73 83.07

(%) Precision Recall

λ-WASP 91.95 86.59
w/o two-level rules 88.46 84.32

and w/o type checking 65.45 63.18

Table 2: Performance of λ-WASP with certain components of the algorithm removed.

 0

 20

 40

 60

 80

 100

 0  50  100  150  200  250

P
re

c
is

io
n

 (
%

)

Number of training examples

English
Spanish

Japanese
Turkish

(a) Precision

 0

 20

 40

 60

 80

 100

 0  50  100  150  200  250

R
e

c
a

ll
 (

%
)

Number of training examples

English
Spanish

Japanese
Turkish

(b) Recall

Figure 9: Learning curves for λ-WASP on the multilingual GEOQUERY data set.

this include question answering and interlingual MT.

In future work, we plan to further generalize the

synchronous parsing framework to allow different

combinations of grammar formalisms. For exam-

ple, to handle long-distance dependencies that occur

in open-domain text, CCG and TAG would be more

appropriate than CFG. Certain applications may re-

quire different meaning representations, e.g. frame

semantics.

Acknowledgments: We thank Rohit Kate, Raz-

van Bunescu and the anonymous reviewers for their

valuable comments. This work was supported by a

gift from Google Inc.

References

A. V. Aho and J. D. Ullman. 1972. The Theory of Pars-
ing, Translation, and Compiling. Prentice Hall, Englewood
Cliffs, NJ.

S. Bayer, J. Burger, W. Greiff, and B. Wellner. 2004.
The MITRE logical form generation system. In Proc. of
Senseval-3, Barcelona, Spain, July.

P. Blackburn and J. Bos. 2005. Representation and Inference
for Natural Language: A First Course in Computational Se-
mantics. CSLI Publications, Stanford, CA.

J. Bos. 2005. Towards wide-coverage semantic interpretation.
In Proc. of IWCS-05, Tilburg, The Netherlands, January.

D. Chiang. 2005. A hierarchical phrase-based model for sta-
tistical machine translation. In Proc. of ACL-05, pages 263–
270, Ann Arbor, MI, June.

M. Collins and T. Koo. 2005. Discriminative reranking
for natural language parsing. Computational Linguistics,
31(1):25–69.

M. Galley, J. Graehl, K. Knight, D. Marcu, S. DeNeefe,
W. Wang, and I. Thayer. 2006. Scalable inference and train-
ing of context-rich syntactic translation models. In Proc. of
COLING/ACL-06, pages 961–968, Sydney, Australia, July.

R. Ge and R. J. Mooney. 2005. A statistical semantic parser
that integrates syntax and semantics. In Proc. of CoNLL-05,
pages 9–16, Ann Arbor, MI, July.

H. P. Grice. 1975. Logic and conversation. In P. Cole and
J. Morgan, eds., Syntax and Semantics 3: Speech Acts, pages
41–58. Academic Press, New York.

A. K. Joshi and K. Vijay-Shanker. 2001. Compositional se-
mantics with lexicalized tree-adjoining grammar (LTAG):
How much underspecification is necessary? In H. Bunt et
al., eds., Computing Meaning, volume 2, pages 147–163.
Kluwer Academic Publishers, Dordrecht, The Netherlands.

R. Montague. 1970. Universal grammar. Theoria, 36:373–398.

F. J. Och and H. Ney. 2003. A systematic comparison of vari-
ous statistical alignment models. Computational Linguistics,
29(1):19–51.

K. A. Papineni, S. Roukos, and R. T. Ward. 1997. Feature-
based language understanding. In Proc. of EuroSpeech-97,
pages 1435–1438, Rhodes, Greece.

W. Schuler. 2003. Using model-theoretic semantic interpre-
tation to guide statistical parsing and word recognition in a
spoken language interface. In Proc. of ACL-03, pages 529–
536.

Y. W. Wong and R. J. Mooney. 2006. Learning for seman-
tic parsing with statistical machine translation. In Proc. of
HLT/NAACL-06, pages 439–446, New York City, NY.

Y. W. Wong and R. J. Mooney. 2007. Generation by inverting
a semantic parser that uses statistical machine translation. In
Proc. of NAACL/HLT-07, Rochester, NY, to appear.

D. Wu. 1997. Stochastic inversion transduction grammars and
bilingual parsing of parallel corpora. Computational Lin-
guistics, 23(3):377–403.

K. Yamada and K. Knight. 2001. A syntax-based statisti-
cal translation model. In Proc. of ACL-01, pages 523–530,
Toulouse, France.

J. M. Zelle and R. J. Mooney. 1996. Learning to parse database
queries using inductive logic programming. In Proc. of
AAAI-96, pages 1050–1055, Portland, OR, August.

L. S. Zettlemoyer and M. Collins. 2005. Learning to map sen-
tences to logical form: Structured classification with proba-
bilistic categorial grammars. In Proc. of UAI-05, Edinburgh,
Scotland, July.

967


