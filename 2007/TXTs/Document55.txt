













































Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics


Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 168–175,
Prague, Czech Republic, June 2007. c©2007 Association for Computational Linguistics

Transforming Projective Bilexical Dependency Grammars into
efficiently-parsable CFGs with Unfold-Fold

Mark Johnson
Microsoft Research Brown University

Redmond, WA Providence, RI
t-majoh@microsoft.com Mark Johnson@Brown.edu

Abstract

This paper shows how to use the Unfold-
Fold transformation to transform Projective
Bilexical Dependency Grammars (PBDGs)
into ambiguity-preserving weakly equiva-
lent Context-Free Grammars (CFGs). These
CFGs can be parsed in O(n3) time using a
CKY algorithm with appropriate indexing,
rather than the O(n5) time required by a
naive encoding. Informally, using the CKY
algorithm with such a CFG mimics the steps
of the Eisner-Satta O(n3) PBDG parsing al-
gorithm. This transformation makes all of
the techniques developed for CFGs available
to PBDGs. We demonstrate this by describ-
ing a maximum posterior parse decoder for
PBDGs.

1 Introduction

Projective Bilexical Dependency Grammars (PB-
DGs) have attracted attention recently for two rea-
sons. First, because they capture bilexical head-to-
head dependencies they are capable of producing
extremely high-quality parses: state-of-the-art dis-
criminatively trained PBDG parsers rival the accu-
racy of the very best statistical parsers available to-
day (McDonald, 2006). Second, Eisner-Satta O(n3)
PBDG parsing algorithms are extremely fast (Eisner,
1996; Eisner and Satta, 1999; Eisner, 2000).

This paper investigates the relationship between
Context-Free Grammar (CFG) parsing and the Eis-
ner/Satta PBDG parsing algorithms, including their
extension to second-order PBDG parsing (McDon-
ald, 2006; McDonald and Pereira, 2006). Specifi-
cally, we show how to use an off-line preprocessing

step, the Unfold-Fold transformation, to transform a
PBDG into an equivalent CFG that can be parsed in
O(n3) time using a version of the CKY algorithm
with suitable indexing (Younger, 1967), and extend
this transformation so that it captures second-order
PBDG dependencies as well. The transformations
are ambiguity-preserving, i.e., there is a one-to-
one mapping between dependency parses and CFG
parses, so it is possible to map the CFG parses back
to the PBDG parses they correspond to.

The PBDG to CFG reductions make techniques
developed for CFGs available to PBDGs as well. For
example, incremental CFG parsing algorithms can
be used with the CFGs produced by this transform,
as can the Inside-Outside estimation algorithm (Lari
and Young, 1990) and more exotic methods such as
estimating adjoined hidden states (Matsuzaki et al.,
2005; Petrov et al., 2006). As an example appli-
cation, we describe a maximum posterior parse de-
coder for PBDGs in Section 8.

The Unfold-Fold transformation is a calculus for
transforming functional and logic programs into
equivalent but (hopefully) faster programs (Burstall
and Darlington, 1977). We use it here to trans-
form CFGs encoding dependency grammars into
other CFGs that are more efficiently parsable. Since
CFGs can be expressed as Horn-clause logic pro-
grams (Pereira and Shieber, 1987) and the Unfold-
Fold transformation is provably correct for such pro-
grams (Sato, 1992; Pettorossi and Proeitti, 1992), it
follows that its application to CFGs is provably cor-
rect as well. The Unfold-Fold transformation is used
here to derive the CFG schemata presented in sec-
tions 5–7. A system that uses these schemata (such
as the one described in section 8) can implement

168



these schemata directly, so the Unfold-Fold trans-
formation plays a theoretical role in this work, justi-
fying the resulting CFG schemata.

The closest related work we are aware of
is McAllester (1999), which also describes a re-
duction of PBDGs to efficiently-parsable CFGs
and directly inspired this work. However, the
CFGs produced by McAllester’s transformation in-
clude epsilon-productions so they require a special-
ized CFG parsing algorithm, while the CFGs pro-
duced by the transformations described here have
binary productions so they can be parsed with
standard CFG parsing algorithms. Further, our
approach extends to second-order PBDG parsing,
while McAllester only discusses first-order PBDGs.

The rest of this paper is structured as follows.
Section 2 defines projective dependency graphs and
grammars and Section 3 reviews the “naive” encod-
ing of PBDGs as CFGs with an O(n5) parse time,
where n is the length of the string to be parsed. Sec-
tion 4 introduces the “split-head” CFG encoding of
PBDGs, which has an O(n4) parse time and serves
as the input to the Unfold-Fold transform. Section 5
uses the Unfold-Fold transform to obtain a weakly-
equivalent CFG encoding of PBDGs which can be
parsed in O(n3) time, and presents timing results
showing that the transformation does speed parsing.
Sections 6 and 7 apply Unfold-Fold in slightly more
complex ways to obtain CFG encodings of PBDGs
that also make second-order dependencies available
in O(n3) time parsable CFGs. Section 8 applies a
PBDG to CFG transform to obtain a maximum pos-
terior decoding parser for PBDGs.

2 Projective bilexical dependency parses
and grammars

Let Σ be a finite set of terminals (e.g., words),
and let 0 be the root terminal not in Σ. If w =
(w1, . . . , wn) ∈ Σ

⋆, let w⋆ = (0, w1, . . . , wn), i.e.,
w⋆ is obtained by prefixing w with 0. A dependency
parse G for w is a tree whose root is labeled 0 and
whose other n vertices are labeled with each of the n
terminals in w. If G contains an arc from u to v then
we say that v is a dependent of u, and if G contains
a path from u to v then we say that v is a descendant
of u. If v is dependent of u that also precedes u in
w⋆ then we say that v is a left dependent of u (right
dependent and left and right descendants are defined
similarly).

0 Sandy gave the dog a bone

Figure 1: A projective dependency parse for the sen-
tence “Sam gave the dog a bone”.

A dependency parse G is projective iff whenever
there is a path from u to v then there is also a path
from u to every word between u and v in w⋆ as well.
Figure 1 depicts a projective dependency parse for
the sentence “Sam gave the dog a bone”.

A projective dependency grammar defines a set of
projective dependency parses. A Projective Bilexi-
cal Dependency Grammar (PBDG) consists of two
relations and , both defined over (Σ∪{0})×
Σ. A PBDG generates a projective dependency
parse G iff u v for all right dependencies (u, v)
in G and v u for all left dependencies (u, v) in
G. The language generated by a PBDG is the set
of strings that have projective dependency parses
generated by the grammar. The following depen-
dency grammar generates the dependency parse in
Figure 1.

0 gave Sandy gave
gave dog the dog
gave bone a bone

This paper does not consider stochastic depen-
dency grammars directly, but see Section 8 for an
application involving them. However, it is straight-
forward to associate weights with dependencies, and
since the dependencies are preserved by the transfor-
mations, obtain a weighted CFG. Standard methods
for converting weighted CFGs to equivalent PCFGs
can be used if required (Chi, 1999). Alternatively,
one can transform a corpus of dependency parses
into a corpus of the corresponding CFG parses, and
estimate CFG production probabilities directly from
that corpus.

3 A naive encoding of PBDGs

There is a well-known method for encoding a PBDG
as a CFG in which each terminal u ∈ Σ is associated
with a corresponding nonterminal X

u
that expands

to u and all of u’s descendants. The nonterminals of
the naive encoding CFG consist of the start symbol
S and symbols X

u
for each terminal u ∈ Σ, and

169



the productions of the CFG are the instances of the
following schemata:

S → X
u

where 0 u
X

u
→ u

X
u

→ X
v

X
u

where v u
X

u
→ X

u
X

v
where u v

The dependency annotations associated with each
production specify how to interpret a local tree gen-
erated by that production, and permit us to map a
CFG parse to the corresponding dependency parse.
For example, the top-most local tree in Figure 2 was
generated by the production S → X

gave
, and indi-

cate that in this parse 0 gave.
Given a terminal vocabulary of size m the CFG

contains O(m2) productions, so it is impractical to
enumerate all possible productions for even modest
vocabularies. Instead productions relevant to a par-
ticular sentence are generated on the fly.

The naive encoding CFG in general requires
O(n5) parsing time with a conventional CKY pars-
ing algorithm, since tracking the head annotations u
and v multiplies the standard O(n3) CFG parse time
requirements by an additional factor proportional to
the O(n2) productions expanding X

u
.

An additional problem with the naive encoding
is that the resulting CFG in general exhibits spuri-
ous ambiguities, i.e., a single dependency parse may
correspond to more than one CFG parse, as shown
in Figure 2. Informally, this is because the CFG per-
mits left and the right dependencies to be arbitrarily
intermingled.

4 Split-head encoding of PBDGs

There are several ways of removing the spurious am-
biguities in the naive CFG encoding just described.
This section presents a method we call the “split-
head encoding”, which removes the ambiguities and
serves as starting point for the grammar transforms
described below.

The split-head encoding represents each word u
in the input string w by two unique terminals ul
and ur in the CFG parse. A split-head CFG’s ter-
minal vocabulary is Σ′ = {ul, ur : u ∈ Σ},
where Σ is the set of terminals of the PBDG. A
PBDG parse with yield w = (u1, . . . , un) is trans-
formed to a split-head CFG parse with yield w′ =
(u1,l, u1,r, . . . , un,l, un,r), so |w

′| = 2|w|.

S

the dog

X
the

X
dog

X
dog

X
gave

gave

X
gave

X
bone

X
a

a

X
bone

bone

X
gave

X
Sandy

Sandy

X
gave

S

the dog

X
the

X
dog

X
dog

X
bone

X
a

a

X
bone

bone

X
gave

X
gave

gave

X
Sandy

Sandy

X
gave

X
gave

Figure 2: Two parses using the naive CFG encod-
ing that both correspond to the dependency parse of
Figure 1.

The split-head CFG for a PBDG is given by the
following schemata:

S → X
u

where 0 u
X

u
→ L

u u
R where u ∈ Σ

L
u

→ ul
L

u
→ X

v
L

u
where v u

u
R → ur

u
R →

u
R X

v
where u v

The dependency parse shown in Figure 1 corre-
sponds to the split-head CFG parse shown in Fig-
ure 3. Each X

u
expands to two new categories, L

u

and
u
R. L

u
consists of ul and all of u’s left descen-

dants, while
u
R consists of ur and all of u’s right

descendants. The spurious ambiguity present in the
naive encoding does not arise in the split-head en-
coding because the left and right dependents of a
head are assembled independently and cannot inter-
mingle.

As can be seen by examining the split-head
schemata, the rightmost descendant of L

u
is either

L
u

or ul, which guarantees that the rightmost termi-
nal dominated by L

u
is always ul; similarly the left-

most terminal dominated by
u
R is always ur. Thus

170



dog
R

X
Sandy

L
Sandy

Sandy
l

X
dog

gave
r

gave
l

gave
R

gave
R

L
a

a
l

a
R

a
r

X
a

L
bone

bone
l

L
bone

bone
r

bone
R

X
bone

Sandy
R

Sandy
r

L
gave

L
gave

X
gave

S

gave
R

L
the

the
l

the
R

the
r

X
the

L
dog

dog
l

L
dog

dog
r

Figure 3: The split-head parse corresponding to the dependency graph depicted in Figure 1. Notice that ul
is always the rightmost descendant of L

u
and ur is always the leftmost descendant of uR, which means that

these indices are redundant given the constituent spans.

these subscript indices are redundant given the string
positions of the constituents, which means we do not
need to track the index u in L

u
and

u
R but can parse

with just the two categories L and R, and determine
the index from the constituent’s span when required.

It is straight-forward to extend the split-head CFG
to encode the additional state information required
by the head automata of Eisner and Satta (1999);
this corresponds to splitting the non-terminals L

u

and
u
R. For simplicity we work with PBDGs in this

paper, but all of the Unfold-Fold transformations de-
scribed below extend to split-head grammars with
the additional state structure required by head au-
tomata.

Implementation note: it is possible to directly
parse the “undoubled” input string w by modifying
both the CKY algorithm and the CFGs described
in this paper. Modify L

u
and

u
R so they both ul-

timately expand to the same terminal u, and special-
case the implementation of production X

u
→ L

u u
R

and all productions derived from it to permit L
u

and

u
R to overlap by the terminal u.

The split-head formulation explains what initially
seem unusual properties of existing PBDG algo-
rithms. For example, one of the standard “sanity
checks” for the Inside-Outside algorithm—that the
outside probability of each terminal is equal to the
sentence’s inside probability—fails for these algo-
rithms. In fact, the outside probability of each ter-
minal is double the sentence’s inside probability be-
cause these algorithms implicitly collapse the two
terminals ul and ur into a single terminal u.

5 A O(n3) split-head grammar

The split-head encoding described in the previous
section requires O(n4) parsing time because the in-
dex v on X

v
is not redundant. We can obtain an

equivalent grammar that only requires O(n3) pars-
ing time by transforming the split-head grammar us-
ing Unfold-Fold. We describe the transformation on
L

u
; the transformation of

u
R is symmetric.

We begin with the definition of L
u

in the split-
head grammar above (“|” separates the right-hand
sides of productions).

L
u

→ ul | Xv Lu where v u

Our first transformation step is to unfold X
v

in L
u
,

i.e., replace X
v

by its expansion, producing the fol-
lowing definition for L

u
(ignore the underlining for

now).

L
u

→ ul | Lv vR Lu where v u

This removes the offending X
v

in L
u
, but the result-

ing definition of L
u

contains ternary productions and
so still incurs O(n4) parse time. To address this we
define new nonterminals

x
M

y
for each x, y ∈ Σ:

x
M

y
→

x
R L

y

and fold the underlined children in L
u

into
v
M

u
:

x
M

y
→

x
R L

y
where x, y ∈ Σ

L
u

→ ul | Lv vMu where v u
171



S

dog
r

the
r

L
dogthe

R

the
M

dog

the
l

L
the

L
dog

dog
l

gave
r

gave
R

gave
M

dog

gave
l

dog
R

gave
R

a
l

a
r

a
R

bone
l

L
bone

a
M

bone
L

a

L
bone

gave
M

bone bone
R

bone
r

gave
RL

gave

L
gaveSandy

R

Sandy
M

gave
L

Sandy

Sandy
l

Sandy
r

Figure 4: The O(n3) split-head parse corresponding to the dependency graph of Figure 1.

The O(n3) split-head grammar is obtained by un-
folding the occurence of X

u
in the S production and

dropping the X
u

schema as X
u

no longer appears on
the right-hand side of any production. The resulting
O(n3) split-head grammar schemata are as follows:

S → L
u u

R where 0 u
L

u
→ ul

L
u

→ L
v v

M
u

where v u

u
R → ur

u
R →

u
M

v v
R where u v

x
M

y
→

x
R L

y
where x, y ∈ Σ

As before, the dependency annotations on the pro-
duction schemata permit us to map CFG parses to
the corresponding dependency parse. This grammar
requires O(n3) parsing time to parse because the in-
dices are redundant given the constituent’s string po-
sitions for the reasons described in section 4. Specif-
ically, the rightmost terminal of L

u
is always ul, the

leftmost terminal of
u
R is always ur and the left-

most and rightmost terminals of
v
M

u
are vl and ur

respectively.
The O(n3) split-head grammar is closely related

to the O(n3) PBDG parsing algorithm given by Eis-
ner and Satta (1999). Specifically, the steps involved
in parsing with this grammar using the CKY algo-
rithm are essentially the same as those performed
by the Eisner/Satta algorithm. The primary differ-
ence is that the Eisner/Satta algorithm involves two
separate categories that are collapsed into the single
category M here.

To confirm their relative performance we imple-
mented stochastic CKY parsers for the three CFG

schemata described so far. The production schemata
were hard-coded for speed, and the implementation
trick described in section 4 was used to avoid dou-
bling the terminal string. We obtained dependency
weights from our existing discriminatively-trained
PBDG parser (not cited to preserve anonymity). We
compared the parsers’ running times on section 24
of the Penn Treebank. Because all three CFGs im-
plement the same dependency grammar their Viterbi
parses have the same dependency accuracy, namely
0.8918. We precompute the dependency weights,
so the times include just the dynamic programming
computation on a 3.6GHz Pentium 4.

CFG schemata sentences parsed / second
Naive O(n5) CFG 45.4

O(n4) CFG 406.2
O(n3) CFG 3580.0

6 An O(n3) adjacent-head grammar

This section shows how to further transform the
O(n3) grammar described above into a form that
encodes second-order dependencies between ad-
jacent dependent heads in much the way that a
Markov PCFG does (McDonald, 2006; McDonald
and Pereira, 2006). We provide a derivation for the
L

u
constituents; there is a parallel derivation for

u
R.

We begin by unfolding X
v

in the definition of L
u

in the split-head grammar, producing as before:

L
u

→ ul | Lv vR Lu

Now introduce a new nonterminal
v
M

L

u
, which is a

specialized version of M requiring that v is a left-
dependent of u, and fold the underlined constituents

172



S

the
r

the
R

the
M

L

dog

the
l

L
the

L
dog dog

R

dog
l

dog
r

L
bone

L
a a

M
L

bone

a
R

a
r

a
l

bone
l

bone
r

gave
r

gave
M

R

dog dog
M

bone

gave
M

R

bone bone
R

gave
R

gave
l

Sandy
r

Sandy
R

Sandy
l

Sandy
M

L

gave
L

Sandy

L
gave

Figure 5: The O(n3) adjacent-head parse corresponding to the dependency graph of Figure 1. The boxed
local tree indicates bone is the dependent of give following the dependent dog, i.e., give dog bone .

into
v
M

L

u
.

v
M

L

u
→

v
R L

u
where v u

L
u

→ ul | Lv vM
L

u
where v u

Now unfold L
u

in the definition of
v
M

L

u
, producing:

v
M

L

u
→

v
R ul | vR Lv′ v′M

L

u
; v v′ u

Note that in the first production expanding
v
M

L

u
, v

is the closest left dependent of u, and in the second
production v and v′ are adjacent left-dependents of
u.

v
M

L

u
has a ternary production, so we introduce

x
M

y
as before to fold the underlined constituents

into.

x
M

y
→

x
R L

y
where x, y ∈ Σ

v
M

L

u
→

v
R ul | vMv′ v′M

L

u
; v v′ u

The resulting grammar schema is as below, and a
sample parse is given in Figure 5.

S → L
u u

R where 0 u
L

u
→ ul u has no left dependents

L
u

→ L
v v

M
L

u
v is u’s last left dep.

v
M

L

u
→

v
R ul v is u’s closest left dep.

v
M

L

u
→

v
M

v′ v′
M

L

u
v v′ u

u
R → ur u has no right dependents

u
R →

u
M

R

v v
R v is u’s last right dep.

u
M

R

v
→ ur Lv v is u’s closest right dep.

u
M

R

v
→

u
M

R

v′ v′
M

v
u v′ v

x
M

y
→

x
R L

y
where x, y ∈ Σ

As before, the indices on the nonterminals are re-
dundant, as the heads are always located at an edge

of each constituent, so they need not be computed
or stored and the CFG can be parsed in O(n3) time.
The steps involved in CKY parsing with this gram-
mar correspond closely to those of the McDonald
(2006) second-order PBDG parsing algorithm.

7 An O(n3) dependent-head grammar

This section shows a different application of Unfold-
Fold can capture head-to-head-to-head dependen-
cies, i.e., “vertical” second-order dependencies,
rather than the “horizontal” ones captured by the
transformation described in the previous section.
Because we expect these vertical dependencies to
be less important linguistically than the horizontal
ones, we only sketch the transformation here.

The derivation differs from the one in Section 6 in
that the dependent

v
R, rather than the head L

u
, is un-

folded in the initial definition of
v
M

L

u
. This results in

a grammar that tracks vertical, rather than horizon-
tal, second-order dependencies. Since left-hand and
right-hand derivations are assembled separately in a
split-head grammar, the grammar in fact only tracks
zig-zag type dependencies (e.g., where a grandpar-
ent has a right dependent, which in turn has a left
dependent).

The resulting grammar is given below, and a sam-
ple parse using this grammar is shown in Figure 6.
Because the subscripts are redundant they can be
omitted and the resulting CFG can be parsed in

173



gave
M

R

bone

gave
r

gave
R L

the

the
l

gave
M

the

the
r

dog
l

L
dog

the
M

L

dog

dog
r

dog
R

gave
R L

a

a
l

a
r

gave
M

a a
M

L

bone

L
bone

bone
l

bone
r

bone
R

gave
R

L
gave

gave
l

Sandy
r

Sandy
M

L

gave

Sandy
l

L
Sandy

gave
M

R

dog

S

L
gave

Figure 6: The n3 dependent-head parse corresponding to the dependency graph of Figure 1. The boxed
local tree indicates that a is a left-dependent of bone, which is in turn a right-dependent of gave, i.e.,
gave a bone .

O(n3) time using the CKY algorithm.

S → L
u u

R where 0 u
L

u
→ ul

L
u

→ L
v v

M
L

u
where v u

v
M

L

u
→ vr Lu where v u

v
M

L

u
→

v
M

R

w w
M

u
where v w u

u
R → ur

u
R →

u
M

R

v v
R where u v

u
M

R

v
→

u
R vl where u v

u
M

R

v
→

u
M

w w
M

L

v
where u w u

x
M

y
→

x
R L

y
where x, y ∈ Σ

8 Maximum posterior decoding

As noted in the introduction, one consequence of the
PBDG to CFG reductions presented in this paper is
that CFG parsing and estimation techniques are now
available for PBDGs as well. As an example ap-
plication, this section describes Maximum Posterior
Decoding (MPD) for PBDGs.

Goodman (1996) observed that the Viterbi parse
is in general not the optimal parse for evaluation
metrics such as f-score that are based on the number
of correct constituents in a parse. He showed that
MPD improves f-score modestly relative to Viterbi
decoding for PCFGs.

Since dependency parse accuracy is just the pro-
portion of dependencies in the parse that are correct,
Goodman’s observation should hold for PBDG pars-
ing as well. MPD for PBDGs selects the parse that
maximizes the sum of the marginal probabilities of

each of the dependencies in the parse. Such a de-
coder might plausibly produce parses that score bet-
ter on the dependency accuracy metric than Viterbi
parses.

MPD is straightforward given the PBDG to CFG
reductions described in this paper. Specifically, we
use the Inside-Outside algorithm to compute the
posterior probability of the CFG constituents corre-
sponding to each PBDG dependency, and then use
the Viterbi algorithm to find the parse tree that max-
imizes the sum of these posterior probabilities.

We implemented MPD for first-order PBDGs
using dependency weights from our existing
discriminatively-trained PBDG parser (not cited to
preserve anonymity). These weights are estimated
by an online procedure as in McDonald (2006), and
are not intended to define a probability distribution.
In an attempt to heuristically correct for this, in this
experiment we used exp(αwu,v) as the weight of the
dependency between head u and dependent v, where
wu,v is the weight provided by the discriminatively-
trained model and α is an adjustable scaling parame-
ter tuned to optimize MPD accuracy on development
data.

Unfortunately we found no significant differ-
ence between the accuracy of the MPD and Viterbi
parses. Optimizing MPD on the development data
(section 24 of the PTB) set the scale factor α =
0.21 and produced MPD parses with an accuracy
of 0.8921, which is approximately the same as the
Viterbi accuracy of 0.8918. On the blind test data
(section 23) the two accuracies are essentially iden-

174



tical (0.8997).
There are several possible explanations for the

failure of MPD to produce more accurate parses than
Viterbi decoding. Perhaps MPD requires weights
that define a probability distribution (e.g., a Max-
Ent model). It is also possible that discriminative
training adjusts the weights in a way that ensures
that the Viterbi parse is close to the maximum pos-
terior parse. This was the case in our experiment,
and if this is true with discriminative training in gen-
eral, then maximum posterior decoding will not have
much to offer to discriminative parsing.

9 Conclusion

This paper shows how to use the Unfold-Fold trans-
form to translate PBDGs into CFGs that can be
parsed in O(n3) time. A key component of this is
the split-head construction, where each word u in the
input is split into two terminals ul and ur of the CFG
parse. We also showed how to systematically trans-
form the split-head CFG into grammars which track
second-order dependencies. We provided one gram-
mar which captures horizontal second-order depen-
dencies (McDonald, 2006), and another which cap-
tures vertical second-order head-to-head-to-head de-
pendencies.

The grammars described here just scratch the sur-
face of what is possible with Unfold-Fold. Notice
that both of the second-order grammars have more
nonterminals than the first-order grammar. If one is
prepared to increase the number of nonterminals still
further, it may be possible to track additional infor-
mation about constituents (although if we insist on
O(n3) parse time we will be unable to track the in-
teraction of more than three heads at once).

References
R.M. Burstall and John Darlington. 1977. A transformation

system for developing recursive programs. Journal of the
Association for Computing Machinery, 24(1):44–67.

Zhiyi Chi. 1999. Statistical properties of probabilistic context-
free grammars. Computational Linguistics, 25(1):131–160.

Jason Eisner and Giorgio Satta. 1999. Efficient parsing for
bilexical context-free grammars and head automaton gram-
mars. In Proceedings of the 37th Annual Meeting of the
Association for Computational Linguistics, pages 457–480,
University of Maryland.

Jason Eisner. 1996. Three new probabilistic models for depen-
dency parsing: An exploration. In COLING96: Proceedings

of the 16th International Conference on Computational Lin-
guistics, pages 340–345, Copenhagen. Center for Sprogte-
knologi.

Jason Eisner. 2000. Bilexical grammars and their cubic-time
parsing algorithms. In Harry Bunt and Anton Nijholt, edi-
tors, Advances in Probabilistic and Other Parsing Technolo-
gies, pages 29–62. Kluwer Academic Publishers.

Joshua T. Goodman. 1996. Parsing algorithms and metrics. In
Proceedings of the 34th Annual Meeting of the Association
for Computational Linguistics, pages 177–183, Santa Cruz,
Ca.

K. Lari and S.J. Young. 1990. The estimation of Stochastic
Context-Free Grammars using the Inside-Outside algorithm.
Computer Speech and Language, 4(35-56).

Takuya Matsuzaki, Yusuke Miyao, and Jun’ichi Tsujii. 2005.
Probabilistic CFG with latent annotations. In Proceedings
of the 43rd Annual Meeting of the Association for Com-
putational Linguistics (ACL’05), pages 75–82, Ann Arbor,
Michigan, June. Association for Computational Linguistics.

David McAllester. 1999. A reformulation of Eisner and Sata’s
cubic time parser for split head automata grammars. Avail-
able from http://ttic.uchicago.edu/˜dmcallester/.

Ryan McDonald and Fernando Pereira. 2006. Online learn-
ing of approximate dependency parsing algorithms. In 11th
Conference of the European Chapter of the Association for
Computational Linguistics, pages 81–88, Trento, Italy.

Ryan McDonald. 2006. Discriminative Training and Spanning
Tree Algorithms for Dependency Parsing. Ph.D. thesis, Uni-
versity of Pennyslvania, Philadelphia, PA.

Fernando Pereira and Stuart M. Shieber. 1987. Prolog and Nat-
ural Language Analysis. Center for the Study of Language
and Information, Stanford, CA.

Slav Petrov, Leon Barrett, Romain Thibaux, and Dan Klein.
2006. Learning accurate, compact, and interpretable tree an-
notation. In Proceedings of the 21st International Confer-
ence on Computational Linguistics and 44th Annual Meet-
ing of the Association for Computational Linguistics, pages
433–440, Sydney, Australia, July. Association for Computa-
tional Linguistics.

A. Pettorossi and M. Proeitti. 1992. Transformation of logic
programs. In Handbook of Logic in Artificial Intelligence,
volume 5, pages 697–787. Oxford University Press.

Taisuke Sato. 1992. Equivalence-preserving first-order un-
fold/fold transformation systems. Theoretical Computer Sci-
ence, 105(1):57–84.

Daniel H. Younger. 1967. Recognition and parsing of
context-free languages in time n3. Information and Control,
10(2):189–208.

175


