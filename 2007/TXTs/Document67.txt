













































Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics


Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 264–271,
Prague, Czech Republic, June 2007. c©2007 Association for Computational Linguistics

Instance Weighting for Domain Adaptation in NLP

Jing Jiang and ChengXiang Zhai
Department of Computer Science

University of Illinois at Urbana-Champaign
Urbana, IL 61801, USA

{jiang4,czhai}@cs.uiuc.edu

Abstract

Domain adaptation is an important problem
in natural language processing (NLP) due to
the lack of labeled data in novel domains. In
this paper, we study the domain adaptation
problem from the instance weighting per-
spective. We formally analyze and charac-
terize the domain adaptation problem from
a distributional view, and show that there
are two distinct needs for adaptation, cor-
responding to the different distributions of
instances and classification functions in the
source and the target domains. We then
propose a general instance weighting frame-
work for domain adaptation. Our empir-
ical results on three NLP tasks show that
incorporating and exploiting more informa-
tion from the target domain through instance
weighting is effective.

1 Introduction

Many natural language processing (NLP) problems
such as part-of-speech (POS) tagging, named entity
(NE) recognition, relation extraction, and seman-
tic role labeling, are currently solved by supervised
learning from manually labeled data. A bottleneck
problem with this supervised learning approach is
the lack of annotated data. As a special case, we
often face the situation where we have a sufficient
amount of labeled data in one domain, but have little
or no labeled data in another related domain which
we are interested in. We thus face the domain adap-
tation problem. Following (Blitzer et al., 2006), we

call the first the source domain, and the second the
target domain.

The domain adaptation problem is commonly en-
countered in NLP. For example, in POS tagging, the
source domain may be tagged WSJ articles, and the
target domain may be scientific literature that con-
tains scientific terminology. In NE recognition, the
source domain may be annotated news articles, and
the target domain may be personal blogs. Another
example is personalized spam filtering, where we
may have many labeled spam and ham emails from
publicly available sources, but we need to adapt the
learned spam filter to an individual user’s inbox be-
cause the user has her own, and presumably very dif-
ferent, distribution of emails and notion of spams.

Despite the importance of domain adaptation in
NLP, currently there are no standard methods for
solving this problem. An immediate possible solu-
tion is semi-supervised learning, where we simply
treat the target instances as unlabeled data but do
not distinguish the two domains. However, given
that the source data and the target data are from dif-
ferent distributions, we should expect to do better
by exploiting the domain difference. Recently there
have been some studies addressing domain adapta-
tion from different perspectives (Roark and Bacchi-
ani, 2003; Chelba and Acero, 2004; Florian et al.,
2004; Daumé III and Marcu, 2006; Blitzer et al.,
2006). However, there have not been many studies
that focus on the difference between the instance dis-
tributions in the two domains. A detailed discussion
on related work is given in Section 5.

In this paper, we study the domain adaptation
problem from the instance weighting perspective.

264



In general, the domain adaptation problem arises
when the source instances and the target instances
are from two different, but related distributions.
We formally analyze and characterize the domain
adaptation problem from this distributional view.
Such an analysis reveals that there are two distinct
needs for adaptation, corresponding to the differ-
ent distributions of instances and the different clas-
sification functions in the source and the target do-
mains. Based on this analysis, we propose a gen-
eral instance weighting method for domain adapta-
tion, which can be regarded as a generalization of
an existing approach to semi-supervised learning.
The proposed method implements several adapta-
tion heuristics with a unified objective function: (1)
removing misleading training instances in the source
domain; (2) assigning more weights to labeled tar-
get instances than labeled source instances; (3) aug-
menting training instances with target instances with
predicted labels. We evaluated the proposed method
with three adaptation problems in NLP, including
POS tagging, NE type classification, and spam filter-
ing. The results show that regular semi-supervised
and supervised learning methods do not perform as
well as our new method, which explicitly captures
domain difference. Our results also show that in-
corporating and exploiting more information from
the target domain is much more useful for improv-
ing performance than excluding misleading training
examples from the source domain.

The rest of the paper is organized as follows. In
Section 2, we formally analyze the domain adapta-
tion problem and distinguish two types of adapta-
tion. In Section 3, we then propose a general in-
stance weighting framework for domain adaptation.
In Section 4, we present the experiment results. Fi-
nally, we compare our framework with related work
in Section 5 before we conclude in Section 6.

2 Domain Adaptation

In this section, we define and analyze domain adap-
tation from a theoretical point of view. We show that
the need for domain adaptation arises from two fac-
tors, and the solutions are different for each factor.
We restrict our attention to those NLP tasks that can
be cast into multiclass classification problems, and
we only consider discriminative models for classifi-

cation. Since both are common practice in NLP, our
analysis is applicable to many NLP tasks.

Let X be a feature space we choose to represent
the observed instances, and let Y be the set of class
labels. In the standard supervised learning setting,
we are given a set of labeled instances {(xi, yi)}Ni=1,
where xi ∈ X , yi ∈ Y , and (xi, yi) are drawn from
an unknown joint distribution p(x, y). Our goal is to
recover this unknown distribution so that we can pre-
dict unlabeled instances drawn from the same distri-
bution. In discriminative models, we are only con-
cerned with p(y|x). Following the maximum likeli-
hood estimation framework, we start with a parame-
terized model family p(y|x; θ), and then find the best
model parameter θ∗ that maximizes the expected log
likelihood of the data:

θ
∗

= arg max
θ

∫

X

∑
y∈Y

p(x, y) log p(y|x; θ)dx.

Since we do not know the distribution p(x, y), we
maximize the empirical log likelihood instead:

θ
∗ ≈ arg max

θ

∫

X

∑
y∈Y

p̃(x, y) log p(y|x; θ)dx

= arg max
θ

1

N

N∑
i=1

log p(yi|xi; θ).

Note that since we use the empirical distribution
p̃(x, y) to approximate p(x, y), the estimated θ∗ is
dependent on p̃(x, y). In general, as long as we have
sufficient labeled data, this approximation is fine be-
cause the unlabeled instances we want to classify are
from the same p(x, y).

2.1 Two Factors for Domain Adaptation
Let us now turn to the case of domain adaptation
where the unlabeled instances we want to classify
are from a different distribution than the labeled in-
stances. Let ps(x, y) and pt(x, y) be the true un-
derlying distributions for the source and the target
domains, respectively. Our general idea is to use
ps(x, y) to approximate pt(x, y) so that we can ex-
ploit the labeled examples in the source domain.

If we factor p(x, y) into p(x, y) = p(y|x)p(x),
we can see that pt(x, y) can deviate from ps(x, y) in
two different ways, corresponding to two different
kinds of domain adaptation:

265



Case 1 (Labeling Adaptation): pt(y|x) deviates
from ps(y|x) to a certain extent. In this case, it is
clear that our estimation of ps(y|x) from the labeled
source domain instances will not be a good estima-
tion of pt(y|x), and therefore domain adaptation is
needed. We refer to this kind of adaptation as func-
tion/labeling adaptation.
Case 2 (Instance Adaptation): pt(y|x) is mostly
similar to ps(y|x), but pt(x) deviates from ps(x). In
this case, it may appear that our estimated ps(y|x)
can still be used in the target domain. However, as
we have pointed out, the estimation of ps(y|x) de-
pends on the empirical distribution p̃s(x, y), which
deviates from pt(x, y) due to the deviation of ps(x)
from pt(x). In general, the estimation of ps(y|x)
would be more influenced by the instances with high
p̃s(x, y) (i.e., high p̃s(x)). If pt(x) is very differ-
ent from ps(x), then we should expect pt(x, y) to be
very different from ps(x, y), and therefore different
from p̃s(x, y). We thus cannot expect the estimated
ps(y|x) to work well on the regions where pt(x, y)
is high, but ps(x, y) is low. Therefore, in this case,
we still need domain adaptation, which we refer to
as instance adaptation.

Because the need for domain adaptation arises
from two different factors, we need different solu-
tions for each factor.

2.2 Solutions for Labeling Adaptation

If pt(y|x) deviates from ps(y|x) to some extent, we
have one of the following choices:

Change of representation:
It may be the case that if we change the rep-

resentation of the instances, i.e., if we choose a
feature space X ′ different from X , we can bridge
the gap between the two distributions ps(y|x) and
pt(y|x). For example, consider domain adaptive
NE recognition where the source domain contains
clean newswire data, while the target domain con-
tains broadcast news data that has been transcribed
by automatic speech recognition and lacks capital-
ization. Suppose we use a naive NE tagger that
only looks at the word itself. If we consider capi-
talization, then the instance Bush is represented dif-
ferently from the instance bush. In the source do-
main, ps(y = Person|x = Bush) is high while
ps(y = Person|x = bush) is low, but in the target

domain, pt(y = Person|x = bush) is high. If we
ignore the capitalization information, then in both
domains p(y = Person|x = bush) will be high pro-
vided that the source domain contains much fewer
instances of bush than Bush.

Adaptation through prior:
When we use a parameterized model p(y|x; θ)

to approximate p(y|x) and estimate θ based on the
source domain data, we can place some prior on the
model parameter θ so that the estimated distribution
p(y|x; θ̂) will be closer to pt(y|x). Consider again
the NE tagging example. If we use capitalization as
a feature, in the source domain where capitalization
information is available, this feature will be given a
large weight in the learned model because it is very
useful. If we place a prior on the weight for this fea-
ture so that a large weight will be penalized, then
we can prevent the learned model from relying too
much on this domain specific feature.

Instance pruning:
If we know the instances x for which pt(y|x) is

different from ps(y|x), we can actively remove these
instances from the training data because they are
“misleading”.

For all the three solutions given above, we need
either some prior knowledge about the target do-
main, or some labeled target domain instances;
from only the unlabeled target domain instances, we
would not know where and why pt(y|x) differs from
ps(y|x).

2.3 Solutions for Instance Adaptation

In the case where pt(y|x) is similar to ps(y|x), but
pt(x) deviates from ps(x), we may use the (unla-
beled) target domain instances to bias the estimate
of ps(x) toward a better approximation of pt(x), and
thus achieve domain adaptation. We explain the idea
below.

Our goal is to obtain a good estimate of θ∗t that is
optimized according to the target domain distribu-
tion pt(x, y). The exact objective function is thus

θ
∗
t = arg max

θ

∫

X

∑
y∈Y

pt(x, y) log p(y|x; θ)dx

= arg max
θ

∫

X
pt(x)

∑
y∈Y

pt(y|x) log p(y|x; θ)dx.

266



Our idea of domain adaptation is to exploit the la-
beled instances in the source domain to help obtain
θ∗t .

Let Ds = {(xsi , ysi )}Nsi=1 denote the set of la-
beled instances we have from the source domain.
Assume that we have a (small) set of labeled and
a (large) set of unlabeled instances from the tar-
get domain, denoted by Dt,l = {(xt,lj , y

t,l
j )}

Nt,l
j=1 and

Dt,u = {xt,uk }
Nt,u
k=1 , respectively. We now show three

ways to approximate the objective function above,
corresponding to using three different sets of in-
stances to approximate the instance space X .
Using Ds:

Using ps(y|x) to approximate pt(y|x), we obtain

θ
∗
t ≈ arg max

θ

∫

X

pt(x)

ps(x)
ps(x)

∑
y∈Y

ps(y|x) log p(y|x; θ)dx

≈ arg max
θ

∫

X

pt(x)

ps(x)
p̃s(x)

∑
y∈Y

p̃s(y|x) log p(y|x; θ)dx

= arg max
θ

1

Ns

Ns∑
i=1

pt(x
s
i )

ps(x
s
i )

log p(y
s
i |xsi ; θ).

Here we use only the labeled instances in Ds but
we adjust the weight of each instance by pt(x)

ps(x)
. The

major difficulty is how to accurately estimate pt(x)
ps(x)

.

Using Dt,l:

θ
∗
t ≈ arg max

θ

∫

X
p̃t,l(x)

∑
y∈Y

p̃t,l(y|x) log p(y|x; θ)dx

= arg max
θ

1

Nt,l

Nt,l∑
j=1

log p(y
t,l
j |xt,lj ; θ)

Note that this is the standard supervised learning
method using only the small amount of labeled tar-
get instances. The major weakness of this approxi-
mation is that when Nt,l is very small, the estimation
is not accurate.

Using Dt,u:

θ
∗
t ≈ arg max

θ

∫

X
p̃t,u(x)

∑
y∈Y

pt(y|x) log p(y|x; θ)dx

= arg max
θ

1

Nt,u

Nt,u∑

k=1

∑
y∈Y

pt(y|xt,uk ) log p(y|xt,uk ; θ),

The challenge here is that pt(y|xt,uk ; θ) is unknown
to us, thus we need to estimate it. One possibility
is to approximate it with a model θ̂ learned from
Ds and Dt,l. For example, we can set pt(y|x, θ) =
p(y|x; θ̂). Alternatively, we can also set pt(y|x, θ)
to 1 if y = arg maxy′ p(y

′|x; θ̂) and 0 otherwise.

3 A Framework of Instance Weighting for
Domain Adaptation

The theoretical analysis we give in Section 2 sug-
gests that one way to solve the domain adaptation
problem is through instance weighting. We propose
a framework that incorporates instance pruning in
Section 2.2 and the three approximations in Sec-
tion 2.3. Before we show the formal framework, we
first introduce some weighting parameters and ex-
plain the intuitions behind these parameters.

First, for each (xsi , y
s
i ) ∈ Ds, we introduce a pa-

rameter αi to indicate how likely pt(ysi |xsi ) is close
to ps(ysi |xsi ). Large αi means the two probabilities
are close, and therefore we can trust the labeled in-
stance (xsi , y

s
i ) for the purpose of learning a clas-

sifier for the target domain. Small αi means these
two probabilities are very different, and therefore we
should probably discard the instance (xsi , y

s
i ) in the

learning process.
Second, again for each (xsi , y

s
i ) ∈ Ds, we intro-

duce another parameter βi that ideally is equal to
pt(x

s
i )

ps(x
s
i )

. From the approximation in Section 2.3 that
uses only Ds, it is clear that such a parameter is use-
ful.

Next, for each xt,ui ∈ Dt,u, and for each possible
label y ∈ Y , we introduce a parameter γi(y) that
indicates how likely we would like to assign y as a
tentative label to xt,ui and include (x

t,u
i , y) as a train-

ing example.
Finally, we introduce three global parameters λs,

λt,l and λt,u that are not instance-specific but are as-
sociated with Ds, Dt,l and Dt,u, respectively. These
three parameters allow us to control the contribution
of each of the three approximation methods in Sec-
tion 2.3 when we linearly combine them together.

We now formally define our instance weighting
framework. Given Ds, Dt,l and Dt,u, to learn a clas-
sifier for the target domain, we find a parameter θ̂
that optimizes the following objective function:

267



θ̂ = arg max
θ

[
λs · 1

Cs

Ns∑
i=1

αiβi log p(y
s
i |xsi ; θ)

+λt,l ·
1

Ct,l

Nt,l∑
j=1

log p(y
t,l
j |xt,lj ; θ)

+λt,u · 1
Ct,u

Nt,u∑

k=1

∑
y∈Y

γk(y) log p(y|xt,uk ; θ)

+ log p(θ)

]
,

where Cs =
∑Ns

i=1 αiβi, Ct,l = Nt,l, Ct,u =∑Nt,u
k=1

∑
y∈Y γk(y), and λs + λt,l + λt,u = 1. The

last term, log p(θ), is the log of a Gaussian prior dis-
tribution of θ, commonly used to regularize the com-
plexity of the model.

In general, we do not know the optimal values of
these parameters for the target domain. Neverthe-
less, the intuitions behind these parameters serve as
guidelines for us to design heuristics to set these pa-
rameters. In the rest of this section, we introduce
several heuristics that we used in our experiments to
set these parameters.

3.1 Setting α

Following the intuition that if pt(y|x) differs much
from ps(y|x), then (x, y) should be discarded from
the training set, we use the following heuristic to
set αs. First, with standard supervised learning, we
train a model θ̂t,l from Dt,l. We consider p(y|x; θ̂t,l)
to be a crude approximation of pt(y|x). Then, we
classify {xsi}Nsi=1 using θ̂t,l. The top k instances
that are incorrectly predicted by θ̂t,l (ranked by their
prediction confidence) are discarded. In another
word, αsi of the top k instances for which y

s
i 6=

arg maxy p(y|xsi ; θ̂t,l) are set to 0, and αi of all the
other source instances are set to 1.

3.2 Setting β

Accurately setting β involves accurately estimating
ps(x) and pt(x) from the empirical distributions.
For many NLP classification tasks, we do not have a
good parametric model for p(x). We thus need to re-
sort to non-parametric density estimation methods.
However, for many NLP tasks, x resides in a high
dimensional space, which makes it hard to apply
standard non-parametric density estimation meth-

ods. We have not explored this direction, and in our
experiments, we set β to 1 for all source instances.

3.3 Setting γ

Setting γ is closely related to some semi-supervised
learning methods. One option is to set γk(y) =
p(y|xt,uk ; θ). In this case, γ is no longer a constant
but is a function of θ. This way of setting γ corre-
sponds to the entropy minimization semi-supervised
learning method (Grandvalet and Bengio, 2005).
Another way to set γ corresponds to bootstrapping
semi-supervised learning. First, let θ̂(n) be a model
learned from the previous round of training. We then
select the top k instances from Dt,u that have the
highest prediction confidence. For these instances,
we set γk(y) = 1 for y = arg maxy′ p(y

′|xt,uk ; θ̂(n)),
and γk(y) = 0 for all other y. In another word, we
select the top k confidently predicted instances, and
include these instances together with their predicted
labels in the training set. All other instances in Dt,u
are not considered. In our experiments, we only con-
sidered this bootstrapping way of setting γ.

3.4 Setting λ

λs, λt,l and λt,u control the balance among the three
sets of instances. Using standard supervised learn-
ing, λs and λt,l are set proportionally to Cs and Ct,l,
that is, each instance is weighted the same whether
it is in Ds or in Dt,l, and λt,u is set to 0. Similarly,
using standard bootstrapping, λt,u is set proportion-
ally to Ct,u, that is, each target instance added to the
training set is also weighted the same as a source
instance. In neither case are the target instances em-
phasize more than source instances. However, for
domain adaptation, we want to focus more on the
target domain instances. So intuitively, we want to
make λt,l and λt,u somehow larger relative to λs. As
we will show in Section 4, this is indeed beneficial.

In general, the framework provides great flexibil-
ity for implementing different adaptation strategies
through these instance weighting parameters.

4 Experiments

4.1 Tasks and Data Sets

We chose three different NLP tasks to evaluate our
instance weighting method for domain adaptation.
The first task is POS tagging, for which we used

268



6166 WSJ sentences from Sections 00 and 01 of
Penn Treebank as the source domain data, and 2730
PubMed sentences from the Oncology section of the
PennBioIE corpus as the target domain data. The
second task is entity type classification. The setup is
very similar to Daumé III and Marcu (2006). We
assume that the entity boundaries have been cor-
rectly identified, and we want to classify the types
of the entities. We used ACE 2005 training data
for this task. For the source domain, we used the
newswire collection, which contains 11256 exam-
ples, and for the target domains, we used the we-
blog (WL) collection (5164 examples) and the con-
versational telephone speech (CTS) collection (4868
examples). The third task is personalized spam fil-
tering. We used the ECML/PKDD 2006 discov-
ery challenge data set. The source domain contains
4000 spam and ham emails from publicly available
sources, and the target domains are three individual
users’ inboxes, each containing 2500 emails.

For each task, we consider two experiment set-
tings. In the first setting, we assume there are a small
number of labeled target instances available. For
POS tagging, we used an additional 300 Oncology
sentences as labeled target instances. For NE typ-
ing, we used 500 labeled target instances and 2000
unlabeled target instances for each target domain.
For spam filtering, we used 200 labeled target in-
stances and 1800 unlabeled target instances. In the
second setting, we assume there is no labeled target
instance. We thus used all available target instances
for testing in all three tasks.

We used logistic regression as our model of
p(y|x; θ) because it is a robust learning algorithm
and widely used.

We now describe three sets of experiments, cor-
responding to three heuristic ways of setting α, λt,l
and λt,u.

4.2 Removing “Misleading” Source Domain
Instances

In the first set of experiments, we gradually remove
“misleading” labeled instances from the source do-
main, using the small number of labeled target in-
stances we have. We follow the heuristic we de-
scribed in Section 3.1, which sets the α for the top
k misclassified source instances to 0, and the α for
all the other source instances to 1. We also set λt,l

and λt,l to 0 in order to focus only on the effect of
removing “misleading” instances. We compare with
a baseline method which uses all source instances
with equal weight but no target instances. The re-
sults are shown in Table 1.

From the table, we can see that in most exper-
iments, removing these predicted “misleading” ex-
amples improved the performance over the baseline.
In some experiments (Oncology, CTS, u00, u01), the
largest improvement was achieved when all misclas-
sified source instances were removed. In the case of
weblog NE type classification, however, removing
the source instances hurt the performance. A pos-
sible reason for this is that the set of labeled target
instances we use is a biased sample from the target
domain, and therefore the model trained on these in-
stances is not always a good predictor of “mislead-
ing” source instances.

4.3 Adding Labeled Target Domain Instances
with Higher Weights

The second set of experiments is to add the labeled
target domain instances into the training set. This
corresponds to setting λt,l to some non-zero value,
but still keeping λt,u as 0. If we ignore the do-
main difference, then each labeled target instance
is weighted the same as a labeled source instance
(
λu,l
λs

= Cu,l
Cs

), which is what happens in regular su-
pervised learning. However, based on our theoret-
ical analysis, we can expect the labeled target in-
stances to be more representative of the target do-
main than the source instances. We can therefore
assign higher weights for the target instances, by ad-
justing the ratio between λt,l and λs. In our experi-
ments, we set

λt,l
λs

= aCt,l
Cs

, where a ranges from 2 to
20. The results are shown in Table 2.

As shown from the table, adding some labeled tar-
get instances can greatly improve the performance
for all tasks. And in almost all cases, weighting the
target instances more than the source instances per-
formed better than weighting them equally.

We also tested another setting where we first
removed the “misleading” source examples as we
showed in Section 4.2, and then added the labeled
target instances. The results are shown in the last
row of Table 2. However, although both removing
“misleading” source instances and adding labeled

269



POS NE Type Spam
k Oncology k CTS k WL k u00 u01 u02
0 0.8630 0 0.7815 0 0.7045 0 0.6306 0.6950 0.7644

4000 0.8675 800 0.8245 600 0.7070 150 0.6417 0.7078 0.7950
8000 0.8709 1600 0.8640 1200 0.6975 300 0.6611 0.7228 0.8222
12000 0.8713 2400 0.8825 1800 0.6830 450 0.7106 0.7806 0.8239
16000 0.8714 3000 0.8825 2400 0.6795 600 0.7911 0.8322 0.8328

all 0.8720 all 0.8830 all 0.6600 all 0.8106 0.8517 0.8067

Table 1: Accuracy on the target domain after removing “misleading” source domain instances.

POS NE Type Spam
method Oncology method CTS WL method u00 u01 u02
Ds only 0.8630 Ds only 0.7815 0.7045 Ds only 0.6306 0.6950 0.7644
Ds + Dt,l 0.9349 Ds + Dt,l 0.9340 0.7735 Ds + Dt,l 0.9572 0.9572 0.9461
Ds + 5Dt,l 0.9411 Ds + 2Dt,l 0.9355 0.7810 Ds + 2Dt,l 0.9606 0.9600 0.9533
Ds + 10Dt,l 0.9429 Ds + 5Dt,l 0.9360 0.7820 Ds + 5Dt,l 0.9628 09611 0.9601
Ds + 20Dt,l 0.9443 Ds + 10Dt,l 0.9355 0.7840 Ds + 10Dt,l 0.9639 0.9628 0.9633
D′s + 20Dt,l 0.9422 D′s + 10Dt,l 0.8950 0.6670 D′s + 10Dt,l 0.9717 0.9478 0.9494

Table 2: Accuracy on the unlabeled target instances after adding the labeled target instances.

target instances work well individually, when com-
bined, the performance in most cases is not as good
as when no source instances are removed. We hy-
pothesize that this is because after we added some
labeled target instances with large weights, we al-
ready gained a good balance between the source data
and the target data. Further removing source in-
stances would push the emphasis more on the set
of labeled target instances, which is only a biased
sample of the whole target domain.

The POS data set and the CTS data set have pre-
viously been used for testing other adaptation meth-
ods (Daumé III and Marcu, 2006; Blitzer et al.,
2006), though the setup there is different from ours.
Our performance using instance weighting is com-
parable to their best performance (slightly worse for
POS and better for CTS).

4.4 Bootstrapping with Higher Weights

In the third set of experiments, we assume that we
do not have any labeled target instances. We tried
two bootstrapping methods. The first is a standard
bootstrapping method, in which we gradually added
the most confidently predicted unlabeled target in-
stances with their predicted labels to the training
set. Since we believe that the target instances should
in general be given more weight because they bet-
ter represent the target domain than the source in-
stances, in the second method, we gave the added
target instances more weight in the objective func-

tion. In particular, we set λt,u = λs such that the
total contribution of the added target instances is
equal to that of all the labeled source instances. We
call this second method the balanced bootstrapping
method. Table 3 shows the results.

As we can see, while bootstrapping can generally
improve the performance over the baseline where
no unlabeled data is used, the balanced bootstrap-
ping method performed slightly better than the stan-
dard bootstrapping method. This again shows that
weighting the target instances more is a right direc-
tion to go for domain adaptation.

5 Related Work

There have been several studies in NLP that address
domain adaptation, and most of them need labeled
data from both the source domain and the target do-
main. Here we highlight a few representative ones.

For generative syntactic parsing, Roark and Bac-
chiani (2003) have used the source domain data
to construct a Dirichlet prior for MAP estimation
of the PCFG for the target domain. Chelba and
Acero (2004) use the parameters of the maximum
entropy model learned from the source domain as
the means of a Gaussian prior when training a new
model on the target data. Florian et al. (2004) first
train a NE tagger on the source domain, and then use
the tagger’s predictions as features for training and
testing on the target domain.

The only work we are aware of that directly mod-
270



POS NE Type Spam
method Oncology CTS WL u00 u01 u02

supervised 0.8630 0.7781 0.7351 0.6476 0.6976 0.8068
standard bootstrap 0.8728 0.8917 0.7498 0.8720 0.9212 0.9760
balanced bootstrap 0.8750 0.8923 0.7523 0.8816 0.9256 0.9772

Table 3: Accuracy on the target domain without using labeled target instances. In balanced bootstrapping,
more weights are put on the target instances in the objective function than in standard bootstrapping.

els the different distributions in the source and the
target domains is by Daumé III and Marcu (2006).
They assume a “truly source domain” distribution,
a “truly target domain” distribution, and a “general
domain” distribution. The source (target) domain
data is generated from a mixture of the “truly source
(target) domain” distribution and the “general do-
main” distribution. In contrast, we do not assume
such a mixture model.

None of the above methods would work if there
were no labeled target instances. Indeed, all the
above methods do not make use of the unlabeled
instances in the target domain. In contrast, our in-
stance weighting framework allows unlabeled target
instances to contribute to the model estimation.

Blitzer et al. (2006) propose a domain adaptation
method that uses the unlabeled target instances to
infer a good feature representation, which can be re-
garded as weighting the features. In contrast, we
weight the instances. The idea of using pt(x)

ps(x)
to

weight instances has been studied in statistics (Shi-
modaira, 2000), but has not been applied to NLP
tasks.

6 Conclusions and Future Work

Domain adaptation is a very important problem with
applications to many NLP tasks. In this paper,
we formally analyze the domain adaptation problem
and propose a general instance weighting framework
for domain adaptation. The framework is flexible to
support many different strategies for adaptation. In
particular, it can support adaptation with some target
domain labeled instances as well as that without any
labeled target instances. Experiment results on three
NLP tasks show that while regular semi-supervised
learning methods and supervised learning methods
can be applied to domain adaptation without con-
sidering domain difference, they do not perform as
well as our new method, which explicitly captures

domain difference. Our results also show that incor-
porating and exploiting more information from the
target domain is much more useful than excluding
misleading training examples from the source do-
main. The framework opens up many interesting
future research directions, especially those related to
how to more accurately set/estimate those weighting
parameters.

Acknowledgments

This work was in part supported by the National Sci-
ence Foundation under award numbers 0425852 and
0428472. We thank the anonymous reviewers for
their valuable comments.

References
John Blitzer, Ryan McDonald, and Fernando Pereira.

2006. Domain adaptation with structural correspon-
dence learning. In Proc. of EMNLP, pages 120–128.

Ciprian Chelba and Alex Acero. 2004. Adaptation of
maximum entropy capitalizer: Little data can help a
lot. In Proc. of EMNLP, pages 285–292.

Hal Daumé III and Daniel Marcu. 2006. Domain adapta-
tion for statistical classifiers. J. Artificial Intelligence
Res., 26:101–126.

R. Florian, H. Hassan, A. Ittycheriah, H. Jing, N. Kamb-
hatla, X. Luo, N. Nicolov, and S. Roukos. 2004. A
statistical model for multilingual entity detection and
tracking. In Proc. of HLT-NAACL, pages 1–8.

Y. Grandvalet and Y. Bengio. 2005. Semi-supervised
learning by entropy minimization. In NIPS.

Brian Roark and Michiel Bacchiani. 2003. Supervised
and unsupervised PCFG adaptatin to novel domains.
In Proc. of HLT-NAACL, pages 126–133.

Hidetoshi Shimodaira. 2000. Improving predictive in-
ference under covariate shift by weighting the log-
likelihood function. Journal of Statistical Planning
and Inference, 90:227–244.

271


