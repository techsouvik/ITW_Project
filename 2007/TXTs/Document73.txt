













































Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics


Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 312–319,
Prague, Czech Republic, June 2007. c©2007 Association for Computational Linguistics

Improved Word-Level System Combination for Machine Translation

Antti-Veikko I. Rosti and Spyros Matsoukas and Richard Schwartz
BBN Technologies, 10 Moulton Street

Cambridge, MA 02138�
arosti,smatsouk,schwartz � @bbn.com

Abstract

Recently, confusion network decoding has
been applied in machine translation system
combination. Due to errors in the hypoth-
esis alignment, decoding may result in un-
grammatical combination outputs. This pa-
per describes an improved confusion net-
work based method to combine outputs from
multiple MT systems. In this approach, ar-
bitrary features may be added log-linearly
into the objective function, thus allowing
language model expansion and re-scoring.
Also, a novel method to automatically se-
lect the hypothesis which other hypotheses
are aligned against is proposed. A generic
weight tuning algorithm may be used to op-
timize various automatic evaluation metrics
including TER, BLEU and METEOR. The
experiments using the 2005 Arabic to En-
glish and Chinese to English NIST MT eval-
uation tasks show significant improvements
in BLEU scores compared to earlier confu-
sion network decoding based methods.

1 Introduction

System combination has been shown to improve
classification performance in various tasks. There
are several approaches for combining classifiers. In
ensemble learning, a collection of simple classifiers
is used to yield better performance than any single
classifier; for example boosting (Schapire, 1990).
Another approach is to combine outputs from a few
highly specialized classifiers. The classifiers may

be based on the same basic modeling techniques
but differ by, for example, alternative feature repre-
sentations. Combination of speech recognition out-
puts is an example of this approach (Fiscus, 1997).
In speech recognition, confusion network decoding
(Mangu et al., 2000) has become widely used in sys-
tem combination.

Unlike speech recognition, current statistical ma-
chine translation (MT) systems are based on various
different paradigms; for example phrasal, hierarchi-
cal and syntax-based systems. The idea of combin-
ing outputs from different MT systems to produce
consensus translations in the hope of generating bet-
ter translations has been around for a while (Fred-
erking and Nirenburg, 1994). Recently, confusion
network decoding for MT system combination has
been proposed (Bangalore et al., 2001). To generate
confusion networks, hypotheses have to be aligned
against each other. In (Bangalore et al., 2001), Lev-
enshtein alignment was used to generate the net-
work. As opposed to speech recognition, the word
order between two correct MT outputs may be dif-
ferent and the Levenshtein alignment may not be
able to align shifted words in the hypotheses. In
(Matusov et al., 2006), different word orderings are
taken into account by training alignment models by
considering all hypothesis pairs as a parallel corpus
using GIZA++ (Och and Ney, 2003). The size of
the test set may influence the quality of these align-
ments. Thus, system outputs from development sets
may have to be added to improve the GIZA++ align-
ments. A modified Levenshtein alignment allowing
shifts as in computation of the translation edit rate
(TER) (Snover et al., 2006) was used to align hy-

312



potheses in (Sim et al., 2007). The alignments from
TER are consistent as they do not depend on the test
set size. Also, a more heuristic alignment method
has been proposed in a different system combina-
tion approach (Jayaraman and Lavie, 2005). A full
comparison of different alignment methods would
be difficult as many approaches require a significant
amount of engineering.

Confusion networks are generated by choosing
one hypothesis as the “skeleton”, and other hypothe-
ses are aligned against it. The skeleton defines the
word order of the combination output. Minimum
Bayes risk (MBR) was used to choose the skeleton
in (Sim et al., 2007). The average TER score was
computed between each system’s � -best hypothesis
and all other hypotheses. The MBR hypothesis is
the one with the minimum average TER and thus,
may be viewed as the closest to all other hypothe-
ses in terms of TER. This work was extended in
(Rosti et al., 2007) by introducing system weights
for word confidences. However, the system weights
did not influence the skeleton selection, so a hypoth-
esis from a system with zero weight might have been
chosen as the skeleton. In this work, confusion net-
works are generated by using the � -best output from
each system as the skeleton, and prior probabili-
ties for each network are estimated from the average
TER scores between the skeleton and other hypothe-
ses. All resulting confusion networks are connected
in parallel into a joint lattice where the prior proba-
bilities are also multiplied by the system weights.

The combination outputs from confusion network
decoding may be ungrammatical due to alignment
errors. Also the word-level decoding may break
coherent phrases produced by the individual sys-
tems. In this work, log-posterior probabilities are
estimated for each confusion network arc instead of
using votes or simple word confidences. This allows
a log-linear addition of arbitrary features such as
language model (LM) scores. The LM scores should
increase the total log-posterior of more grammatical
hypotheses. Powell’s method (Brent, 1973) is used
to tune the system and feature weights simultane-
ously so as to optimize various automatic evaluation
metrics on a development set. Tuning is fully auto-
matic, as opposed to (Matusov et al., 2006) where
global system weights were set manually.

This paper is organized as follows. Three evalu-

ation metrics used in weights tuning and reporting
the test set results are reviewed in Section 2. Sec-
tion 3 describes confusion network decoding for MT
system combination. The extensions to add features
log-linearly and improve the skeleton selection are
presented in Sections 4 and 5, respectively. Section
6 details the weights optimization algorithm and the
experimental results are reported in Section 7. Con-
clusions and future work are discussed in Section 8.

2 Evaluation Metrics

Currently, the most widely used automatic MT eval-
uation metric is the NIST BLEU-4 (Papineni et al.,
2002). It is computed as the geometric mean of � -
gram precisions up to � -grams between the hypoth-
esis � and reference ��� as follows

���
	��� ����������� (1)
������� ��

��
 "!$#&%('*),+   �����-���/.10  �����-���

where 0  �������2�43 � is the brevity penalty and
+   �����-��� are the � -gram precisions. When mul-tiple references are provided, the � -gram counts
against all references are accumulated to compute
the precisions. Similarly, full test set scores are ob-
tained by accumulating counts over all hypothesis
and reference pairs. The BLEU scores are between5

and � , higher being better. Often BLEU scores are
reported as percentages and “one BLEU point gain”
usually means a BLEU increase of

5�675 � .
Other evaluation metrics have been proposed to

replace BLEU. It has been argued that METEOR
correlates better with human judgment due to higher
weight on recall than precision (Banerjee and Lavie,
2005). METEOR is based on the weighted harmonic
mean of the precision and recall measured on uni-
gram matches as follows

8:9-;< �������=��� � 5">?A@�BDC"? � � �FE 5�6HG JI=K > �/L�. (2)
where

>
is the total number of unigram matches,

?M@
is the hypothesis length,

? � is the reference length
and

I
is the minimum number of � -gram matches

that covers the alignment. The second term is a
fragmentation penalty which penalizes the harmonic
mean by a factor of up to

5�6HG
when

I � > ; i.e.,
313



there are no matching � -grams higher than � � � .
By default, METEOR script counts the words that
match exactly, and words that match after a simple
Porter stemmer. Additional matching modules in-
cluding WordNet stemming and synonymy may also
be used. When multiple references are provided, the
lowest score is reported. Full test set scores are ob-
tained by accumulating statistics over all test sen-
tences. The METEOR scores are also between

5
and� , higher being better. The scores in the results sec-

tion are reported as percentages.
Translation edit rate (TER) (Snover et al., 2006)

has been proposed as more intuitive evaluation met-
ric since it is based on the rate of edits required to
transform the hypothesis into the reference. The
TER score is computed as follows

9-	�;< �����-����� �����$B�� � % B	��
�AB	�����? � (3)
where

? � is the reference length. The only differ-
ence to word error rate is that the TER allows shifts.
A shift of a sequence of words is counted as a sin-
gle edit. The minimum translation edit alignment is
usually found through a beam search. When multi-
ple references are provided, the edits from the clos-
est reference are divided by the average reference
length. Full test set scores are obtained by accumu-
lating the edits and the average reference lengths.
The perfect TER score is 0, and otherwise higher
than zero. The TER score may also be higher than 1
due to insertions. Also TER is reported as a percent-
age in the results section.

3 Confusion Network Decoding

Confusion network decoding in MT has to pick
one hypothesis as the skeleton which determines the
word order of the combination. The other hypothe-
ses are aligned against the skeleton. Either votes or
some form of confidences are assigned to each word
in the network. For example using “cat sat the mat”
as the skeleton, aligning “cat sitting on the mat” and
“hat on a mat” against it might yield the following
alignments:

cat sat � the mat
cat sitting on the mat
hat � on a mat

where � represents a NULL word. In graphical form,
the resulting confusion network is shown in Figure

1. Each arc represents an alternative word at that
position in the sentence and the number of votes for
each word is marked in parentheses. Confusion net-
work decoding usually requires finding the path with
the highest confidence in the network. Based on vote
counts, there are three alternatives in the example:
“cat sat on the mat”, “cat on the mat” and “cat sit-
ting on the mat”, each having accumulated 10 votes.
The alignment procedure plays an important role, as
by switching the position of the word ‘sat’ and the
following NULL in the skeleton, there would be a
single highest scoring path through the network; that
is, “cat on the mat”.

1 2 3 4 5 6

cat (2)

hat (1)

ε (1)

sitting (1) ε (1)

on (2)

a (1)

the (2)sat (1)

mat (3)

Figure 1: Example consensus network with votes on
word arcs.

Different alignment methods yield different con-
fusion networks. The modified Levenshtein align-
ment as used in TER is more natural than simple edit
distance such as word error rate since machine trans-
lation hypotheses may have different word orders
while having the same meaning. As the skeleton
determines the word order, the quality of the com-
bination output also depends on which hypothesis is
chosen as the skeleton. Since the modified Leven-
shtein alignment produces TER scores between the
skeleton and the other hypotheses, a natural choice
for selecting the skeleton is the minimum average
TER score. The hypothesis resulting in the lowest
average TER score when aligned against all other
hypotheses is chosen as the skeleton ��� as follows

��� ����� ) ��� ���� �"!
#%$�
& !$#

9-	�;A � & ���(' � (4)
where

?
� is the number of systems. This is equiv-

alent to minimum Bayes risk decoding with uni-
form posterior probabilities (Sim et al., 2007). Other
evaluation metrics may also be used as the MBR
loss function. For BLEU and METEOR, the loss
function would be � E ���
	 �< � & ���)' � and � E8 9-;A � & ���)' � .

It has been found that multiple hypotheses from
each system may be used to improve the quality of

314



the combination output (Sim et al., 2007). When
using

?
-best lists from each system, the words may

be assigned a different score based on the rank of the
hypothesis. In (Rosti et al., 2007), simple � K� � B�� �
score was assigned to the word coming from the

�
th-

best hypothesis. Due to the computational burden
of the TER alignment, only � -best hypotheses were
considered as possible skeletons, and � � � 5 hy-
potheses per system were aligned. Similar approach
to estimate word posteriors is adopted in this work.

System weights may be used to assign a system
specific confidence on each word in the network.
The weights may be based on the systems’ relative
performance on a separate development set or they
may be automatically tuned to optimize some evalu-
ation metric on the development set. In (Rosti et al.,
2007), the total confidence of the � th best confusion
network hypothesis � &��  , including NULL words,
given the � th source sentence � & was given byI* � &��  �� � & ��� (5)

#	��
 #�
' !$#

#%$�
� !$#

 � I�� � ' B��,?  �� ��� �  � &��  �
where

? & is the number of nodes in the confu-
sion network for the source sentence � & , ? � is the
number of translation systems,

 � is the � th system
weight,

I�� � ' is the accumulated confidence for word� produced by system � between nodes � and � B � ,
and

�
is a weight for the number of NULL links

along the hypothesis
?  �� ��� �  � &��  � . The word con-

fidences
I�� � ' were increased by � K� � B�� � if the

word � aligns between nodes � and � B � in the net-
work. If no word aligns between nodes � and � B � ,
the NULL word confidence at that position was in-
creased by � K� � B�� � . The last term controls the
number of NULL words generated in the output and
may be viewed as an insertion penalty. Each arc in
the confusion network carries the word label � and?
� scores

I�� � ' . The decoder outputs the hypothesis
with the highest

I* � &��  � � & � given the current set of
weights.

3.1 Discussion

There are several problems with the previous con-
fusion network decoding approaches. First, the
decoding can generate ungrammatical hypotheses
due to alignment errors and phrases broken by the

word-level decoding. For example, two synony-
mous words may be aligned to other words not al-
ready aligned, which may result in repetitive output.
Second, the additive confidence scores in Equation
5 have no probabilistic meaning and cannot there-
fore be combined with language model scores. Lan-
guage model expansion and re-scoring may help by
increasing the probability of more grammatical hy-
potheses in decoding. Third, the system weights are
independent of the skeleton selection. Therefore, a
hypothesis from a system with a low or zero weight
may be chosen as the skeleton.

4 Log-Linear Combination with Arbitrary
Features

To address the issue with ungrammatical hypotheses
and allow language model expansion and re-scoring,
the hypothesis confidence computation is modified.
Instead of summing arbitrary confidence scores as in
Equation 5, word posterior probabilities are used as
follows

% '*)
+  � &��  �� � & ��� (6)#	��
 #�
' !$# % '*) �

#%$�
� !$#

 � +  � � �/���/�/. B! #"� � &��  �B$�,?  �� ��� �  � &��  � B�%*?&��' �)( �  � &��  �
where

 
is the language model weight,

"� � &��  �
is the LM log-probability and

?*��' ��( �  � &��  � is the
number of words in the hypothesis � &��  . The word
posteriors +  � � �/���/� are estimated by scaling the con-fidences I�� � ' to sum to one for each system � over all
words � in between nodes � and � B � . The system
weights are also constrained to sum to one. Equation
6 may be viewed as a log-linear sum of sentence-
level features. The first feature is the sum of word
log-posteriors, the second is the LM log-probability,
the third is the log-NULL score and the last is the
log-length score. The last two terms are not com-
pletely independent but seem to help based on ex-
perimental results.

The number of paths through a confusion net-
work grows exponentially with the number of nodes.
Therefore expanding a network with an � -gram lan-
guage model may result in huge lattices if � is high.
Instead of high order � -grams with heavy pruning, a
bi-gram may first be used to expand the lattice. Af-
ter optimizing one set of weights for the expanded

315



confusion network, a second set of weights for
?

-
best list re-scoring with a higher order � -gram model
may be optimized. On a test set, the first set of
weights is used to generate an

?
-best list from the

bi-gram expanded lattice. This
?

-best list is then
re-scored with the higher order � -gram. The second
set of weights is used to find the final � -best from
the re-scored

?
-best list.

5 Multiple Confusion Network Decoding

As discussed in Section 3, there is a disconnect be-
tween the skeleton selection and confidence estima-
tion. To prevent the � -best from a system with a low
or zero weight being selected as the skeleton, confu-
sion networks are generated for each system and the
average TER score in Equation 4 is used to estimate
a prior probability for the corresponding network.
All

?
� confusion networks are connected to a single

start node with NULL arcs which contain the prior
probability from the system used as the skeleton for
that network. All confusion network are connected
to a common end node with NULL arcs. The final
arcs have a probability of one. The prior probabil-
ities in the arcs leaving the first node will be mul-
tiplied by the corresponding system weights which
guarantees that a path through a network generated
around a � -best from a system with a zero weight
will not be chosen.

The prior probabilities are estimated by viewing
the negative average TER scores between the skele-
ton and other hypotheses as log-probabilities. These
log-probabilities are scaled so that the priors sum to
one. There is a concern that the prior probabilities
estimated this way may be inaccurate. Therefore,
the priors may have to be smoothed by a tunable
exponent. However, the optimization experiments
showed that the best performance was obtained by
having a smoothing factor of 1 which is equivalent
to the original priors. Thus, no smoothing was used
in the experiments presented later in this paper.

An example joint network with the priors is
shown in Figure 2. This example has three confu-
sion networks with priors

5�6HG
,
5�6��

and
5�6��

. The to-
tal number of nodes in the network is represented
by

?��
. Similar combination of multiple confusion

networks was presented in (Matusov et al., 2006).
However, this approach did not include sentence

ε (1)

ε (1)

ε (1)

ε (0.2)

ε (0.3)

ε (0.5)

1 Na

Figure 2: Three confusion networks with prior prob-
abilities.

specific prior estimates, word posterior estimates,
and did not allow joint optimization of the system
and feature weights.

6 Weights Optimization

The optimization of the system and feature weights
may be carried out using

?
-best lists as in (Osten-

dorf et al., 1991). A confusion network may be rep-
resented by a word lattice and standard tools may be
used to generate

?
-best hypothesis lists including

word confidence scores, language model scores and
other features. The

?
-best list may be re-ordered

using the sentence-level posteriors +  � &��  �� � & � fromEquation 6 for the � th source sentence � & and the
corresponding � th hypothesis � &��  . The current� -best hypothesis �� & given a set of weights � ��  # � 6 6 6 �  #%$ �  � � � % � may be represented as fol-
lows �� &  � & � � � ����� ) � � ���� � ��� 	 +  � &��  �� � & � (7)

The objective is to optimize the � -best score on
a development set given a set of reference transla-
tions. For example, estimating weights which mini-
mize TER between a set of � -best hypothesis �
 and
reference translations


 � can be written as
�
� � ��� ) ��� �� 9-	�; 

�
 � 
 �=� (8)
This objective function is very complicated, so
gradient-based optimization methods may not be
used. In this work, modified Powell’s method as
proposed by (Brent, 1973) is used. The algorithm
explores better weights iteratively starting from a
set of initial weights. First, each dimension is op-
timized using a grid-based line minimization algo-
rithm. Then, a new direction based on the changes
in the objective function is estimated to speed up
the search. To improve the chances of finding a

316



global optimum, 19 random perturbations of the ini-
tial weights are used in parallel optimization runs.
Since the

?
-best list represents only a small portion

of all hypotheses in the confusion network, the op-
timized weights from one iteration may be used to
generate a new

?
-best list from the lattice for the

next iteration. Similarly, weights which maximize
BLEU or METEOR may be optimized.

The same Powell’s method has been used to es-
timate feature weights of a standard feature-based
phrasal MT decoder in (Och, 2003). A more effi-
cient algorithm for log-linear models was also pro-
posed. In this work, both the system and feature
weights are jointly optimized, so the efficient algo-
rithm for the log-linear models cannot be used.

7 Results

The improved system combination method was
compared to a simple confusion network decoding
without system weights and the method proposed
in (Rosti et al., 2007) on the Arabic to English and
Chinese to English NIST MT05 tasks. Six MT sys-
tems were combined: three (A,C,E) were phrase-
based similar to (Koehn, 2004), two (B,D) were
hierarchical similar to (Chiang, 2005) and one (F)
was syntax-based similar to (Galley et al., 2006).
All systems were trained on the same data and the
outputs used the same tokenization. The decoder
weights for systems A and B were tuned to optimize
TER, and others were tuned to optimize BLEU. All
decoder weight tuning was done on the NIST MT02
task.

The joint confusion network was expanded with
a bi-gram language model and a

�"5*5
-best list was

generated from the lattice for each tuning iteration.
The system and feature weights were tuned on the
union of NIST MT03 and MT04 tasks. All four ref-
erence translations available for the tuning and test
sets were used. A first set of weights with the bi-
gram LM was optimized with three iterations. A
second set of weights was tuned for 5-gram

?
-best

list re-scoring. The bi-gram and 5-gram English lan-
guage models were trained on about 7 billion words.
The final combination outputs were detokenized and
cased before scoring.

The tuning set results on the Arabic to English
NIST MT03+MT04 task are shown in Table 1. The

Arabic tuning TER BLEU MTR

system A 44.93 45.71 66.09
system B 46.41 43.07 64.79
system C 46.10 46.41 65.33
system D 44.36 46.83 66.91
system E 45.35 45.44 65.69
system F 47.10 44.52 65.28
no weights 42.35 48.91 67.76
baseline 42.19 49.86 68.34

TER tuned 41.88 51.45 68.62
BLEU tuned 42.12 51.72 68.59
MTR tuned 54.08 38.93 71.42

Table 1: Mixed-case TER and BLEU, and
lower-case METEOR scores on Arabic NIST
MT03+MT04.

Arabic test TER BLEU MTR

system A 42.98 49.58 69.86
system B 43.79 47.06 68.62
system C 43.92 47.87 66.97
system D 40.75 52.09 71.23
system E 42.19 50.86 70.02
system F 44.30 50.15 69.75
no weights 39.33 53.66 71.61
baseline 39.29 54.51 72.20

TER tuned 39.10 55.30 72.53
BLEU tuned 39.13 55.48 72.81
MTR tuned 51.56 41.73 74.79

Table 2: Mixed-case TER and BLEU, and lower-
case METEOR scores on Arabic NIST MT05.

best score on each metric is shown in bold face fonts.
The row labeled as no weights corresponds to
Equation 5 with uniform system weights

 � and
zero NULL weight. The baseline corresponds
to Equation 5 with TER tuned weights. The follow-
ing three rows correspond to the improved confusion
network decoding with different optimization met-
rics. As expected, the scores on the metric used in
tuning are the best on that metric. Also, the combi-
nation results are better than any single system on all
metrics in the case of TER and BLEU tuning. How-
ever, the METEOR tuning yields extremely high
TER and low BLEU scores. This must be due to the
higher weight on the recall compared to precision in
the harmonic mean used to compute the METEOR

317



Chinese tuning TER BLEU MTR

system A 56.56 29.39 54.54
system B 55.88 30.45 54.36
system C 58.35 32.88 56.72
system D 57.09 36.18 57.11
system E 57.69 33.85 58.28
system F 56.11 36.64 58.90
no weights 53.11 37.77 59.19
baseline 53.40 38.52 59.56

TER tuned 52.13 36.87 57.30
BLEU tuned 53.03 39.99 58.97
MTR tuned 70.27 28.60 63.10

Table 3: Mixed-case TER and BLEU, and
lower-case METEOR scores on Chinese NIST
MT03+MT04.

score. Even though METEOR has been shown to be
a good metric on a given MT output, tuning to op-
timize METEOR results in a high insertion rate and
low precision. The Arabic test set results are shown
in Table 2. The TER and BLEU optimized com-
bination results beat all single system scores on all
metrics. The best results on a given metric are again
obtained by the combination optimized for the corre-
sponding metric. It should be noted that the TER op-
timized combination has significantly higher BLEU
score than the TER optimized baseline. Compared
to the baseline system which is also optimized for
TER, the BLEU score is improved by 0.97 points.
Also, the METEOR score using the METEOR op-
timized weights is very high. However, the other
scores are worse in common with the tuning set re-
sults.

The tuning set results on the Chinese to English
NIST MT03+MT04 task are shown in Table 3. The
baseline combination weights were tuned to opti-
mize BLEU. Again, the best scores on each met-
ric are obtained by the combination tuned for that
metric. Only the METEOR score of the TER tuned
combination is worse than the METEOR scores of
systems E and F - other combinations are better than
any single system on all metrics apart from the ME-
TEOR tuned combinations. The test set results fol-
low clearly the tuning results again - the TER tuned
combination is the best in terms of TER, the BLEU
tuned in terms of BLEU, and the METEOR tuned in

Chinese test TER BLEU MTR

system A 56.57 29.63 56.63
system B 56.30 29.62 55.61
system C 59.48 31.32 57.71
system D 58.32 33.77 57.92
system E 58.46 32.40 59.75
system F 56.79 35.30 60.82
no weights 53.80 36.17 60.75
baseline 54.34 36.44 61.05

TER tuned 52.90 35.76 58.60
BLEU tuned 54.05 37.91 60.31
MTR tuned 72.59 26.96 64.35

Table 4: Mixed-case TER and BLEU, and lower-
case METEOR scores on Chinese NIST MT05.

terms of METEOR. Compared to the baseline, the
BLEU score of the BLEU tuned combination is im-
proved by 1.47 points. Again, the METEOR tuned
weights hurt the other metrics significantly.

8 Conclusions

An improved confusion network decoding method
combining the word posteriors with arbitrary fea-
tures was presented. This allows the addition of
language model scores by expanding the lattices or
re-scoring

?
-best lists. The LM integration should

result in more grammatical combination outputs.
Also, confusion networks generated by using the� -best hypothesis from all systems as the skeleton
were used with prior probabilities derived from the
average TER scores. This guarantees that the best
path will not be found from a network generated for
a system with zero weight. Compared to the earlier
system combination approaches, this method is fully
automatic and requires very little additional infor-
mation on top of the development set outputs from
the individual systems to tune the weights.

The new method was evaluated on the Arabic to
English and Chinese to English NIST MT05 tasks.
Compared to the baseline from (Rosti et al., 2007),
the new method improves the BLEU scores signif-
icantly. The combination weights were tuned to
optimize three automatic evaluation metrics: TER,
BLEU and METEOR. The TER tuning seems to
yield very good results on Arabic - the BLEU tun-
ing seems to be better on Chinese. It also seems like

318



METEOR should not be used in tuning due to high
insertion rate and low precision. It would be interest-
ing to know which tuning metric results in the best
translations in terms of human judgment. However,
this would require time consuming evaluations such
as human mediated TER post-editing (Snover et al.,
2006).

The improved confusion network decoding ap-
proach allows arbitrary features to be used in the
combination. New features may be added in the fu-
ture. Hypothesis alignment is also very important
in confusion network generation. Better alignment
methods which take synonymy into account should
be investigated. This method could also benefit from
more sophisticated word posterior estimation.

Acknowledgments

This work was supported by DARPA/IPTO Contract
No. HR0011-06-C-0022 under the GALE program
(approved for public release, distribution unlimited).
The authors would like to thank ISI and University
of Edinburgh for sharing their MT system outputs.

References

Satanjeev Banerjee and Alon Lavie. 2005. METEOR:
An automatic metric for MT evaluation with improved
correlation with human judgments. In Proc. ACL
Workshop on Intrinsic and Extrinsic Evaluation Mea-
sures for Machine Translation and/or Summarization,
pages 65–72.

Srinivas Bangalore, German Bordel, and Giuseppe Ric-
cardi. 2001. Computing consensus translation from
multiple machine translation systems. In Proc. ASRU,
pages 351–354.

Richard P. Brent. 1973. Algorithms for Minimization
Without Derivatives. Prentice-Hall.

David Chiang. 2005. A hierarchical phrase-based model
for statistical machine translation. In Proc. ACL, pages
263–270.

Jonathan G. Fiscus. 1997. A post-processing system to
yield reduced word error rates: Recognizer output vot-
ing error reduction (ROVER). In Proc. ASRU, pages
347–354.

Robert Frederking and Sergei Nirenburg. 1994. Three
heads are better than one. In Proc. ANLP, pages 95–
100.

Michel Galley, Jonathan Graehl, Kevin Knight, Daniel
Marcu, Steve DeNeefe, Wei Wang, and Ignacio
Thayer. 2006. Scalable inferences and training of
context-rich syntax translation models. In Proc. COL-
ING/ACL, pages 961–968.

Shyamsundar Jayaraman and Alon Lavie. 2005. Multi-
engine machine translation guided by explicit word
matching. In Proc. EAMT, pages 143–152.

Philipp Koehn. 2004. Pharaoh: a beam search decoder
for phrase-based statistical machine translation mod-
els. In Proc. AMTA, pages 115–124.

Lidia Mangu, Eric Brill, and Andreas Stolcke. 2000.
Finding consensus in speech recognition: Word error
minimization and other applications of confusion net-
works. Computer Speech and Language, 14(4):373–
400.

Evgeny Matusov, Nicola Ueffing, and Hermann Ney.
2006. Computing consensus translation from multiple
machine translation systems using enhanced hypothe-
ses alignment. In Proc. EACL, pages 33–40.

Franz J. Och and Hermann Ney. 2003. A systematic
comparison of various statistical alignment models.
Computational Linguistics, 29(1):19–51.

Franz J. Och. 2003. Minimum error rate training in sta-
tistical machine translation. In Proc. ACL, pages 160–
167.

Mari Ostendorf, Ashvin Kannan, Steve Austin, Owen
Kimball, Richard Schwartz, and Jan Robin Rohlicek.
1991. Integration of diverse recognition methodolo-
gies through reevaluation of N-best sentence hypothe-
ses. In Proc. HLT, pages 83–87.

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. BLEU: a method for automatic eval-
uation of machine translation. In Proc. ACL, pages
311–318.

Antti-Veikko I. Rosti, Bing Xiang, Spyros Matsoukas,
Richard Schwartz, Necip Fazil Ayan, and Bonnie J.
Dorr. 2007. Combining outputs from multiple ma-
chine translation systems. In Proc. NAACL-HLT 2007,
pages 228–235.

Robert E. Schapire. 1990. The strength of weak learn-
ability. Machine Learning, 5(2):197–227.

Khe Chai Sim, William J. Byrne, Mark J.F. Gales,
Hichem Sahbi, and Phil C. Woodland. 2007. Consen-
sus network decoding for statistical machine transla-
tion system combination. In Proc. ICASSP, volume 4,
pages 105–108.

Matthew Snover, Bonnie Dorr, Richard Schwartz, Lin-
nea Micciula, and John Makhoul. 2006. A study of
translation edit rate with targeted human annotation.
In Proc. AMTA, pages 223–231.

319


