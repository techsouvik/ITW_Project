













































Mixture Model POMDPs for Efficient Handling of Uncertainty in Dialogue Management


Proceedings of ACL-08: HLT, Short Papers (Companion Volume), pages 73–76,
Columbus, Ohio, USA, June 2008. c©2008 Association for Computational Linguistics

Mixture Model POMDPs for Efficient Handling of Uncertainty
in Dialogue Management

James Henderson
University of Geneva

Department of Computer Science
James.Henderson@cui.unige.ch

Oliver Lemon
University of Edinburgh
School of Informatics

olemon@inf.ed.ac.uk

Abstract

In spoken dialogue systems, Partially Observ-
able Markov Decision Processes (POMDPs)
provide a formal framework for making di-
alogue management decisions under uncer-
tainty, but efficiency and interpretability con-
siderations mean that most current statistical
dialogue managers are only MDPs. These
MDP systems encode uncertainty explicitly in
a single state representation. We formalise
such MDP states in terms of distributions
over POMDP states, and propose a new di-
alogue system architecture (Mixture Model
POMDPs) which uses mixtures of these dis-
tributions to efficiently represent uncertainty.
We also provide initial evaluation results (with
real users) for this architecture.

1 Introduction

Partially Observable Markov Decision Processes
(POMDPs) provide a formal framework for mak-
ing decisions under uncertainty. Recent research
in spoken dialogue systems has used POMDPs for
dialogue management (Williams and Young, 2007;
Young et al., 2007). These systems represent the
uncertainty about the dialogue history using a prob-
ability distribution over dialogue states, known as
the POMDP’s belief state, and they use approxi-
mate POMDP inference procedures to make dia-
logue management decisions. However, these infer-
ence procedures are too computationally intensive
for most domains, and the system’s behaviour can be
difficult to predict. Instead, most current statistical
dialogue managers use a single state to represent the
dialogue history, thereby making them only Markov
Decision Process models (MDPs). These state rep-

resentations have been fine-tuned over many devel-
opment cycles so that common types of uncertainty
can be encoded in a single state. Examples of such
representations include unspecified values, confi-
dence scores, and confirmed/unconfirmed features.
We formalise such MDP systems as compact encod-
ings of POMDPs, where each MDP state represents
a probability distribution over POMDP states. We
call these distributions “MDP belief states”.

Given this understanding of MDP dialogue man-
agers, we propose a new POMDP spoken dialogue
system architecture which uses mixtures of MDP be-
lief states to encode uncertainty. A Mixture Model
POMDP represents its belief state as a probability
distribution over a finite set of MDP states. This
extends the compact representations of uncertainty
in MDP states to include arbitrary disjunction be-
tween MDP states. Efficiency is maintained because
such arbitrary disjunction is not needed to encode
the most common forms of uncertainty, and thus the
number of MDP states in the set can be kept small
without losing accuracy. On the other hand, allow-
ing multiple MDP states provides the representa-
tional mechanism necessary to incorporate multiple
speech recognition hypotheses into the belief state
representation. In spoken dialogue systems, speech
recognition is by far the most important source of
uncertainty. By providing a mechanism to incorpo-
rate multiple arbitrary speech recognition hypothe-
ses, the proposed architecture leverages the main ad-
vantage of POMDP systems while still maintaining
the efficiency of MDP-based dialogue managers.

2 Mixture Model POMDPs

A POMDP belief state bt is a probability distribution
P (st|Vt−1, ut) over POMDP states st given the dia-

73



logue history Vt−1 and the most recent observation
(i.e. user utterance) ut. We formalise the meaning
of an MDP state representation rt as a distribution
b(rt) = P (st|rt) over POMDP states. We represent
the belief state bt as a list of pairs 〈rit, pit〉 such that∑

i p
i
t = 1. This list is interpreted as a mixture of

the b(rit).
bt =

∑
i

pitb(r
i
t) (1)

State transitions in MDPs are specified with an
update function, rt = f(rt−1, at−1, ht), which maps
the preceding state rt−1, system action at−1, and
user input ht to a new state rt. This function is in-
tended to encode in rt all the new information pro-
vided by at−1 and ht. The user input ht is the result
of automatic speech recognition (ASR) plus spoken
language understanding (SLU) applied to ut. Be-
cause there is no method for handling ambiguity in
ht, ht is computed from the single best ASR-SLU
hypothesis, plus some measure of ASR confidence.

In POMDPs, belief state transitions are done by
changing the distribution over states to take into ac-
count the new information from the system action
at−1 and an n-best list of ASR-SLU hypotheses h

j
t .

This new belief state can be estimated as

bt = P (st|Vt−1, ut)

=
∑
h

j
t

∑
st−1

P (st−1|Vt−1)P (h
j
t |Vt−1, st−1)

P (ut|Vt−1, st−1, h
j
t )

P (st|Vt−1, st−1, h
j
t , ut)

P (ut|Vt−1)

≈
∑
h

j
t

∑
st−1

P (st−1|Vt−2, ut−1)P (h
j
t |at−1, st−1)

P (hjt |ut)P (st|at−1, st−1, h
j
t )

P (hjt )Z(Vt)

where Z(Vt) is a normalising constant.
P (st−1|Vt−2, ut−1) is the previous belief state.
P (hjt |ut) reflects the confidence of ASR-SLU in
hypothesis hjt . P (st|at−1, st−1, h

j
t ) is normally 1

for st = st−1, but can be used to allow users to
change their mind mid-dialogue. P (hjt |at−1, st−1)
is a user model. P (hjt ) is a prior over ASR-SLU
outputs.

Putting these two approaches together, we get the
following update equation for our mixture of MDP
belief states:

bt = P (st|Vt−1, ut)

≈
∑
h

j
t

∑
ri
t−1

pit−1P (h
j
t |at−1, rit−1)

P (hjt |ut)b(f(rit−1, at−1, h
j
t ))

P (hjt )Z(Vt)
(2)

=
∑
i′

pi
′

t b(r
i′
t )

where, for each i′ there is one pair i, j such that

ri
′

t = f(r
i
t−1, at−1, h

j
t )

pi
′

t =
pit−1P (h

j
t |at−1,r

i
t−1)P (h

j
t |ut)

P (h
j
t )Z(Vt)

.
(3)

For equation (2) to be true, we require that

b(f(rit−1, at−1, h
j
t )) ≈ P (st|at−1, r

i
t−1, h

j
t ) (4)

which simply ensures that the meaning assigned to
MDP state representations and the MDP state tran-
sition function are compatible.

From equation (3), we see that the number
of MDP states will grow exponentially with the
length of the dialogue, proportionately to the num-
ber of ASR-SLU hypotheses. Some of the state-
hypothesis pairs rit−1, h

j
t may lead to equivalent

states f(rit−1, at−1, h
j
t ), but in general pruning is

necessary. Pruning should be done so as to min-
imise the change to the belief state distribution, for
example by minimising the KL divergence between
the pre- and post- pruning belief states. We use two
heuristic approximations to this optimisation prob-
lem. First, if two states share the same core features
(e.g. filled slots, but not the history of user inputs),
then the state with the lower probability is pruned,
and its probability is added to the other state. Sec-
ond, a fixed beam of the k most probable states is
kept, and the other states are pruned. The probabil-
ity pit from a pruned state r

i
t is redistributed to un-

pruned states which are less informative than rit in
their core features.1

The interface between the ASR-SLU module and
the dialogue manager is a set of hypotheses hjt paired
with their confidence scores P (hjt |ut). These pairs
are analogous to the state-probability pairs rit, p

i
t

within the dialogue manager, and we can extend our
mixture model architecture to cover these pairs as
well. Interpreting the set of hjt , P (h

j
t |ut) pairs as a

1In the current implementation, these pruned state probabil-
ities are simply added to an uninformative “null” state, but in
general we could check for logical subsumption between states.

74



mixture of distributions over more specific hypothe-
ses becomes important when we consider pruning
this set before passing it to the dialogue manager. As
with the pruning of states, pruning should not sim-
ply remove a hypothesis and renormalise, it should
redistribute the probability of a pruned hypothesis to
similar hypotheses. This is not always computation-
ally feasible, but all interfaces within the Mixture
Model POMDP architecture are sets of hypothesis-
probability pairs which can be interpreted as finite
mixtures in some underlying hypothesis space.

Given an MDP state representation, this formali-
sation allows us to convert it into a Mixture Model
POMDP. The only additional components of the
model are the user model P (hjt |at−1, rit−1), the
ASR-SLU prior P (hjt ), and the ASR-SLU confi-
dence score P (hjt |ut). Note that there is no need
to actually define b(rit), provided equation (4) holds.

3 Decision Making with MM POMDPs

Given this representation of the uncertainty in the
current dialogue state, the spoken dialogue system
needs to decide what system action to perform.
There are several approaches to POMDP decision
making which could be adapted to this representa-
tion, but to date we have only considered a method
which allows us to directly derive a POMDP policy
from the policy of the original MDP.

Here again we exploit the fact that the most fre-
quent forms of uncertainty are already effectively
handled in the MDP system (e.g. by filled vs. con-
firmed slot values). We propose that an effective di-
alogue management policy can be created by sim-
ply computing a mixture of the MDP policy applied
to the MDP states in the belief state list. More
precisely, we assume that the original MDP system
specifies a Q function QMDP(at, rt) which estimates
the expected future reward of performing action at
in state rt. We then estimate the expected future re-
ward of performing action at in belief state bt as the
mixture of these MDP estimates.

Q(at, bt) ≈
∑

i

pitQMDP(at, r
i
t) (5)

The dialogue management policy is to choose the
action at with the largest value for Q(at, bt). This is
known as a Q-MDP model (Littman et al., 1995), so
we call this proposal a Mixture Model Q-MDP.

4 Related Work

Our representation of POMDP belief states using a
set of distributions over POMDP states is similar to
the approach in (Young et al., 2007), where POMDP
belief states are represented using a set of partitions
of POMDP states. For any set of partitions, the mix-
ture model approach could express the same model
by defining one MDP state per partition and giving
it a uniform distribution inside its partition and zero
probability outside. However, the mixture model ap-
proach is more flexible, because the distributions in
the mixture do not have to be uniform within their
non-zero region, and these regions do not have to
be disjoint. A list of states was also used in (Hi-
gashinaka et al., 2003) to represent uncertainty, but
no formal semantics was provided for this list, and
therefore only heuristic uses were suggested for it.

5 Initial Experiments

We have implemented a Mixture Model POMDP ar-
chitecture as a multi-state version of the DIPPER
“Information State Update” dialogue manager (Bos
et al., 2003). It uses equation (3) to compute belief
state updates, given separate models for MDP state
updates (for f(rit−1, at−1, h

j
t )), statistical ASR-SLU

(for P (hjt |ut)/P (h
j
t )), and a statistical user model

(for P (hjt |at−1, rit−1)). The state list is pruned as
described in section 2, where the “core features”
are the filled information slot values and whether
they have been confirmed. For example, the sys-
tem will merge two states which agree that the user
only wants a cheap hotel, even if they disagree on
the sequence of dialogue acts which lead to this in-
formation. It also never prunes the “null” state, so
that there is always some probability that the system
knows nothing.

The system used in the experiments described
below uses the MDP state representation and up-
date function from (Lemon and Liu, 2007), which
is designed for standard slot-filling dialogues. For
the ASR model, it uses the HTK speech recogniser
(Young et al., 2002) and an n-best list of three ASR
hypotheses on each user turn. The prior over user in-
puts is assumed to be uniform. The ASR hypotheses
are passed to the SLU model from (Meza-Ruiz et al.,
2008), which produces a single user input for each
ASR hypothesis. This SLU model was trained on

75



TC % Av. length (std. deviation)
Handcoded 56.0 7.2 (4.6)
MDP 66.6 7.2 (4.0)
MM Q-MDP 73.3 7.3 (3.7)

Table 1: Initial test results for human-machine dialogues,
showing task completion and average length.

the TownInfo corpus of dialogues, which was col-
lected using the TownInfo human-machine dialogue
systems of (Lemon et al., 2006), transcribed, and
hand annotated. ASR hypotheses which result in the
same user input are merged (summing their proba-
bilities), and the resulting list of at most three ASR-
SLU hypotheses are passed to the dialogue manager.
Thus the number of MDP states in the dialogue man-
ager grows by up to three times at each step, before
pruning. For the user model, the system uses an n-
gram user model, as described in (Georgila et al.,
2005), trained on the annotated TownInfo corpus.2

The system’s dialogue management policy is a
Mixture Model Q-MDP (MM Q-MDP) policy. As
with the MDP states, the MDP Q function is from
(Lemon and Liu, 2007). It was trained in an MDP
system using reinforcement learning with simulated
users (Lemon and Liu, 2007), and was not modified
for use in our MM Q-MDP policy.

We tested this system with 10 different users, each
attempting 9 tasks in the TownInfo domain (search-
ing for hotels and restaurants in a fictitious town),
resulting in 90 test dialogues. The users each at-
tempted 3 tasks with the MDP system of (Lemon
and Liu, 2007), 3 tasks with a state-of-the-art hand-
coded system (see (Lemon et al., 2006)), and 3 tasks
with the MM Q-MDP system. Ordering of sys-
tems and tasks was controlled, and 3 of the users
were not native speakers of English. We collected
the Task Completion (TC), and dialogue length for
each system, as reported in table 1. Task Comple-
tion is counted from the system logs when the user
replies that they are happy with their chosen option.
Such a small sample size means that these results are
not statistically significant, but there is a clear trend
showing the superiority of the the MM Q-MDP sys-
tem, both in terms of more tasks being completed
and less variability in overall dialogue length.

2Thanks to K. Georgilla for training this model.

6 Conclusions

Mixture Model POMDPs combine the efficiency of
MDP spoken dialogue systems with the ability of
POMDP models to make use of multiple ASR hy-
potheses. They can also be constructed from MDP
models without additional training, using the Q-
MDP approximation for the dialogue management
policy. Initial results suggest that, despite its sim-
plicity, this approach does lead to better spoken dia-
logue systems than MDP and hand-coded models.

Acknowledgments

This research received funding from UK EPSRC
grant EP/E019501/1 and the European Community’s
FP7 under grant no 216594 (CLASSIC project:
www.classic-project.org).

References
J Bos, E Klein, O Lemon, and T Oka. 2003. DIPPER:

Description and Formalisation of an Information-State
Update Dialogue System Architecture. In Proc. SIG-
dial Workshop on Discourse and Dialogue, Sapporo.

K Georgila, J Henderson, and O Lemon. 2005. Learning
User Simulations for Information State Update Dia-
logue Systems. In Proc. Eurospeech.

H Higashinaka, M Nakano, and K Aikawa. 2003.
Corpus-based discourse understanding in spoken dia-
logue systems. In Proc. ACL, Sapporo.

O Lemon and X Liu. 2007. Dialogue policy learning
for combinations of noise and user simulation: transfer
results. In Proc. SIGdial.

O Lemon, K Georgila, and J Henderson. 2006. Evalu-
ating Effectiveness and Portability of Reinforcement
Learned Dialogue Strategies with real users: the
TALK TownInfo Evaluation. In Proc. ACL/IEEE SLT.

ML Littman, AR Cassandra, and LP Kaelbling. 1995.
Learning policies for partially observable environ-
ments: Scaling up. In Proc. ICML, pages 362–370.

I Meza-Ruiz, S Riedel, and O Lemon. 2008. Accurate
statistical spoken language understanding from limited
development resources. In Proc. ICASSP. (to appear).

JD Williams and SJ Young. 2007. Partially Observ-
able Markov Decision Processes for Spoken Dialog Systems.
Computer Speech and Language, 21(2):231–422.

S Young, G Evermann, D Kershaw, G Moore, J Odell,
D Ollason, D Povey, V Valtchev, and P Woodland.
2002. The HTK Book. Cambridge Univ. Eng. Dept.

SJ Young, J Schatzmann, K Weilhammer, and H Ye.
2007. The Hidden Information State Approach to Di-
alog Management. In Proc. ICASSP, Honolulu.

76


