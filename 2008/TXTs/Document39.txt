













































A Logical Basis for the D Combinator and Normal Form in CCG


Proceedings of ACL-08: HLT, pages 326–334,
Columbus, Ohio, USA, June 2008. c©2008 Association for Computational Linguistics

A Logical Basis for the D Combinator and Normal Form in CCG

Frederick Hoyt and Jason Baldridge
The Department of Linguistics

The University of Texas at Austin
{fmhoyt,jbaldrid}@mail.utexas.edu

Abstract

The standard set of rules defined in Combina-
tory Categorial Grammar (CCG) fails to pro-
vide satisfactory analyses for a number of syn-
tactic structures found in natural languages.
These structures can be analyzed elegantly by
augmenting CCG with a class of rules based
on the combinator D (Curry and Feys, 1958).
We show two ways to derive the D rules:
one based on unary composition and the other
based on a logical characterization of CCG’s
rule base (Baldridge, 2002). We also show
how Eisner’s (1996) normal form constraints
follow from this logic, ensuring that the D
rules do not lead to spurious ambiguities.

1 Introduction

Combinatory Categorial Grammar (CCG, Steedman
(2000)) is a compositional, semantically transparent
formalism that is both linguistically expressive and
computationally tractable. It has been used for a va-
riety of tasks, such as wide-coverage parsing (Hock-
enmaier and Steedman, 2002; Clark and Curran,
2007), sentence realization (White, 2006), learning
semantic parsers (Zettlemoyer and Collins, 2007),
dialog systems (Kruijff et al., 2007), grammar engi-
neering (Beavers, 2004; Baldridge et al., 2007), and
modeling syntactic priming (Reitter et al., 2006).

A distinctive aspect of CCG is that it provides
a very flexible notion of constituency. This sup-
ports elegant analyses of several phenomena (e.g.,
coordination, long-distance extraction, and intona-
tion) and allows incremental parsing with the com-
petence grammar (Steedman, 2000). Here, we argue

that even with its flexibility, CCG as standardly de-
fined is not permissive enough for certain linguistic
constructions and greater incrementality. Following
Wittenburg (1987), we remedy this by adding a set
of rules based on the D combinator of combinatory
logic (Curry and Feys, 1958).

(1) x/(y/z) :f y/w :g ⇒ x/(w/z) :λh.f(λx.ghx)

We show that CCG augmented with this rule im-
proves CCG’s empirical coverage by allowing better
analyses of modal verbs in English and causatives in
Spanish, and certain coordinate constructions.

The D rules are well-behaved; we show this by
deriving them both from unary composition and
from the logic defined by Baldridge (2002). Both
perspectives on D ensure that the new rules are com-
patible with normal form constraints (Eisner, 1996)
for controlling spurious ambiguity. The logic also
ensures that the new rules are subject to modalities
consistent with those defined by Baldridge and Krui-
jff (2003). Furthermore, we define a logic that pro-
duces Eisner’s constraints as grammar internal theo-
rems rather than parsing stipulations.

2 Combinatory Categorial Grammar

CCG uses a universal set of syntactic rules based on
the B, T, and S combinators of combinatory logic
(Curry and Feys, 1958):

(2) B: ((Bf)g)x = f(gx)
T: Txf = fx
S: ((Sf)g)x = fx(gx)

CCG functors are functions over strings of symbols,
so different linearized versions of each of the com-
binators have to be specified (ignoring S here):

326



(3) FA: (>) x/?y y ⇒ x
(<) y x\?y ⇒ x

B: (>B) x/�y y/�z ⇒ x/�z
(<B) y\�z x\�y ⇒ x\�z
(>B×) x/×y y\×z ⇒ x\×z
(<B×) y/×z x\×y ⇒ x/×z

T: (>T) x ⇒ t/i(t\ix)
(<T) x ⇒ t\i(t/ix)

The symbols {?, �, ×, ·} are modalities that allow
subtypes of slashes to be defined; this in turn allows
the slashes on categories to be defined in a way that
allows them to be used (or not) with specific subsets
of the above rules. The rules of this multimodal ver-
sion of CCG (Baldridge, 2002; Baldridge and Krui-
jff, 2003) are derived as theorems of a Categorial
Type Logic (CTL, Moortgat (1997)).

This treats CCG as a compilation of CTL proofs,
providing a principled, grammar-internal basis for
restrictions on the CCG rules, transferring language-
particular restrictions on rule application to the lex-
icon, and allowing the CCG rules to be viewed
as grammatical universals (Baldridge and Kruijff,
2003; Steedman and Baldridge, To Appear).

These rules—especially the B rules—allow
derivations to be partially associative: given appro-
priate type assignments, a string ABC can be ana-
lyzed as either A(BC) or (AB)C. This associativity
leads to elegant analyses of phenomena that demand
more effort in less flexible frameworks. One of the
best known is “odd constituent” coordination:

(4) Bob gave Stan a beer and Max a coke.
(5) I will buy and you will eat a cheeseburger.

The coordinated constituents are challenging be-
cause they are at odds with standardly assumed
phrase structure constituents. In CCG, such con-
stituents simply follow from the associativity added
by the B and T rules. For example, given the cate-
gory assignments in (6) and the abbreviations in (7),
(4) is analyzed as in (8) and (9). Each conjunct is
a pair of type-raised NPs combined by means of the
>B-rule, deriving two composed constituents that
are arguments to the conjunction:1

(6) i. Bob ` s/(s\np)
1We follow (Steedman, 2000) in assuming that type-raising

applies in the lexicon, and therefore that nominals such as Stan

ii. Stan, Max `
((s\np)/np)\(((s\np)/np)/np)

iii. a beer, a coke ` (s\np)\((s\np)/np)
iv. and ` (x\?x)/?x
v. gave ` ((s\np)/np)/np

(7) i. vp = s\np
ii. tv = (s\np)/np
iii. dtv = ((s\np)/np)/np

(8) Stan a beer and Max a coke
tv\dt vp\tv (x\?x)/?x tv\dt vp\tv

<B <B
vp\dt vp\dt

>
(vp\dt)\(vp\dt)

<
vp\dt

(9) Bill gave Stan a beer and Max a coke
s/vp dt vp\dt

<
vp

>
s

Similarly, I will buy is derived with category s/np
by assuming the category (6i) for I and composing
that with both verbs in turn.

CCG’s approach is appealing because such con-
stituents are not odd at all: they simply follow from
the fact that CCG is a system of type-based gram-
matical inference that allows left associativity.

3 Linguistic Motivation for D

CCG is only partially associative. Here, we discuss
several situations which require greater associativity
and thus cannot be given an adequate analysis with
CCG as standardly defined. These structures have
in common that a category of the form x|(y|z) must
combine with one of the form y|w—exactly the con-
figuration handled by the D schemata in (1).

3.1 Cross-Conjunct Extraction
In the first situation, a question word is distributed
across auxiliary or subordinating verb categories:

(10) . . . what you can and what you must not base
your verdict on.

We call this cross-conjunct extraction. It was noted
by Pickering and Barry (1993) for English, but to the
best of our knowledge it has not been treated in the

have type-raised lexical assignments. We also suppress seman-
tic representations in the derivations for the sake of space.

327



CCG literature, nor noted in other languages. The
problem it presents to CCG is clear in (11), which
shows the necessary derivation of (10) using stan-
dard multimodal category assignments. For the to-
kens of what to form constituents with you can and
you must not, they must must combine directly. The
problem is that these constituents (in bold) cannot be
created with the standard CCG combinators in (3).

(11) s

s/(vp/np)

s/(vp/np)

s/(s/np)
what

s/vp
you can

(s/(vp/np))\(s/(vp/np))

(x\?x)/?x
and

s/(vp/np)

s/(s/np)
what

s/vp
you must not

vp/np
base your verdict on

The category for and is marked for non-associativity
with ?, and thus combines with other expressions
only by function application (Baldridge, 2002). This
ensures that each conjunct is a discrete constituent.

Cross-conjunct extraction occurs in other lan-
guages as well, including Dutch (12), German (13),
Romanian (14), and Spanish (15):

(12) dat
that

ik
I

haar
her

wil
want

en
and

dat
that

ik
I

haar
her

moet
can

helpen.
help

“. . . that I want to and that I can help her.”

(13) Wen
who

kann
can

ich
I

und
and

wen
who

darf
may

ich
I

noch
still

wählen?
choose

“Whom can I and whom may I still chose?”

(14) Gandeste-te
consider.imper.2s-refl.2s

cui
who.dat

çe
what

vrei,
want.2s

şi
and

cui
who.dat

çe
what

poţi,
can.2s

să
to

dai.
give.subj.2s

“Consider to whom you want and to whom you
are able to give what.”

(15) Me
me

lo
it

puedes
can.2s

y
and

me
me

lo
it

debes
must.2s

explicar
ask

“You can and should explain it to me.”

It is thus a general phenomenon, not just a quirk
of English. While it could be handled with extra cat-
egories, such as (s/(vp/np))/(s/np) for what, this is
exactly the sort of strong-arm tactic that inclusion of
the standard B, T, and S rules is meant to avoid.

3.2 English Auxiliary Verbs
The standard CCG analysis for English auxiliary
verbs is the type exemplified in (16) (Steedman,
2000, 68), interpreted as a unary operator over sen-
tence meanings (Gamut, 1991; Kratzer, 1991):

(16) can ` (s\np)/(s\np) : λP etλx.♦P (x)

However, this type is empirically underdetermined,
given a widely-noted set of generalizations suggest-
ing that auxiliaries and raising verbs take no subject
argument at all (Jacobson, 1990, a.o.).

(17) i. Lack of syntactic restrictions on the subject;
ii. Lack of semantic restrictions on the subject;
iii. Inheritance of selectional restrictions from the

subordinate predicate.

Two arguments are made for (16). First, it is nec-
essary so that type-raised subjects can compose with
the auxiliary in extraction contexts, as in (18):

(18) what I can eat
s/(s/np) s/vp vp/vp tv

>B
s/vp

>B
s/np

>
s

Second, it is claimed to be necessary in order to ac-
count for subject-verb agreement, on the assumption
that agreement features are domain restrictions on
functors of type s\np (Steedman, 1992, 1996).

The first argument is the topic of this paper, and,
as we show below, is refuted by the use of the D-
combinator. The second argument is undermined by
examples like (19):

(19) There appear to have been [ neither [ any catas-
trophic consequences ], nor [ a drastic change in
the average age of retirement ] ] .

In (19), appear agrees with two negative-polarity-
sensitive NPs trapped inside a neither-nor coordi-
nate structure in which they are licensed. Ap-
pear therefore does not combine with them directly,
showing that the agreement relation need not be me-
diated by direct application of a subject argument.

We conclude, therefore, that the assignment of the
vp/vp type to English auxiliaries and modal verbs is
unsupported on both formal and linguistic grounds.

Following Jacobson (1990), a more empirically-
motivated assignment is (20):

328



(20) can ` s/s : λpt .♦p

Combining (20) with a type-raised subject presents
another instance of the structure in (1), where that
question words are represented as variable-binding
operators (Groenendijk and Stokhof, 1997):

(21) what I can
s/(s/np) : λQet?yQy s/vp : λP et .P i′ s/s : λpt .♦p∗ ∗ ∗ >B ∗ ∗∗

3.3 The Spanish Causative Construction

The schema in (1) is also found in the widely-
studied Romance causative construction (Andrews
and Manning, 1999, a.m.o), illustrated in (22):

(22) Nos
cl.1p

hizo
made.3s

leer
read

El
the

Señor
Lord

de
of

los
the

Anillos.
Rings

“He made us read The Lord of the Rings.”

The aspect of the construction that is relevant here
is that the causative verb hacer appears to take an
object argument understood as the subject or agent
of the subordinate verb (the causee). However, it has
been argued that Spanish causative verbs do not in
fact take objects (Ackerman and Moore, 1999, and
refs therein). There are two arguments for this.

First, syntactic alternations that apply to object-
taking verbs, such as passivization and periphrasis
with subjunctive complements, do not apply to hacer
(Luján, 1980). Second, hacer specifies neither the
case form of the causee, nor any semantic entail-
ments with respect to it. These are instead deter-
mined by syntactic, semantic, and pragmatic factors,
such as transitivity, word order, animacy, gender, so-
cial prestige, and referential specificity (Finnemann,
1982, a.o). Thus, there is neither syntactic nor se-
mantic evidence that hacer takes an object argument.

On this basis, we assign hacer the category (23):

(23) hacer ` (s\np)/s : λPλx.cause′Px

However, Spanish has examples of cross-conjunct
extraction in which hacer hosts clitics:

(24) No
not

solo
only

le
cl.dat.3ms

ordenaron,
ordered.3p

sino que
but

le
cl.dat.3ms

hicieron
made.3p

barrer
sweep

la
the

verada.
sidewalk

“They not only ordered him to, but also made him
sweep the sidewalk.”

This shows another instance of the schema in (1),
which is undefined for any of the combinators in (3):

(25) le hicieron barrer la verada
(s\np)/((s\np)/np) (s\np)/s (s|np)
∗ ∗ ∗ >B ∗ ∗∗

3.4 Analyses Based on D

The preceding data motivates adding D rules (we re-
turn to the distribution of the modalities below):

(26) >D x/�(y/�z) y/�w ⇒ x/�(w/�z)
>D× x/×(y/×z) y\×w ⇒ x\×(w/×z)
>D�× x/�(y\×z) y/·w ⇒ x/�(w\×z)
>D×� x/×(y\�z) y\·w ⇒ x\×(w\�z)

(27) <D y\�w x\�(y\�z) ⇒ x\�(w\�z)
<D× y/×w x\×(y\×z) ⇒ x/×(w\×z)
<D�× y\·w x\�(y/×z) ⇒ x\�(w/×z)
<D×� y/·w x\×(y/�z) ⇒ x/×(w/�z)

To illustrate with example (10), one application of
>D allows you and can to combine when the auxil-
iary is given the principled type assignment s/s, and
another combines what with the result.

(28) what you can
s/�(s/�np) s/�(s\×np) s/·s

>D�×
s/�(s\×np)

>D
s/�((s\×np)/�np)

The derivation then proceeds in the usual way.
Likewise, D handles the Spanish causative con-

structions (29) straightforwardly :

(29) lo hice dormir
(s\np)/�((s\np)/�np) (s\np)/�s s/np

>D
(s\np)/�(s/�np)

>
s\np

The D-rules thus provide straightforward analy-
ses of such constructions by delivering flexible con-
stituency while maintaining CCG’s committment to
low categorial ambiguity and semantic transparency.

4 Deriving Eisner Normal Form

Adding new rules can have implications for parsing
efficiency. In this section, we show that the D rules
fit naturally within standard normal form constraints
for CCG parsing (Eisner, 1996), by providing both

329



combinatory and logical bases for D. This addition-
ally allows Eisner’s normal form constraints to be
derived as grammar internal theorems.

4.1 The Spurious Ambiguity Problem
CCG’s flexibility is useful for linguistic analy-
ses, but leads to spurious ambiguity (Wittenburg,
1987) due to the associativity introduced by the
B and T rules. This can incur a high compu-
tational cost which parsers must deal with. Sev-
eral techniques have been proposed for the prob-
lem (Wittenburg, 1987; Karttunen, 1989; Hepple
and Morrill, 1989; Eisner, 1996). The most com-
monly used are Karttunnen’s chart subsumption
check (White and Baldridge, 2003; Hockenmaier
and Steedman, 2002) and Eisner’s normal-form con-
straints (Bozsahin, 1998; Clark and Curran, 2007).

Eisner’s normal form, referred to here as Eisner
NF and paraphrased in (30), has the advantage of not
requiring comparisons of logical forms: it functions
purely on the syntactic types being combined.

(30) For a set S of semantically equivalent2 parse trees
for a string ABC, admit the unique parse tree such
that at least one of (i) or (ii) holds:

i. C is not the argument of (AB) resulting from
application of >B1+.

ii. A is not the argument of (BC) resulting from
application of <B1+.

The implication is that outputs of B1+ rules are
inert, using the terminology of Baldridge (2002).
Inert slashes are Baldridge’s (2002) encoding in
OpenCCG3 of his CTL interpretation of Steedman’s
(2000) antecedent-government feature.

Eisner derives (30) from two theorems about the
set of semantically equivalent parses that a CCG
parser will generate for a given string (see (Eisner,
1996) for proofs and discussion of the theorems):

(31) Theorem 1 : For every parse tree α, there is a se-
mantically equivalent parse-tree NF (α) in which
no node resulting from application of B or S func-
tions as the primary functor in a rule application.

(32) Theorem 2 : If NF (α) and NF (α′) are distinct
parse trees, then their model-theoretic interpreta-
tions are distinct.

2Two parse trees are semantically equivalent if: (i) their leaf
nodes have equivalent interpretations, and (ii) equivalent scope
relations hold between their respective leaf-node meanings.

3http://openccg.sourceforge.net

Eisner uses a generalized form Bn (n≥0) of compo-
sition that subsumes function application:4

(33) >Bn : x/y y$n ⇒ x$n

(34) <Bn : y$n x\y ⇒ x$n

Based on these theorems, Eisner defines NF as fol-
lows (for R, S, T as Bn or S, and Q=Bn≥1 ):

(35) Given a parse tree α:

i. If α is a lexical item, then α is in Eisner-NF.

ii. If α is a parse tree 〈R, β, γ〉 and NF (β),
NF (γ), then NF (α).

iii. If β is not in Eisner-NF, then
NF (β) = 〈Q, β1 , β2 〉, and
NF (α) = 〈S, β1 , NF (〈T, β2 , γ〉)〉.

As a parsing constraint, (30) is a filter on the set
of parses produced for a given string. It preserves all
the unique semantic forms generated for the string
while eliminating all spurious ambiguities: it is both
safe and complete.

Given the utility of Eisner NF for practical CCG
parsing, the D rules we propose should be compati-
ble with (30). This requires that the generalizations
underlying (30) apply to D as well. In the remainder
of this section, we show this in two ways.

4.2 Deriving D from B

The first is to derive the binary B rules from a unary
rule based on the unary combinator B̂:5

(36) x/y : fxy ⇒ (x/z)/(y/z) : λhzyλxz .f(hx)

We then derive D from B̂ and show that clause (iii)
of (35) holds of Q schematized over both B and D.

Applying D to an argument sequence is equiva-
lent to compound application of binary B:

(37) (((Df)g)h)x = (fg)(hx)

(38) ((((BB)f)g)h)x = ((B(fg))h)x = (fg)(hx)

Syntactically, binary B is equivalent to application
of unary B̂ to the primary functor ∆, followed by
applying the secondary functor Γ to the output of B̂
by means of function application (Jacobson, 1999):

4We use Steedman’s (Steedman, 1996) “$”-convention for
representing argument stacks of length n, for n ≥ 0.

5This is Lambek’s (1958) Division rule, also known as the
“Geach rule” (Jacobson, 1999).

330



(39) ∆ Γ

x/y y/z
>B̂

(x/z)/(y/z)
>

x/z

Bn (n ≥ 1) is derived by applying B̂ to the primary
functor n times. For example, B2 is derived by 2
applications of B̂ to the primary functor:

(40) ∆ Γ

x/y (y/w)/z
B̂

(x/w)/(y/w)
B̂

((x/w)/z)/((y/w)/z)
>

(x/w)/z

The rules for D correspond to application of B̂ to
both the primary and secondary functors, followed
by function application:

(41) ∆ Γ

x/(y/z) y/w
>B̂ >B̂

(x/(w/z))/((y/z)/(w/z)) (y/z)/(w/z)
>

x/(w/z)

As with Bn , Dn≥1 can be derived by iterative appli-
cation of B̂ to both primary and secondary functors.

Because B can be derived from B̂, clause (iii) of
(35) is equivalent to the following:

(42) If β is not in Eisner-NF, then
NF (β) = 〈FA, 〈B̂, β1 〉, β2 〉, such that
NF (α) = 〈S, β1 , NF (〈T, β2 , γ〉)〉

Interpreted in terms of B̂, both B and D involve ap-
plication of B̂ to the primary functor. It follows that
Theorem I applies directly to D simply by virtue of
the equivalence between binary B and unary-B̂+FA.

Eisner’s NF constraints can then be reinterpreted
as a constraint on B̂ requiring its output to be an inert
result category. We represent this in terms of the B̂-
rules introducing an inert slash, indicated with “!”
(adopting the convention from OpenCCG):

(43) x/y : fxy ⇒ (x/!z)/(y/!z) : λhzyλxzfhx

Hence, both binary B and D return inert functors:

(44) ∆ Γ

x/y y/z
>B̂

(x/!z)/(y/!z)
>

x/!z

(45) ∆ Γ

x/(y/z) y/w
>B̂ >B̂

(x/!(w/z))/((y/z)/!(w/z)) (y/!z)/(w/!z)
>

x/!(w/z)

The binary substitution (S) combinator can be
similarly incorporated into the system. Unary sub-
stitution Ŝ is like B̂ except that it introduces a slash
on only the argument-side of the input functor. We
stipulate that Ŝ returns a category with inert slashes:

(46) (Ŝ) (x/y)/z ⇒ (x/!z)/(y/!z)

T is by definition unary. It follows that all the binary
rules in CCG (including the D-rules) can be reduced
to (iterated) instantiations of the unary combinators
B̂, Ŝ, or T plus function application.

This provides a basis for CCG in which all com-
binatory rules are derived from unary B̂ Ŝ, and T.

4.3 A Logical Basis for Eisner Normal Form
The previous section shows that deriving CCG rules
from unary combinators allows us to derive the D-
rules while preserving Eisner NF. In this section, we
present an alternate formulation of Eisner NF with
Baldridge’s (2002) CTL basis for CCG. This for-
mulation allows us to derive the D-rules as before,
and does so in a way that seamlessly integrates with
Baldridge’s system of modalized functors.

In CTL, B� and B× are proofs derived via struc-
tural rules that allow associativity and permutation
of symbols within a sequent, in combination with
the slash introduction and elimination rules of the
base logic. To control application of these rules,
Baldridge keys them to binary modal operators � (for
associativity) and × (for permutation). Given these,
>B is proven in (47):

(47) ∆ ` x/�y Γ ` y/�z [a ` z]
[/�E]

(Γ ◦� ai) ` y
[/�E]

(∆ ◦� (Γ ◦� ai)) ` x
[RA]

((∆ ◦� Γ) ◦� ai) ` x
[/�I]

(∆ ◦� Γ) ` x/�z

In a CCG ruleset compiled from such logics, a
category must have an appropriately decorated slash
in order to be the input to a rule. This means that
rules apply universally, without language-specific

331



restrictions. Instead, restrictions can only be de-
clared via modalities marked on lexical categories.

Unary B̂ and the D rules in 4.2 can be derived us-
ing the same logic. For example, >B̂ can be derived
as in (48):

(48) ∆ ` x/�y [f ` y/�z]1 [a ` z]2
[/E]

(f1 ◦� a2 ) ` y
[/�E]

(∆ ◦� (f1 ◦� a2 )) ` x
[RA]

((∆ ◦� f1 ) ◦� a2 ) ` x
[/�I]

(∆ ◦� f1 ) ` x/�z
[/�I]

∆ ` (x/�z)/�(y/�z)

The D rules are also theorems of this system. For
example, the proof for >D applies (48) as a lemma
to each of the primary and secondary functors:

(49) ∆ ` x/�(y/�z) Γ ` y/�w
>B̂ >B̂

∆ ` (x/�(w/�z))/�((y/�z)/�(w/�z)) Γ ` (y/�z)/�(w/�z)
[/E]

(∆ ◦� Γ) ` x/�(w/�z)

>D�× involves an associative version of B̂ applied
to the primary functor (50), and a permutative ver-
sion to the secondary functor (51).

(50) ∆ ` x/�(y\×z) [f ` (y\×z)/·(w\×z)]1 [g ` w\×z]2
[/·E]

(f1 ◦· g2 ) ` y\×z
[/�E]

(∆ ◦� (f1 ◦. g2 )) ` x
[RA]

((∆ ◦� f1 ) ◦. g2 ) ` x
[/·I]

(∆ ◦� f1 ) ` x/·(w\×z)
[/�I]

∆ ` (x/·(w\×z))/�((y\×z)/·(w\×z))

(51) Γ ` y/·w [a ` z]1 [f ` w\×z]2
[\×E]

(a1 ◦× f2 ) ` w
[/·E]

(Γ ◦· (a1 ◦× f2 )) ` y
[LP ]

(a1 ◦× (Γ ◦· f2 )) ` y
[\×I]

(Γ ◦· f2 ) ` y\×z
[/·I]

Γ ` (y\×z)/·(w\×z)

Rules for D with appropriate modalities can there-
fore be incorporated seamlessly into CCG.

In the preceding subsection, we encoded Eisner
NF with inert slashes. In Baldridge’s CTL basis
for CCG, inert slashes are represented as functors
seeking non-lexical arguments, represented as cate-
gories marked with an antecedent-governed feature,

reflecting the intuition that non-lexical arguments
have to be “bound” by a superordinate functor.

This is based on an interpretation of antecedent-
government as a unary modality ♦ant that allows
structures marked by it to permute to the left or right
periphery of a structure:6

(52) ((∆a ◦× ♦ant∆b) ◦× ∆c) ` x
((∆a ◦× ∆c) ◦× ♦ant∆b) ` x

[ARP]

(∆a ◦× (♦ant∆b ◦× ∆c)) ` x
(♦ant∆b ◦× (∆a ◦× ∆c)) ` x

[ALP]

Unlike permutation rules without ♦ant , these per-
mutation rules can only be used in a proof when
preceeded by a hypothetical category marked with
the 2↓ant modality. The elimination rule for 2

↓-
modalities introduces a corresponding ♦-marked
object in the resulting structure, feeding the rule:

(53) [a ` 2↓antz]1
[2↓E]

♦anta1 ` z Γ ` y\×z
[\×E]

∆ ` x/×y (♦anta1 ◦× Γ) ` y
[/×E]

(∆ ◦× (♦anta1 ◦× Γ)) ` x
[ALP ]

[a ` ♦ant2
↓
antz]

2 (♦anta1 ◦× (∆ ◦× Γ)) ` x
[♦E]

(a ◦× (∆ ◦× Γ)) ` x
[\×I]2

(∆ ◦× Γ) ` x\×♦ant2
↓
antz

Re-introduction of the [a ` ♦ant2
↓
antz]

k hypothesis
results in a functor the argument of which is marked
with ♦ant2

↓
ant . Because lexical categories are not

marked as such, the functor cannot take a lexical ar-
gument, and so is effectively an inert functor.

In Baldridge’s (2002) system, only proofs involv-
ing the ARP and ALP rules produce inert categories.
In Eisner NF, all instances of B-rules result in inert
categories. This can be reproduced in Baldridge’s
system simply by keying all structural rules to the
ant-modality, the result being that all proofs involv-
ing structural rules result in inert functors.

As desired, the D-rules result in inert categories as
well. For example, >D is derived as follows (2↓ant
and ♦ant are abbreviated as 2↓ and ♦):

6Note that the diamond operator used here is a syntactic op-
erator, rather than a semantic operator as used in (16) above.
The unary modalities used in CTL describe accessibility rela-
tionships between subtypes and supertypes of particular cate-
gories: in effect, they define feature hierarchies. See Moortgat
(1997) and Oehrle (To Appear) for further explanation.

332



(54) Γ ` y/�w [a ` 2↓(w/�z)]1 [b ` 2↓z]2
[2↓E] [2↓E]

♦a ` w/�z ♦b ` z
[/�E]

(♦a ◦� ♦b) ` w
[/�E]

(Γ ◦� (♦a ◦� ♦b)) ` y
[RA]

[c ` ♦2↓z]3 ((Γ ◦� ♦a) ◦� ♦b) ` y
[♦E]2

((Γ ◦� ♦a) ◦� c) ` y
[/�I]3

(Γ ◦� ♦a) ` y/�♦2↓z

(55) (54)
...

∆ ` x/�(y/�♦2↓z) (Γ ◦� ♦a) ` y/�♦2↓z
[/�E]

(∆ ◦� (Γ ◦� ♦a)) ` x
[RA]

[d ` ♦2↓(w/�z)]4 ((∆ ◦� Γ) ◦� ♦a) ` x
[♦E]1

((∆ ◦� Γ) ◦� d) ` x
[/�I]4

(∆ ◦� Γ) ` x/�♦2↓(w/�z)

(54)-(55) can be used as a lemma corresponding to
the CCG rule in (57):

(56) ∆ ` x/�(y/�♦2↓z) Γ ` y/�w
[D]

(∆ ◦� Γ) ` x/�♦2↓(w/�z)

(57) x/�(y/�!z) y/�w ⇒ x/�!(w/�z)

This means that all CCG rules compiled from the
logic—which requires ♦ant to licence the structural
rules necessary to prove the rules—return inert func-
tors. Eisner NF thus falls out of the logic because all
instances of B, D, and S produce inert categories.
This in turns allows us to view Eisner NF as part of
a theory of grammatical competence, in addition to
being a useful technique for constraining parsing.

5 Conclusion

Including the D-combinator rules in the CCG rule
set lets us capture several linguistic generalizations
that lack satisfactory analyses in standard CCG.
Furthermore, CCG augmented with D is compat-
ible with Eisner NF (Eisner, 1996), a standard
technique for controlling derivational ambiguity in
CCG-parsers, and also with the modalized version
of CCG (Baldridge and Kruijff, 2003). A conse-
quence is that both the D rules and the NF con-
straints can be derived from a grammar-internal per-
spective. This extends CCG’s linguistic applicabil-
ity without sacrificing efficiency.

Wittenburg (1987) originally proposed using rules
based on D as a way to reduce spurious ambiguity,
which he achieved by eliminating B rules entirely
and replacing them with variations on D. Witten-
burg notes that doing so produces as many instances
of D as there are rules in the standard rule set. Our
proposal retains B and S, but, thanks to Eisner NF,
eliminates spurious ambiguity, a result that Witten-
burg was not able to realize at the time.

Our approach can be incorporated into Eisner NF
straightforwardly However, Eisner NF disprefers in-
cremental analyses by forcing right-corner analyses
of long-distance dependencies, such as in (58):

(58) (What (does (Grommet (think (Tottie (said (Victor
(knows (Wallace ate)))))))))?

For applications that call for increased incremental-
ity (e.g., aligning visual and spoken input incremen-
tally (Kruijff et al., 2007)), CCG rules that do not
produce inert categories can be derived a CTL ba-
sis that does not require ♦ant for associativity and
permutation. The D-rules derived from this kind of
CTL specification would allow for left-corner analy-
ses of such dependencies with the competence gram-
mar. An extracted element can “wrap around” the
words intervening between it and its extraction site.
For example, D would allow the following bracket-
ing for the same example (while producing the same
logical form):

(59) (((((((((What does) Grommet) think) Tottie) said)
Victor) knows) Wallace) ate)?

Finally, the unary combinator basis for CCG pro-
vides an interesting additional specification for gen-
erating CCG rules. Like the CTL basis, the unary
combinator basis can produce a much wider range
of possible rules, such as D rules, that may be rel-
evant for linguistic applications. Whichever basis
is used, inclusion of the D-rules increases empirical
coverage, while at the same time preserving CCG’s
computational attractiveness.

Acknowledgments

Thanks Mark Steedman for extensive comments and
suggestions, and particularly for noting the relation-
ship between the D-rules and unary B̂. Thanks
also to Emmon Bach, Cem Bozsahin, Jason Eisner,
Geert-Jan Kruijff and the ACL reviewers.

333



References
Farrell Ackerman and John Moore. 1999. Syntagmatic

and Paradigmatic Dimensions of Causee Encodings.
Linguistics and Philosophy, 24:1–44.

Avery D. Andrews and Christopher D. Manning. 1999.
Complex Predicates and Information Spreading in
LFG. CSLI Publications, Palo Alto, California.

Jason Baldridge and Geert-Jan Kruijff. 2003. Multi-
Modal Combinatory Categorial Grammar. In Proceed-
ings of EACL 10, pages 211–218.

Jason Baldridge, Sudipta Chatterjee, Alexis Palmer, and
Ben Wing. 2007. DotCCG and VisCCG: Wiki and
Programming Paradigms for Improved Grammar En-
gineering with OpenCCG. In Proceedings of GEAF
2007.

Jason Baldridge. 2002. Lexically Specified Derivational
Control in Combinatory Categorial Grammar. Ph.D.
thesis, University of Edinburgh.

John Beavers. 2004. Type-inheritance Combinatory
Categorial Grammar. In Proceedings of COLING-04,
Geneva, Switzerland.

Robert Borsley and Kersti Börjars, editors. To Appear.
Non-Transformational Syntax: A Guide to Current
Models. Blackwell.

Cem Bozsahin. 1998. Deriving the Predicate-Argument
Structure for a Free Word Order Language. In Pro-
ceedings of COLING-ACL ’98.

Stephen Clark and James Curran. 2007. Wide-Coverage
Efficient Statistical Parsing with CCG and Log-Linear
Models. Computational Linguistics, 33(4).

Haskell B. Curry and Robert Feys. 1958. Combinatory
Logic, volume 1. North Holland, Amsterdam.

Jason Eisner. 1996. Efficient Normal-Form Parsing for
Combinatory Categorial Grammars. In Proceedings of
the ACL 34.

Michael D Finnemann. 1982. Aspects of the Spanish
Causative Construction. Ph.D. thesis, University of
Minnesota.

L. T. F. Gamut. 1991. Logic, Language, and Meaning,
volume II. Chicago University Press.

Jeroen Groenendijk and Martin Stokhof. 1997. Ques-
tions. In Johan van Benthem and Alice ter Meulen,
editors, Handbook of Logic and Language, chapter 19,
pages 1055–1124. Elsevier Science, Amsterdam.

Mark Hepple and Glyn Morrill. 1989. Parsing and
Derivational Equivalence. In Proceedings of EACL 4.

Julia Hockenmaier and Mark Steedman. 2002. Gen-
erative Models for Statistical Parsing with Combina-
tory Categorial Grammar. In Proceedings. of ACL 40,
pages 335–342, Philadelpha, PA.

Pauline Jacobson. 1990. Raising as Function Composi-
tion. Linguistics and Philosophy, 13:423–475.

Pauline Jacobson. 1999. Towards a Variable-Free Se-
mantics. Linguistics and Philosophy, 22:117–184.

Lauri Karttunen. 1989. Radical Lexicalism. In Mark
Baltin and Anthony Kroch, editors, Alternative Con-
ceptions of Phrase Structure. University of Chicago
Press, Chicago.

Angelika Kratzer. 1991. Modality. In Arnim von Ste-
chow and Dieter Wunderlich, editors, Semantics: An
International Handbook of Contemporary Semantic
Research, pages 639–650. Walter de Gruyter, Berlin.

Geert-Jan M. Kruijff, Pierre Lison, Trevor Benjamin,
Henrik Jacobsson, and Nick Hawes. 2007. Incremen-
tal, Multi-Level Processing for Comprehending Situ-
ated Dialogue in Human-Robot Interaction. In Lan-
guage and Robots: Proceedings from the Symposium
(LangRo’2007), Aveiro, Portugal.

Joachim Lambek. 1958. The mathematics of sentence
structure. American Mathematical Monthly, 65:154–
169.

Marta Luján. 1980. Clitic Promotion and Mood in Span-
ish Verbal Complements. Linguistics, 18:381–484.

Michael Moortgat. 1997. Categorial Type Logics. In Jo-
han van Benthem and Alice ter Meulen, editors, Hand-
book of Logic and Language, pages 93–177. North
Holland, Amsterdam.

Richard T Oehrle. To Appear. Multi-Modal Type Log-
ical Grammar. In Boersley and Börjars (Borsley and
Börjars, To Appear).

Martin Pickering and Guy Barry. 1993. Dependency
Categorial Grammar and Coordination. Linguistics,
31:855–902.

David Reitter, Julia Hockenmaier, and Frank Keller.
2006. Priming Effects in Combinatory Categorial
Grammar. In Proceedings of EMNLP-2006.

Mark Steedman and Jason Baldridge. To Appear. Com-
binatory Categorial Grammar. In Borsley and Börjars
(Borsley and Börjars, To Appear).

Mark Steedman. 1996. Surface Structure and Interpre-
tation. MIT Press.

Mark Steedman. 2000. The Syntactic Process. MIT
Press.

Michael White and Jason Baldridge. 2003. Adapting
Chart Realization to CCG. In Proceedings of ENLG.

Michael White. 2006. Efficient Realization of Coordi-
nate Structures in Combinatory Categorial Grammar.
Research on Language and Computation, 4(1):39–75.

Kent Wittenburg. 1987. Predictive Combinators: A
Method for Efficient Processing of Combinatory Cat-
egorial Grammars. In Proceedings of ACL 25.

Luke Zettlemoyer and Michael Collins. 2007. On-
line Learning of Relaxed CCG Grammars for Parsing
to Logical Form. In Proceedings of EMNLP-CoNLL
2007.

334


