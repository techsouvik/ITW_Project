













































Unsupervised Relation Extraction by Mining Wikipedia Texts Using Information from the Web


Proceedings of the 47th Annual Meeting of the ACL and the 4th IJCNLP of the AFNLP, pages 1021–1029,
Suntec, Singapore, 2-7 August 2009. c©2009 ACL and AFNLP

Unsupervised Relation Extraction by Mining Wikipedia Texts Using
Information from the Web

Yulan Yan, Naoaki Okazaki, Yutaka Matsuo, Zhenglu Yang and Mitsuru Ishizuka
The University of Tokyo, 7-3-1 Hongo, Bunkyo-ku, Tokyo 113-8656, Japan

yulan@mi.ci.i.u-tokyo.ac.jp
okazaki@is.s.u-tokyo.ac.jp

matsuo@biz-model.t.utokyo.ac.jp
yangzl@tkl.iis.u-tokyo.ac.jp

ishizuka@i.u-tokyo.ac.jp

Abstract

This paper presents an unsupervised rela-
tion extraction method for discovering and
enhancing relations in which a specified
concept in Wikipedia participates. Using
respective characteristics of Wikipedia ar-
ticles and Web corpus, we develop a clus-
tering approach based on combinations of
patterns: dependency patterns from depen-
dency analysis of texts in Wikipedia, and
surface patterns generated from highly re-
dundant information related to the Web.
Evaluations of the proposed approach on
two different domains demonstrate the su-
periority of the pattern combination over
existing approaches. Fundamentally, our
method demonstrates how deep linguistic
patterns contribute complementarily with
Web surface patterns to the generation of
various relations.

1 Introduction

Machine learning approaches for relation extrac-
tion tasks require substantial human effort, partic-
ularly when applied to the broad range of docu-
ments, entities, and relations existing on the Web.
Even with semi-supervised approaches, which use
a large unlabeled corpus, manual construction of a
small set of seeds known as true instances of the
target entity or relation is susceptible to arbitrary
human decisions. Consequently, a need exists for
development of semantic information-retrieval al-
gorithms that can operate in a manner that is as
unsupervised as possible.

Currently, the leading methods in unsupervised
information extraction collect redundancy infor-
mation from a local corpus or use the Web as a
corpus (Pantel and Pennacchiotti, 2006); (Banko
et al., 2007); (Bollegala et al., 2007): (Fan et
al., 2008); (Davidov and Rappoport, 2008). The

standard process is to scan or search the cor-
pus to collect co-occurrences of word pairs with
strings between them, and then to calculate term
co-occurrence or generate surface patterns. The
method is used widely. However, even when pat-
terns are generated from well-written texts, fre-
quent pattern mining is non-trivial because the
number of unique patterns is loose, but many pat-
terns are non-discriminative and correlated. A
salient challenge and research interest for frequent
pattern mining is abstraction away from different
surface realizations of semantic relations to dis-
cover discriminative patterns efficiently.

Linguistic analysis is another effective tech-
nology for semantic relation extraction, as de-
scribed in many reports such as (Kambhatla,
2004); (Bunescu and Mooney, 2005); (Harabagiu
et al., 2005); (Nguyen et al., 2007). Currently, lin-
guistic approaches for semantic relation extraction
are mostly supervised, relying on pre-specification
of the desired relation or initial seed words or pat-
terns from hand-coding. The common process is
to generate linguistic features based on analyses of
the syntactic features, dependency, or shallow se-
mantic structure of text. Then the system is trained
to identify entity pairs that assume a relation and
to classify them into pre-defined relations. The ad-
vantage of these methods is that they use linguistic
technologies to learn semantic information from
different surface expressions.

As described herein, we consider integrating
linguistic analysis with Web frequency informa-
tion to improve the performance of unsupervised
relation extraction. As (Banko et al., 2007)
reported, “deep” linguistic technology presents
problems when applied to heterogeneous text on
the Web. Therefore, we do not parse informa-
tion from the Web corpus, but from well written
texts. Particularly, we specifically examine unsu-
pervised relation extraction from existing texts of
Wikipedia articles. Wikipedia resources of a fun-

1021



damental type are of concepts (e.g., represented
by Wikipedia articles as a special case) and their
mutual relations. We propose our method, which
groups concept pairs into several clusters based on
the similarity of their contexts. Contexts are col-
lected as patterns of two kinds: dependency pat-
terns from dependency analysis of sentences in
Wikipedia, and surface patterns generated from
highly redundant information from the Web.

The main contributions of this paper are as fol-
lows:

• Using characteristics of Wikipedia articles
and the Web corpus respectively, our study
yields an example of bridging the gap sep-
arating “deep” linguistic technology and re-
dundant Web information for Information
Extraction tasks.

• Our experimental results reveal that relations
are extractable with good precision using
linguistic patterns, whereas surface patterns
from Web frequency information contribute
greatly to the coverage of relation extraction.

• The combination of these patterns produces
a clustering method to achieve high pre-
cision for different Information Extraction
applications, especially for bootstrapping a
high-recall semi-supervised relation extrac-
tion system.

2 Related Work

(Hasegawa et al., 2004) introduced a method for
discovering a relation by clustering pairs of co-
occurring entities represented as vectors of con-
text features. They used a simple representation
of contexts; the features were words in sentences
between the entities of the candidate pairs.

(Turney, 2006) presented an unsupervised algo-
rithm for mining the Web for patterns expressing
implicit semantic relations. Given a word pair, the
output list of lexicon-syntactic patterns was ranked
by pertinence, which showed how well each pat-
tern expresses the relations between word pairs.

(Davidov et al., 2007) proposed a method for
unsupervised discovery of concept specific rela-
tions, requiring initial word seeds. That method
used pattern clusters to define general relations,
specific to a given concept. (Davidov and Rap-
poport, 2008) presented an approach to discover
and represent general relations present in an arbi-
trary corpus. That approach incorporated a fully

unsupervised algorithm for pattern cluster discov-
ery, which searches, clusters, and merges high-
frequency patterns around randomly selected con-
cepts.

The field of Unsupervised Relation Identifica-
tion (URI)—the task of automatically discover-
ing interesting relations between entities in large
text corpora—was introduced by (Hasegawa et
al., 2004). Relations are discovered by cluster-
ing pairs of co-occurring entities represented as
vectors of context features. (Rosenfeld and Feld-
man, 2006) showed that the clusters discovered by
URI are useful for seeding a semi-supervised rela-
tion extraction system. To compare different clus-
tering algorithms, feature extraction and selection
method, (Rosenfeld and Feldman, 2007) presented
a URI system that used surface patterns of two
kinds: patterns that test two entities together and
patterns that test either of two entities.

In this paper, we propose an unsupervised rela-
tion extraction method that combines patterns of
two types: surface patterns and dependency pat-
terns. Surface patterns are generated from the Web
corpus to provide redundancy information for re-
lation extraction. In addition, to obtain seman-
tic information for concept pairs, we generate de-
pendency patterns to abstract away from different
surface realizations of semantic relations. Depen-
dency patterns are expected to be more accurate
and less spam-prone than surface patterns from the
Web corpus. Surface patterns from redundancy
Web information are expected to address the data
sparseness problem. Wikipedia is currently widely
used information extraction as a local corpus; the
Web is used as a global corpus.

3 Characteristics of Wikipedia articles

Wikipedia, unlike the whole Web corpus, has
several characteristics that markedly facilitate in-
formation extraction. First, as an earlier report
(Giles, 2005) explained, Wikipedia articles are
much cleaner than typical Web pages. Because
the quality is not so different from standard writ-
ten English, we can use “deep” linguistic tech-
nologies, such as syntactic or dependency parsing.
Secondly, Wikipedia articles are heavily cross-
linked, in a manner resembling cross-linking of
the Web pages. (Gabrilovich and Markovitch,
2006) assumed that these links encode numerous
interesting relations among concepts, and that they
provide an important source of information in ad-

1022



dition to the article texts.
To establish the background for this paper, we

start by defining the problem under consideration:
relation extraction from Wikipedia. We use the en-
cyclopedic nature of the corpus by specifically ex-
amining the relation extraction between the enti-
tled concept (ec) and a related concept (rc), which
are described in anchor text in this article. A com-
mon assumption is that, when investigating the se-
mantics in articles such as those in Wikipedia (e.g.
semantic Wikipedia (Volkel et al., 2006)), key in-
formation related to a concept described on a page
p lies within the set of links l(p) on that page; par-
ticularly, it is likely that a salient semantic relation
r exists between p and a related page p′ ∈ l(p).

Given the scenario we described along with
earlier related works, the challenges we face are
these: 1) enumerating all potential relation types
of interest for extraction is highly problematic for
corpora as large and varied as Wikipedia; 2) train-
ing data or seed data are difficult to label. Consid-
ering (Davidov and Rappoport, 2008), which de-
scribes work to get the target word and relation
cluster given a single (‘hook’) word, their method
depends mainly on frequency information from
the Web to obtain a target and clusters. Attempt-
ing to improve the performance, our solution for
these challenges is to combine frequency informa-
tion from the Web and the “high quality” charac-
teristic of Wikipedia text.

4 Pattern Combination Method for
Relation Extraction

With the scene and challenges stated, we propose a
solution in the following way. The intuitive idea is
that we integrate linguistic technologies on high-
quality text in Wikipedia and Web mining tech-
nologies on a large-scale Web corpus. In this sec-
tion, we first provide an overview of our method
along with the function of the main modules. Sub-
sequently, we explain each module in the method
in detail.

4.1 Overview of the Method
Given a set of Wikipedia articles as input, our
method outputs a list of concept pairs for each ar-
ticle with a relation label assigned to each concept
pair. Briefly, the proposed approach has four main
modules, as depicted in Fig. 1.

• Text Preprocessor and Concept Pair Col-
lector preprocesses Wikipedia articles to

Wikipedia articles
PreprocessorConcept pair collectionSentence filtering Web context collector

Web ContextTi = t1, t2…tnPi =  p1,p2…pn
Dependency pattern Extractor

n1i,…n1j …ni2i, ..n2j ni,…nj…surface clusteringdepend clustering
Relation listOutput: relations for each article

input:

Eric Emerson SchmidtCEOa-member-ofBorn GoogleBoard of DirectorsWashington, D.C.Is-a chairmanNovellEric Emerson SchmidtCEOa-member-ofBorn GoogleBoard of DirectorsWashington, D.C.Is-a chairmanNovellEric Emerson SchmidtCEOa-member-ofBorn GoogleBoard of DirectorsWashington, D.C.Is-a chairmanNovell ......…………......………… ......…………
Tyco becomingjoined comp:CEOobj: cc:joinedobj:subj:joinedobj: cc: Clustering approach

Wikipedia articles
PreprocessorConcept pair collectionSentence filtering Web context collector

Web ContextTi = t1, t2…tnPi =  p1,p2…pn
Dependency pattern Extractor

n1i,…n1j …ni2i, ..n2j ni,…nj…surface clusteringdepend clustering
Relation listOutput: relations for each article

input:

Eric Emerson SchmidtCEOa-member-ofBorn GoogleBoard of DirectorsWashington, D.C.Is-a chairmanNovellEric Emerson SchmidtCEOa-member-ofBorn GoogleBoard of DirectorsWashington, D.C.Is-a chairmanNovellEric Emerson SchmidtCEOa-member-ofBorn GoogleBoard of DirectorsWashington, D.C.Is-a chairmanNovellEric Emerson SchmidtCEOa-member-ofBorn GoogleBoard of DirectorsWashington, D.C.Is-a chairmanNovellEric Emerson SchmidtCEOa-member-ofBorn GoogleBoard of DirectorsWashington, D.C.Is-a chairmanNovellEric Emerson SchmidtCEOa-member-ofBorn GoogleBoard of DirectorsWashington, D.C.Is-a chairmanNovell ......…………......………… ......…………
Tyco becomingjoined comp:CEOobj: cc:joinedobj:subj:joinedobj: cc: Tyco becomingjoined comp:CEOobj: cc:joinedobj:subj:joinedobj: cc: Clustering approach

Figure 1: Framework of the proposed approach

split text and filter sentences. It outputs con-
cept pairs, each of which has an accompany-
ing sentence.

• Web Context Collector collects context in-
formation from the Web and generates ranked
relational terms and surface patterns for each
concept pair.

• Dependency Pattern Extractor generates
dependency patterns for each concept pair
from corresponding sentences in Wikipedia
articles.

• Clustering Algorithm clusters concept pairs
based on their context. It consists of the two
sub-modules described below.

– Depend Clustering, which merges con-
cept pairs using dependency patterns
alone, aiming at obtaining clusters of
concept pairs with good precision;

– Surface Clustering, which clusters
concept pairs using surface patterns
based on the resultant clusters of depend
clustering. The aim is to merge more
concept pairs into existing clusters with
surface patterns to improve the coverage
of clusters.

1023



4.2 Text Preprocessor and Concept Pair
Collector

This module pre-processes Wikipedia article texts
to collect concept pairs and corresponding sen-
tences. Given a concept described in a Wikipedia
article, our idea of preprocessing executes initial
consideration of all anchor-text concepts linking
to other Wikipedia articles in the article as related
concepts that might share a semantic relation with
the entitled concept. The link structure, more par-
ticularly, the structure of outgoing links, provides
a simple mechanism for identifying relevant arti-
cles. We split text into sentences and select sen-
tences containing one reference of an entitled con-
cept and one of the linked texts for the dependency
pattern extractor module.

4.3 Web Context Collector
Querying a concept pair using a search engine
(Google), we characterize the semantic relation
between the pair by leveraging the vast size of the
Web. Our hypothesis is that there exist some key
terms and patterns that provide clues to the rela-
tions between pairs. From the snippets retrieved
by the search engine, we extract relational infor-
mation of two kinds: ranked relational terms as
keywords and surface patterns. Here surface pat-
terns are generated with support of ranked rela-
tional terms.

4.3.1 Relational Term Ranking
To collect relational terms as indicators for each
concept pair, we look for verbs and nouns from
qualified sentences in the snippets instead of sim-
ply finding verbs. Using only verbs as relational
terms might engender the loss of various important
relations, e.g. noun relations “CEO”, “founder”
between a person and a company. Therefore, for
each concept pair, a list of relational terms is col-
lected. Then all the collected terms of all concept
pairs are combined and ranked using an entropy-
based algorithm which is described in (Chen et al.,
2005). With their algorithm, the importance of
terms can be assessed using the entropy criterion,
which is based on the assumption that a term is ir-
relevant if its presence obscures the separability of
the dataset. After the ranking, we obtain a global
ranked list of relational terms Tall for the whole
dataset (all the concept pairs). For each concept
pair, a local list of relational terms Tcp is sorted ac-
cording to the terms’ order in Tall. Then from the
relational term list Tcp, a keyword tcp is selected

Table 1: Surface patterns for a concept pair

Pattern Pattern
ec ceo rc rc found ec
ceo rc found ec rc succeed as ceo of ec
rc be ceo of ec ec ceo of rc
ec assign rc as ceo ec found by ceo rc
ceo of ec rc ec found in by rc

for each concept pair cp as the first term appearing
in the term list Tcp. Keyword tcp will be used to
initialize the clustering algorithm in Section 4.5.1.

4.3.2 Surface Pattern Generation
Because simply taking the entire string between
two concept words captures an excess of extra-
neous and incoherent information, we use Tcp of
each concept pair as a key for surface pattern gen-
eration. We classified words into Content Words
(CWs) and Functional Words (FWs). From each
snippet sentence, the entitled concept, related con-
cept, or the keyword kcp is considered to be a Con-
tent Word (CW). Our idea of obtaining FWs is to
look for verbs, nouns, prepositions, and coordinat-
ing conjunctions that can help make explicit the
hidden relations between the target nouns.

Surface patterns have the following general
form.

[CW1] Infix1 [CW2] Infix2 [CW3] (1)

Therein, Infix1 and Infix2 respectively con-
tain only and any number of FWs. A pattern ex-
ample is “ec assign rc as ceo (keyword)”. All gen-
erated patterns are sorted by their frequency, and
all occurrences of the entitled concept and related
concept are replaced with “ec” and “rc”, respec-
tively for pattern matching of different concept
pairs.

Table 1 presents examples of surface patterns
for a sample concept pair. Pattern windows are
bounded by CWs to obtain patterns more precisely
because 1) if we use only the string between two
concepts, it may not contain some important re-
lational information, such as “ceo ec resign rc”
in Table 1; 2) if we generate patterns by setting
a windows surrounding two concepts, the number
of unique patterns is often exponential.

4.4 Dependency Pattern Extractor

In this section, we describe how to obtain depen-
dency patterns for relation clustering. After pre-
processing, selected sentences that contain at least

1024



one mention of an entitled concept or related con-
cept are parsed into dependency structures. We de-
fine dependency patterns as sub-paths of the short-
est dependency path between a concept pair for
two reasons. One is that the shortest path de-
pendency kernels outperform dependency tree ker-
nels by offering a highly condensed representation
of the information needed to assess their relation
(Bunescu and Mooney, 2005). The other reason
is that embedded structures of the linguistic repre-
sentation are important for obtaining good cover-
age of the pattern acquisition, as explained in (Cu-
lotta and Sorensen, 2005); (Zhang et al., 2006).
The process of inducing dependency patterns has
two steps.

1. Shortest dependency path inducement. From
the original dependency tree structure by parsing
the selected sentence for each concept pair, we
first induce the shortest dependency path with the
entitled concept and related concept.

2. Dependency pattern generation. We use
a frequent tree-mining algorithm (Zaki, 2002) to
generate sub-paths as dependency patterns from
the shortest dependency path for relation cluster-
ing.

4.5 Clustering Algorithm for Relation
Extraction

In this subsection, we present a clustering algo-
rithm that merges concept pairs based on depen-
dency patterns and surface patterns. The algorithm
is based on k-means clustering for relation cluster-
ing.

The dependency pattern has the properties of
being more accurate, but the Web context has the
advantage of containing much more redundant in-
formation than Wikipedia. Our idea of concept
pair clustering is a two-step clustering process:
first it clusters concept pairs into clusters with
good precision using dependency patterns; then it
improves the coverage of the clusters using surface
patterns.

4.5.1 Initial Centroid Selection and Distance
Function Definition

The standard k-means algorithm is affected by
the choice of seeds and the number of clusters
k. However, as we claimed in the Introduc-
tion section, because we aim to extract relations
from Wikipedia articles in an unsupervised man-
ner, cluster number k is unknown and no good
centroids can be predicted. As described in this

paper, we select centroids based on the keyword
tcp of each concept pair.

First of all, all concept pairs are grouped by
their keywords tcp. Let G = {G1, G2, ...Gn}
be the resultant groups, where each Gi =
{cpi1, cpi2, ...} identify a group of concept pairs
sharing the same keyword tcp (such as “CEO”).
We rank all the groups by their number of concept
pairs and then choose the top k groups. Then a
centroid ci is selected for each group Gi by Eq. 2.

ci = arg max
cp∈Gi

|{cpij |(dis1(cpij , cp)+
λ ∗ dis2(cpij , cp)) <= Dz, 1 ≤ j ≤ |Gi|}| (2)

We assume a centroid for each group to be the
concept pair which has the most other concept
pairs in the same group that have distance less
than Dz with it. Also, Dz is a threshold to avoid
noisy concept pairs: we assign it 1/3. To balance
the contribution between dependency patterns and
surface patterns, λ is used. The distance function
to calculate the distance between dependency pat-
tern sets DPi, DPj of two concept pairs cpi and
cpj is dis1. The distance is decided by the number
of overlapped dependency patterns with Eq. 3.

dis1(cpi, cpj) = 1−
|DPi ∩DPj |√
(|DPi| ∗ |DPj |)

(3)

Actually, dis2 is the distance function to calcu-
late distance between two surface pattern sets of
two concept pairs. To compute the distance over
surface patterns, we implement the distance func-
tion dis2(cpi, cpj) in Fig. 2.

Algorithm 1: distance function dis2(cpi, cpj)
Input: SP1 = {sp11, ..., sp1m}(surface patterns of

cpi)
SP2 = {sp21, ..., sp2n} (surface patterns of cpj)
Output: dis (distance between SP1 and SP2)
define a m× n distance matrix A:
{Aij = LD(sp1i,sp2j)Max(|sp1i|,|sp2j |) , 1≤i≤m; 1≤j≤n};
dis ← 0
for min(m, n) times do

(x, y) ← argmin0<i<m;0<j<nAij ;
dis ← dis + Axy/min(m, n);
Ax∗ ← 1; A∗y ← 1;

return dis

Figure 2: Distance function over surface patterns

As shown in Fig. 2, the distance algorithm per-
forms as: firstly it defines a m×n distance matrix
A, then repeatedly selects two nearest sequences
and sums up their distances. While computing

1025



dis2, we use the Levenshtein distance LD to mea-
sure the difference of two surface patterns. The
Levenshtein distance is a metric for measuring the
amount of difference between two sequences (i.e.,
the so-called edit distance). Each generated sur-
face pattern is a sequence of words. The distance
of two surface patterns is defined as the fraction of
the LD value to the length of the longer sequence.

For estimating the number of clusters k, we ap-
ply the stability-based criteria from (Chen et al.,
2005) to decide the number of optimal clusters k
automatically.

4.5.2 Concept Pair Clustering with
Dependency Patterns

Given the initial seed concept pairs and cluster
number k, this stage merges concept pairs over de-
pendency patterns into k clusters. Each concept
pair cpi has a set of dependency patterns DPi. We
calculate distances between two pairs cpi and cpj
using above the function dis1(cpi, cpj). The clus-
tering algorithm is portrayed in Fig. 3. The pro-
cess of depend clustering is to assign each concept
pair to the cluster with the closest centroid and
then recomputing each centroid based on the cur-
rent members of its cluster. As shown in Figure 3,
this is done iteratively by repeating both two steps
until a stopping criterion is met. We apply the ter-
mination condition as: centroids do not change be-
tween iterations.

Algorithm 2: Depend Clustering
Input: I = {cp1, ..., cpn}(all concept pairs)

C = {c1, ..., ck} (k initial centroids)
Output: Md : I → C (cluster membership)

Ir (rest of concept pairs not clustered)
Cd = {c1, ..., ck} (recomputed centroids)

while stopping criterion has not been met do
for each cpi ∈ I do

if mins∈1..k dis1(cpi, cs) <= Dl then
Md(cpi) ← argmins∈1..k dis1(cpi, cs)

else
Md(cpi) ← 0

for each j ∈ {1..k} do
recompute cj as the centroid of

{cpi|mloc(cpi) = j}
Ir ← C0
return C and Cd

Figure 3: Clustering with dependency patterns

Because many concept pairs are scattered and
do not belong to any of the top k clusters, we
filter concept pairs with distance larger than Dl
with the seed concept pairs. Such concept pairs

ST1

ST3 ST4

ST2

Text3: RC was hired as EC’s CEO Text4: EC assign RC as CEO

Text1: the CEO of EC is RC Text2: RC is the CEO of EC
ST1

ST3 ST4

ST2

Text3: RC was hired as EC’s CEO Text4: EC assign RC as CEO

Text1: the CEO of EC is RC Text2: RC is the CEO of EC

Figure 4: Example showing why surface cluster-
ing is needed

are stored in C0. We named the cluster of concept
pairs Ir which are left to be clustered in the next
step of clustering. After this step, concept pairs
with similar dependency patterns are merged into
same clusters, see Fig. 4 (ST1, ST2).

4.5.3 Concept Pair Clustering with Surface
Patterns

A salient difficulty posed by dependency pattern
clustering is that concept pairs of the same se-
mantic relation cannot be merged if they are ex-
pressed in different dependency structures. Fig-
ure 4 presents an example demonstrating why we
perform surface pattern clustering. As depicted
in Fig. 4, ST1, ST2, ST3, and ST4 are depen-
dency structures for four concept pairs that should
be classified as the same relation “CEO”. However
ST3 and ST4 can not be merged with ST1 and
ST2 using the dependency patterns because their
dependency structures are too diverse to share suf-
ficient dependency patterns.

In this step, we use surface patterns to merge
more concept pairs for each cluster to improve the
coverage. Figure 5 portrays the algorithm. We
assume that each concept pair has a set of sur-
face patterns from the Web context collector mod-
ule. As shown in Figure 5, surface clustering is
done iteratively by repeating two steps until a stop-
ping criterion is met: using the distance function
dis2 explained in the preceding section, assign
each concept pair to the cluster with the closest
centroid and recomputing each centroid based on
the current members of its cluster. We apply the
same termination condition as depend clustering.

1026



Additionally, we filter concept pairs with distance
greater than Dg with the centroid concept pairs.

Algorithm 3: Surface Clustering
Input: Ir (rest of concept pairs)

Cd = {c1, ..., ck} (initial centroids)
Output: Ms : Ir → C (cluster membership)

Cs = {c1, ..., ck} (final centroids)
while stopping criterion has not been met do

for each cpi ∈ Ir do
if mins∈1..k dis2(cpi, cs) <= Dg then

Ms(cpi) ← argmins∈1..k dis2(cpi, cs)
else

Ms(cpi) ← 0
for each j ∈ 1..k do

recompute cj as the centroid of cluster
{cpi|Md(cpi) = j ∨Ms(cpi) = j}

return clusters C

Figure 5: Clustering with surface patterns

Finally we have k clusters of concept pairs, each
of which has a centroid concept pair. To attach
a single relation label to each cluster, we use the
centroid concept pair.

5 Experiments

We apply our algorithm to two categories in
Wikipedia: “American chief executives” and
“Companies”. Both categories are well defined
and closed. We conduct experiments for extract-
ing various relations and for measuring the quality
of these relations in terms of precision and cover-
age. We use coverage as an evaluation instead of
using recall as a measure. The coverage is used to
evaluate all correctly extracted concept pairs. It is
defined as the fraction of all the correctly extracted
concept pairs to the whole set of concept pairs. To
balance between precision and coverage of clus-
tering, we integrate two parameters: Dl, Dg.

We downloaded the Wikipedia dump as of De-
cember 3, 2008. The performance of the pro-
posed method is evaluated using different pattern
types: dependency patterns, surface patterns, and
their combination. We compare our method with
(Rosenfeld and Feldman, 2007)’s URI method.
Their algorithm outperformed that presented in the
earlier work using surface features of two kinds for
unsupervised relation extraction: features that test
two entities together and features that test only one
entity each. For comparison, we use a k-means
clustering algorithm using the same cluster num-
ber k.

Table 2: Results for the category: “American chief
executives”

method Existing method Proposed method
(Rosenfeld et al.) (Our method)

Relation # Ins. pre # Ins. pre
(sample)
chairman 434 63.52 547 68.37
(x be chairman of y)
ceo 396 73.74 423 77.54
(x be ceo of y)
bear 138 83.33 276 86.96
(x be bear in y)
attend 225 67.11 313 70.28
(x attend y)
member 14 85.71 175 91.43
(x be member of y)
receive 97 67.97 117 73.53
(x receive y)
graduate 18 83.33 92 88.04
(x graduate from y)
degree 5 80.00 78 82.05
(x obtain y degree)
marry 55 41.67 74 61.25
(x marry y)
earn 23 86.96 51 88.24
(x earn y)
award 23 43.47 46 84.78
(x won y award)
hold 5 80.00 37 72.97
(x hold y degree)
become 35 74.29 37 81.08
(x become y)
director 24 67.35 29 79.31
(x be director of y)
die 18 77.78 19 84.21
(x die in y)
all 1510 68.27 2314 75.63

5.1 Wikipedia Category: “American chief
executives”

We choose appropriate Dl(concept pair filter in
depend clustering) and Dg(concept pair filter in
surface clustering) in a development set. To bal-
ance precision and coverage, we set 1/3 for both
Dl and Dg.

The 526 articles in this category are used for
evaluation. We obtain 7310 concept pairs from
the articles as our dataset. The top 18 groups are
chosen to obtain the centroid concept pairs. Of
these, 15 binary relations are the clearly identifi-
able relations shown in Table 2, where # Ins. rep-
resents the number of concept pairs clustered us-
ing each method, and pre denotes the precision of
each cluster.

The proposed approach shows higher precision
and better coverage than URI in Table 2. This
result demonstrates that adding dependency pat-
terns from linguistic analysis contributes more to
the precision and coverage of the clustering task
than the sole use of surface patterns.

1027



Table 3: Performance of different pattern types
Pattern type #Instance Precision Coverage
dependency 1127 84.29 13.00%
surface 1510 68.27 14.10%
Combined 2314 75.63 23.94%

Table 4: Results for the category: “Companies”
Method Existing method Proposed method

(Rosenfeld et al.) (Our method)
Relation # Ins. pre # Ins. pre
(sample)
found 82 75.61 163 84.05
(found x in y)
base 82 76.83 122 82.79
(x be base in y)
headquarter 23 86.97 120 89.34
(x be headquarter in y)
service 37 51.35 108 69.44
(x offer y service)
store 113 77.88 88 72.72
(x open store in y)
acquire 59 62.71 70 64.28
(x acquire y)
list 51 64.71 67 70.15
(x list on y)
product 25 76.00 57 77.19
(x produce y)
CEO 37 64.86 39 66.67
(ceo x found y)
buy 53 62.26 37 56.76
(x buy y)
establish 35 82.86 26 80.77
(x be establish in y)
locate 14 50.00 24 75.00
(x be locate in y)
all 685 71.03 1039 76.87

To examine the contribution of dependency pat-
terns, we compare results obtained with patterns
of different kinds. Table 3 shows the precision and
coverage scores. The best precision is achieved by
dependency patterns. The precision is markedly
better than that of surface patterns. However, the
coverage is worse than that by surface patterns. As
we reported, many concept pairs are scattered and
do not belong to any of the top k clusters, the cov-
erage is low.

5.2 Wikipedia Category: “Companies”

We also evaluate the performance for the “Com-
panies” category. Instead of using all the arti-
cles, we randomly select 434 articles for evalua-
tion and 4073 concept pairs from the articles form
our dataset for this category. We also set Dl and
Dg to 1/3. Then 28 groups are chosen. For each
group, a centroid concept pair is obtained. Finally,
of 28 clusters, 25 binary relations are clearly iden-
tifiable relations. Table 4 presents some relations.

Table 5: Performance of different pattern types
Pattern type #Instance Precision Coverage
dependency 551 82.58 11.17%
surface 685 71.03 11.95%
Combined 1039 76.87 19.61%

Our clustering algorithms use two filters Dl and
Dg to filter scattering concept pairs. In Table 4, we
present that concept pairs are clustered with good
precision. As in the first experiments, the combi-
nation of dependency patterns and surface patterns
contribute greatly to the precision and coverage.
Table 5 shows that, using dependency patterns,
the precision is the highest (82.58%), although the
coverage is the lowest.

All experimental results support our idea
mainly in two aspects: 1) Dependency analysis
can abstract away from different surface realiza-
tions of text. In addition, embedded structures of
the dependency representation are important for
obtaining a good coverage of the pattern acqui-
sition. Furthermore, the precision is better than
that of the string surface patterns from Web pages
of various kinds. 2) Surface patterns are used to
merge concept pairs with relations represented in
different dependency structures with redundancy
information from the vast size of Web pages. Us-
ing surface patterns, more concept pairs are clus-
tered, and the coverage is improved.

6 Conclusions

To discover a range of semantic relations from
a large corpus, we present an unsupervised rela-
tion extraction method using deep linguistic in-
formation to alleviate surface and noisy surface
patterns generated from a large corpus, and use
Web frequency information to ease the sparse-
ness of linguistic information. We specifically ex-
amine texts from Wikipedia articles. Relations
are gathered in an unsupervised way over pat-
terns of two types: dependency patterns by parsing
sentences in Wikipedia articles using a linguistic
parser, and surface patterns from redundancy in-
formation from the Web corpus using a search en-
gine. We report our experimental results in com-
parison to those of previous works. The results
show that the best performance arises from a com-
bination of dependency patterns and surface pat-
terns.

1028



References
Michele Banko, Michael J. Cafarella, Stephen Soder-

land, Matt Broadhead and Oren Etzioni. 2007.
Open information extraction from the Web. In Pro-
ceedings of IJCAI-2007.

Danushka Bollegala, Yutaka Matsuo and Mitsuru
Ishizuka. 2007. Measuring Semantic Similarity be-
tween Words Using Web Search Engines. In Pro-
ceedings of WWW-2007.

Razvan C. Bunescu and Raymond J. Mooney. 2005. A
shortest path dependency kernel for relation extrac-
tion. In Proceedings of HLT/EMLNP-2005.

Jinxiu Chen, Donghong Ji, Chew Lim Tan and
Zhengyu Niu. 2005. Unsupervised Feature Se-
lection for Relation Extraction. In Proceedings of
IJCNLP-2005.

Aron Culotta and Jeffrey Sorensen. 2004. Dependency
tree kernels for relation extraction. In Proceedings
of the ACL-2004.

Dmitry Davidov, Ari Rappoport and Moshe Koppel.
2007. Fully unsupervised discovery of concept-
specific relationships by Web mining. In Proceed-
ings of ACL-2007.

Dmitry Davidov and Ari Rappoport. 2008. Classifi-
cation of Semantic Relationships between Nominals
Using Pattern Clusters. In Proceedings of ACL-
2008.

Wei Fan, Kun Zhang, Hong Cheng, Jing Gao, Xifeng
Yan, Jiawei Han, Philip S. Yu and Olivier Ver-
scheure. 2008. Direct Mining of Discriminative and
Essential Frequent Patterns via Model-based Search
Tree. In Proceedings of KDD-2008.

Evgeniy Gabrilovich and Shaul Markovitch. 2006.
Overcoming the brittleness bottleneck using
wikipedia: Enhancing text categorization with
encyclopedic knowledge. In Proceedings of
AAAI-2006.

Jim Giles. 2005. Internet encyclopaedias go head to
head. Nature 438:900C901.

Sanda Harabagiu, Cosmin Adrian Bejan and Paul
Morarescu. 2005. Shallow semantics for relation
extraction. In Proceedings of IJCAI-2005.

Takaaki Hasegawa, Satoshi Sekine and Ralph Grish-
man. 2004. Discovering Relations among Named
Entities from Large Corpora. In Proceedings of
ACL-2004.

Nanda Kambhatla. 2004. Combining lexical, syntactic
and semantic features with maximum entropy mod-
els. In Proceedings of ACL-2004.

Dat P.T. Nguyen, Yutaka Matsuo and Mitsuru Ishizuka.
2007. Relation extraction from Wikipedia using sub-
tree mining. In Proceedings of AAAI-2007.

Patrick Pantel and Marco Pennacchiotti. 2006.
Espresso: Leveraging generic patterns for automat-
ically harvesting semantic relations. In Proceedings
of ACL-2006.

Benjamin Rosenfeld and Ronen Feldman. 2006.
URES: an Unsupervised Web Relation Extraction
System. In Proceedings of COLING/ACL-2006.

Benjamin Rosenfeld and Ronen Feldman. 2007. Clus-
tering for Unsupervised Relation Identification. In
Proceedings of CIKM-2007.

Peter D. Turney. 2006. Expressing implicit seman-
tic relations without supervision. In Proceedings of
ACL-2006.

Max Volkel, Markus Krotzsch, Denny Vrandecic,
Heiko Haller and Rudi Studer. 2006. Semantic
wikipedia. In Proceedings of WWW-2006.

Mohammed J. Zaki. 2002. Efficiently mining frequent
trees in a forest. In Proceedings of SIGKDD-2002.

Min Zhang, Jie Zhang, Jian Su and Guodong Zhou.
2006. A Composite Kernel to Extract Relations be-
tween Entities with both Flat and Structured Fea-
tures. In Proceedings of ACL-2006.

1029


