






















































An Earley Parsing Algorithm for Range Concatenation Grammars


Proceedings of the ACL-IJCNLP 2009 Conference Short Papers, pages 9–12,
Suntec, Singapore, 4 August 2009. c©2009 ACL and AFNLP

An Earley Parsing Algorithm for Range Concatenation Grammars

Laura Kallmeyer
SFB 441

Universität Tübingen
72074 Tübingen, Germany
lk@sfs.uni-tuebingen.de

Wolfgang Maier
SFB 441

Universität Tübingen
72074 Tübingen, Germany
wo.maier@uni-tuebingen.de

Yannick Parmentier
CNRS - LORIA
Nancy Université

54506 Vandœuvre, France
parmenti@loria.fr

Abstract

We present a CYK and an Earley-style
algorithm for parsing Range Concatena-
tion Grammar (RCG), using the deduc-
tive parsing framework. The characteris-
tic property of the Earley parser is that we
use a technique of range boundary con-
straint propagation to compute the yields
of non-terminals as late as possible. Ex-
periments show that, compared to previ-
ous approaches, the constraint propagation
helps to considerably decrease the number
of items in the chart.

1 Introduction

RCGs (Boullier, 2000) have recently received a
growing interest in natural language processing
(Søgaard, 2008; Sagot, 2005; Kallmeyer et al.,
2008; Maier and Søgaard, 2008). RCGs gener-
ate exactly the class of languages parsable in de-
terministic polynomial time (Bertsch and Neder-
hof, 2001). They are in particular more pow-
erful than linear context-free rewriting systems
(LCFRS) (Vijay-Shanker et al., 1987). LCFRS is
unable to describe certain natural language phe-
nomena that RCGs actually can deal with. One
example are long-distance scrambling phenom-
ena (Becker et al., 1991; Becker et al., 1992).
Other examples are non-semilinear constructions
such as case stacking in Old Georgian (Michaelis
and Kracht, 1996) and Chinese number names
(Radzinski, 1991). Boullier (1999) shows that
RCGs can describe the permutations occurring
with scrambling and the construction of Chinese
number names.

Parsing algorithms for RCG have been intro-
duced by Boullier (2000), who presents a di-
rectional top-down parsing algorithm using pseu-
docode, and Barthélemy et al. (2001), who add an
oracle to Boullier’s algorithm. The more restricted

class of LCFRS has received more attention con-
cerning parsing (Villemonte de la Clergerie, 2002;
Burden and Ljunglöf, 2005). This article proposes
new CYK and Earley parsers for RCG, formulat-
ing them in the framework of parsing as deduction
(Shieber et al., 1995). The second section intro-
duces necessary definitions. Section 3 presents a
CYK-style algorithm and Section 4 extends this
with an Earley-style prediction.

2 Preliminaries

The rules (clauses) of RCGs1 rewrite predicates
ranging over parts of the input by other predicates.
E.g., a clause S(aXb)→ S(X) signifies that S is
true for a part of the input if this part starts with an
a, ends with a b, and if, furthermore, S is also true
for the part between a and b.

Definition 1. A RCG G = 〈N,T, V, P, S〉 con-
sists of a) a finite set of predicates N with an arity
function dim: N → N \ {0} where S ∈ N is
the start predicate with dim(S) = 1, b) disjoint fi-
nite sets of terminals T and variables V , c) a finite
set P of clauses ψ0 → ψ1 . . . ψm, where m ≥ 0
and each of the ψi, 0 ≤ i ≤ m, is a predicate of
the form Ai(α1, . . . , αdim(Ai)) with Ai ∈ N and
αj ∈ (T ∪ V )∗ for 1 ≤ j ≤ dim(Ai).

Central to RCGs is the notion of ranges on
strings.

Definition 2. For every w = w1 . . . wn with
wi ∈ T (1 ≤ i ≤ n), we define a) Pos(w) =
{0, . . . , n}. b) 〈l, r〉 ∈ Pos(w) × Pos(w) with
l ≤ r is a range in w. Its yield 〈l, r〉(w) is the
substring wl+1 . . . wr. c) For two ranges ρ1 =
〈l1, r1〉, ρ2 = 〈l2, r2〉: if r1 = l2, then ρ1 · ρ2 =
〈l1, r2〉; otherwise ρ1 · ρ2 is undefined. d) A vec-
tor φ = (〈x1, y1〉, . . . , 〈xk, yk〉) is a range vector
of dimension k in w if 〈xi, yi〉 is a range in w for
1 ≤ i ≤ k. φ(i).l (resp. φ(i).r) denotes then the

1In this paper, by RCG, we always mean positive RCG,
see Boullier (2000) for details.

9



first (resp. second) component of the ith element
of φ, that is xi (resp. yi).

In order to instantiate a clause of the grammar,
we need to find ranges for all variables in the
clause and for all occurrences of terminals. For
convenience, we assume the variables in a clause
and the occurrences of terminals to be equipped
with distinct subscript indices, starting with 1 and
ordered from left to right (where for variables,
only the first occurrence is relevant for this order).
We introduce a function Υ : P → N that gives the
maximal index in a clause, and we define Υ(c, x)
for a given clause c and x a variable or an occur-
rence of a terminal as the index of x in c.

Definition 3. An instantiation of a c ∈ P with
Υ(c) = j w.r.t. to some string w is given by a
range vector φ of dimension j. Applying φ to
a predicate A(~α) in c maps all occurrences of
x ∈ (T ∪ V ) with Υ(c, x) = i in ~α to φ(i). If
the result is defined (i.e., the images of adjacent
variables can be concatenated), it is called an in-
stantiated predicate and the result of applying φ to
all predicates in c, if defined, is called an instanti-
ated clause.

We also introduce range constraint vectors, vec-
tors of pairs of range boundary variables together
with a set of constraints on these variables.

Definition 4. Let Vr = {r1, r2, . . . } be a set
of range boundary variables. A range constraint
vector of dimension k is a pair 〈~ρ, C〉 where a)
~ρ ∈ (V 2r )k; we define Vr(~ρ) as the set of range
boundary variables occurring in ~ρ. b) C is a set
of constraints cr that have one of the following
forms: r1 = r2, k = r1, r1 + k = r2,
k ≤ r1, r1 ≤ k, r1 ≤ r2 or r1 + k ≤ r2
for r1, r2 ∈ Vr(~ρ) and k ∈ N.

We say that a range vector φ satisfies a range
constraint vector 〈ρ, C〉 iff φ and ρ are of the same
dimension k and there is a function f : Vr → N
that maps ρ(i).l to φ(i).l and ρ(i).r to φ(i).r for
all 1 ≤ i ≤ k such that all constraints in C are sat-
isfied. Furthermore, we say that a range constraint
vector 〈ρ, C〉 is satisfiable iff there exists a range
vector φ that satisfies it.

Definition 5. For every clause c, we define its
range constraint vector 〈ρ, C〉 w.r.t. aw with |w| =
n as follows: a) ρ has dimension Υ(c) and all
range boundary variables in ρ are pairwise differ-
ent. b) For all 〈r1, r2〉 ∈ ρ: 0 ≤ r1, r1 ≤ r2,
r2 ≤ n ∈ C. For all occurrences x of terminals

in cwith i = Υ(c, x): ρ(i).l+1 = ρ(i).r ∈ C. For
all x, y that are variables or occurrences of termi-
nals in c such that xy is a substring of one of the
arguments in c: ρ(Υ(c, x)).r = ρ(Υ(c, y)).l ∈ C.
These are all constraints in C.

The range constraint vector of a clause c cap-
tures all information about boundaries forming a
range, ranges containing only a single terminal,
and adjacent variables/terminal occurrences in c.

An RCG derivation consists of rewriting in-
stantiated predicates applying instantiated clauses,
i.e. in every derivation step Γ1 ⇒w Γ2, we re-
place the lefthand side of an instantiated clause
with its righthand side (w.r.t. a word w). The lan-
guage of an RCG G is the set of strings that can
be reduced to the empty word: L(G) = {w |
S(〈0, |w|〉) +⇒G,w ε}.

The expressive power of RCG lies beyond mild
context-sensitivity. As an example, consider the
RCG from Fig. 3 that generates a language that is
not semilinear.

For simplicity, we assume in the following with-
out loss of generality that empty arguments (ε)
occur only in clauses whose righthand sides are
empty.2

3 Directional Bottom-Up Chart Parsing

In our directional CYK algorithm, we move a dot
through the righthand side of a clause. We there-
fore have passive items [A, φ] where A is a pred-
icate and φ a range vector of dimension dim(A)
and active items. In the latter, while traversing
the righthand side of the clause, we keep a record
of the left and right boundaries already found
for variables and terminal occurrences. This is
achieved by subsequently enriching the range con-
straint vector of the clause. Active items have the
form [A(~x)→ Φ •Ψ, 〈ρ, C〉] with A(~x)→ ΦΨ a
clause, ΦΨ 6= ε, Υ(A(~x → ΦΨ)) = j and 〈ρ, C〉
a range constraint vector of dimension j. We re-
quire that 〈ρ, C〉 be satisfiable.3

2Any RCG can be easily transformed into an RCG satis-
fying this condition: Introduce a new unary predicate Eps
with a clause Eps(ε) → ε. Then, for every clause c with
righthand side not ε, replace every argument ε that occurs in
c with a new variable X (each time a distinct one) and add
the predicate Eps(X) to the righthand side of c.

3Items that are distinguished from each other only by a bi-
jection of the range variables are considered equivalent. I.e.,
if the application of a rule yields a new item such that an
equivalent one has already been generated, this new one is
not added to the set of partial results.

10



Scan:
[A, φ]

A(~x)→ ε ∈ P with instantiation ψ
such that ψ(A(~x)) = A(φ)

Initialize:
[A(~x)→ •Φ, 〈ρ,C〉]

A(~x)→ Φ ∈ P with
range constraint vector
〈ρ,C〉,Φ 6= ε

Complete:
[B,φB ],

[A(~x)→ Φ •B(x1...y1, ..., xk...yk)Ψ, 〈ρ,C〉]
[A(~x)→ ΦB(x1...y1, ..., xk...yk) •Ψ, 〈ρ,C′〉]

where C′ = C ∪ {φB(j).l = ρ(Υ(xj)).l, φB(j).r =
ρ(Υ(yj)).r | 1 ≤ j ≤ k}.

Convert:
[A(~x)→ Ψ•, 〈ρ,C〉]

[A, φ]

A(~x)→ Ψ ∈ P with
an instantiation ψ that
satisfies 〈ρ,C〉,
ψ(A(~x)) = A(φ)

Goal: [S, (〈0, n〉)]

Figure 1: CYK deduction rules

The deduction rules are shown in Fig. 1. The
first rule scans the yields of terminating clauses.
Initialize introduces clauses with the dot on the
left of the righthand side. Complete moves the dot
over a predicate provided a corresponding passive
item has been found. Convert turns an active item
with the dot at the end into a passive item.

4 The Earley Algorithm

We now add top-down prediction to our algorithm.
Active items are as above. Passive items have
an additional flag p or c depending on whether
the item is predicted or completed, i.e., they ei-
ther have the form [A, 〈ρ, C〉, p] where 〈ρ, C〉 is a
range constraint vector of dimension dim(A), or
the form [A, φ, c] where φ is a range vector of di-
mension dim(A).

Initialize:
[S, 〈(〈r1, r2〉), {0 = r1, n = r2}〉, p]

Predict-rule:
[A, 〈ρ,C〉, p]

[A(x1 . . . y1, . . . , xk . . . yk)→ •Ψ, 〈ρ′, C′〉]
where 〈ρ′, C′〉 is obtained from the range constraint vector
of the clause A(x1 . . . y1, . . . , xk . . . yk) → Ψ by taking all
constraints from C, mapping all ρ(i).l to ρ′(Υ(xi)).l and
all ρ(i).r to ρ′(Υ(yi)).r, and then adding the resulting con-
straints to the range constraint vector of the clause.
Predict-pred:
[A(...)→ Φ •B(x1...y1, ..., xk...yk)Ψ, 〈ρ,C〉]

[B, 〈ρ′, C′〉, p]
where ρ′(i).l = ρ(Υ(xi)).l, ρ′(i).r = ρ(Υ(yi)).r for all
1 ≤ i ≤ k and C′ = {c | c ∈ C, c contains only range
variables from ρ′}.

Scan:
[A, 〈ρ,C〉, p]

[A, φ, c]

A(~x)→ ε ∈ P with an
instantiation ψ satisfying 〈ρ,C〉
such that ψ(A(~x)) = A(φ)

Figure 2: Earley deduction rules

The deduction rules are listed in Fig. 2. The

axiom is the prediction of an S ranging over the
entire input (initialize). We have two predict op-
erations: Predict-rule predicts active items with
the dot on the left of the righthand side, for a
given predicted passive item. Predict-pred pre-
dicts a passive item for the predicate following the
dot in an active item. Scan is applied whenever a
predicted predicate can be derived by an ε-clause.
The rules complete and convert are the ones from
the CYK algorithm except that we add flags c to
the passive items occurring in these rules. The
goal is again [S, (〈0, n〉), c].

To understand how this algorithm works, con-
sider the example in Fig. 3. The crucial property of
this algorithm, in contrast to previous approaches,
is the dynamic updating of a set of constraints on
range boundaries. We can leave range boundaries
unspecified and compute their values in a more in-
cremental fashion instead of guessing all ranges of
a clause at once at prediction.4

For evaluation, we have implemented a direc-
tional top-down algorithm where range bound-
aries are guessed at prediction (this is essentially
the algorithm described in Boullier (2000)), and
the new Earley-style algorithm. The algorithms
were tested on different words of the language
L = {a2n |n ≤ 0}. Table 1 shows the number
of generated items.

Word Earley TD
a2 15 21
a4 30 55
a8 55 164
a9 59 199

Word Earley TD
a16 100 539
a30 155 1666
a32 185 1894
a64 350 6969

Table 1: Items generated by both algorithms

Clearly, range boundary constraint propagation
increases the amount of information transported
in single items and thereby decreases considerably
the number of generated items.

5 Conclusion and future work

We have presented a new CYK and Earley pars-
ing algorithms for the full class of RCG. The cru-
cial difference between previously proposed top-
down RCG parsers and the new Earley-style algo-
rithm is that while the former compute all clause
instantiations during predict operations, the latter

4Of course, the use of constraints makes comparisons be-
tween items more complex and more expensive which means
that for an efficient implementation, an integer-based repre-
sentation of the constraints and adequate techniques for con-
straint solving are required.

11



Grammar for {a2n |n > 0}: S(XY )→ S(X)eq(X,Y ), S(a1)→ ε, eq(a1X, a2Y )→ eq(X,Y ), eq(a1, a2)→ ε
Parsing trace for w = aa:

Item Rule
1 [S, 〈(〈r1, r2〉), {0 = r1, r1 ≤ r2, 2 = r2}〉, p] initialize
2 [S(XY )→ •S(X)eq(X,Y ), {X.l ≤ X.r,X.r = Y.l, Y.l ≤ Y.r, 0 = X.l, 2 = Y.r}] predict-rule from 1
3 [S, 〈(〈r1, r2〉), {0 = r1, r1 ≤ r2}〉, p] predict-pred from 2
4 [S, (〈0, 1〉), c] scan from 3
5 [S(XY )→ •S(X)eq(X,Y ), {X.l ≤ X.r,X.r = Y.l, Y.l ≤ Y.r, 0 = X.l, }] predict-rule from 3
6 [S(XY )→ S(X) • eq(X,Y ), {. . . , 0 = X.l, 2 = Y.r, 1 = X.r}] complete 2 with 4
7 [S(XY )→ S(X) • eq(X,Y ), {X.l ≤ X.r,X.r = Y.l, Y.l ≤ Y.r, 0 = X.l, 1 = X.r}] complete 5 with 4
8 [eq, 〈(〈r1, r2〉, 〈r3, r4〉), {r1 ≤ r2, r2 = r3, r3 ≤ r4, 0 = r1, 2 = r4, 1 = r2}〉] predict-pred from 6
9 [eq(a1X, a2Y )→ •eq(X,Y ), {a1.l + 1 = a1.r, a1.r = X.l,X.l ≤ X.r,

a2.l + 1 = a2.r, a2.r = Y.l, Y.l ≤ Y.r,X.r = a2.l, 0 = a1.l, 1 = X.r, 2 = Y.r}] predict-rule from 8
. . .

10 [eq, (〈0, 1〉, 〈1, 2〉), c] scan 8
11 [S(XY )→ S(X)eq(X,Y )•, {. . . , 0 = X.l, 2 = Y.r, 1 = X.r, 1 = Y.l}] complete 6 with 10
12 [S, (〈0, 2〉), c] convert 11

Figure 3: Trace of a sample Earley parse

avoids this using a technique of dynamic updating
of a set of constraints on range boundaries. Exper-
iments show that this significantly decreases the
number of generated items, which confirms that
range boundary constraint propagation is a viable
method for a lazy computation of ranges.

The Earley parser could be improved by allow-
ing to process the predicates of the righthand sides
of clauses in any order, not necessarily from left
to right. This way, one could process predicates
whose range boundaries are better known first. We
plan to include this strategy in future work.

References
François Barthélemy, Pierre Boullier, Philippe De-

schamp, and Éric de la Clergerie. 2001. Guided
parsing of Range Concatenation Languages. In Pro-
ceedings of ACL, pages 42–49.

Tilman Becker, Aravind K. Joshi, and Owen Rambow.
1991. Long-distance scrambling and tree adjoining
grammars. In Proceedings of EACL.

Tilman Becker, Owen Rambow, and Michael Niv.
1992. The Derivationel Generative Power of Formal
Systems or Scrambling is Beyond LCFRS. Tech-
nical Report IRCS-92-38, Institute for Research in
Cognitive Science, University of Pennsylvania.

E. Bertsch and M.-J. Nederhof. 2001. On the complex-
ity of some extensions of RCG parsing. In Proceed-
ings of IWPT 2001, pages 66–77, Beijing, China.

Pierre Boullier. 1999. Chinese numbers, mix, scram-
bling, and range concatenation grammars. In Pro-
ceedings of EACL, pages 53–60, Bergen, Norway.

Pierre Boullier. 2000. Range concatenation grammars.
In Proceedings of IWPT 2000, pages 53–64, Trento.

Håkan Burden and Peter Ljunglöf. 2005. Parsing lin-
ear context-free rewriting systems. In Proceedings
of IWPT 2005, pages 11–17, Vancouver.

Laura Kallmeyer, Timm Lichte, Wolfgang Maier, Yan-
nick Parmentier, and Johannes Dellert. 2008. De-
veloping an MCTAG for German with an RCG-
based parser. In Proceedings of LREC-2008, Mar-
rakech, Morocco.

Wolfgang Maier and Anders Søgaard. 2008. Tree-
banks and mild context-sensitivity. In Proceedings
of the 13th Conference on Formal Grammar 2008,
Hamburg, Germany.

Jens Michaelis and Marcus Kracht. 1996. Semilinear-
ity as a Syntactic Invariant. In Logical Aspects of
Computational Linguistics, Nancy.

Daniel Radzinski. 1991. Chinese number-names, tree
adjoining languages, and mild context-sensitivity.
Computational Linguistics, 17:277–299.

Benoı̂t Sagot. 2005. Linguistic facts as predicates over
ranges of the sentence. In Proceedings of LACL 05,
number 3492 in Lecture Notes in Computer Science,
pages 271–286, Bordeaux, France. Springer.

Stuart M. Shieber, Yves Schabes, and Fernando C. N.
Pereira. 1995. Principles and implementation of
deductive parsing. Journal of Logic Programming,
24(1& 2):3–36.

Anders Søgaard. 2008. Range concatenation gram-
mars for translation. In Proceedings of COLING,
Manchester, England.

K. Vijay-Shanker, David Weir, and Aravind Joshi.
1987. Characterising structural descriptions used by
various formalisms. In Proceedings of ACL.

Eric Villemonte de la Clergerie. 2002. Parsing mildly
context-sensitive languages with thread automata.
In Proceedings of COLING, Taipei, Taiwan.

12


