






















































A Novel Word Segmentation Approach for Written Languages with Word Boundary Markers


Proceedings of the ACL-IJCNLP 2009 Conference Short Papers, pages 29–32,
Suntec, Singapore, 4 August 2009. c©2009 ACL and AFNLP

A Novel Word Segmentation Approach for
Written Languages with Word Boundary Markers

Han-Cheol Cho†, Do-Gil Lee§, Jung-Tae Lee§, Pontus Stenetorp†, Jun’ichi Tsujii†and Hae-Chang Rim§
†Graduate School of Information Science and Technology, The University of Tokyo, Tokyo, Japan

§Dept. of Computer & Radio Communications Engineering, Korea University, Seoul, Korea
{hccho,pontus,tsujii}@is.s.u-tokyo.ac.jp, {dglee,jtlee,rim}@nlp.korea.ac.kr

Abstract

Most NLP applications work under the as-
sumption that a user input is error-free;
thus, word segmentation (WS) for written
languages that use word boundary mark-
ers (WBMs), such as spaces, has been re-
garded as a trivial issue. However, noisy
real-world texts, such as blogs, e-mails,
and SMS, may contain spacing errors that
require correction before further process-
ing may take place. For the Korean lan-
guage, many researchers have adopted a
traditional WS approach, which eliminates
all spaces in the user input and re-inserts
proper word boundaries. Unfortunately,
such an approach often exacerbates the
word spacing quality for user input, which
has few or no spacing errors; such is the
case, because a perfect WS model does
not exist. In this paper, we propose a
novel WS method that takes into consider-
ation the initial word spacing information
of the user input. Our method generates
a better output than the original user in-
put, even if the user input has few spacing
errors. Moreover, the proposed method
significantly outperforms a state-of-the-art
Korean WS model when the user input ini-
tially contains less than 10% spacing er-
rors, and performs comparably for cases
containing more spacing errors. We be-
lieve that the proposed method will be a
very practical pre-processing module.

1 Introduction

Word segmentation (WS) has been a fundamen-
tal research issue for languages that do not have
word boundary markers (WBMs); on the con-
trary, other languages that do have WBMs have re-
garded the issue as a trivial task. Texts segmented

with such WBMs, however, could contain a hu-
man writer’s intentional or un-intentional spacing
errors; and even a few spacing errors can cause
error-propagation for further NLP stages.

For written languages that have WBMs, such as
for the Korean language, the majority of recent
research has been based on a traditional WS ap-
proach (Nakagawa, 2004). The first step of the
traditional approach is to eliminate all spaces in
the user input, and then re-locate the proper places
to insert WBMs. One state-of-the-art Korean WS
model (Lee et al., 2007) is known to achieve a per-
formance of 90.31% word-unit precision, which is
comparable with other WS models for the Chinese
or Japanese language.

Still, there is a downside to the evaluation
method. If the user input has a few or no spac-
ing errors, traditional WS models may cause more
spacing errors than it correct because they produce
the same output regardless the word spacing states
of the user input.

In this paper, we propose a new WS method that
takes into account the word spacing information
from the user input. Our proposed method first
generates the best word spacing states for the user
input by using a traditional WS model; however
the method does not immediately apply the out-
put. Secondly, the method estimates a threshold
based on the word spacing quality of the user in-
put. Finally, the method uses the new word spac-
ing states that have probabilities that are higher
than the threshold.

The most important contribution of the pro-
posed method is that, for most cases, the method
generates an output that is better than the user in-
put. The experimental results show that the pro-
posed method produces a better output than the
user input even if the user input has less than 1%
spacing errors in terms of the character-unit pre-
cision. Moreover, the proposed method outper-
forms (Lee et al., 2007) significantly, when the

29



user input initially contains less than 10% spacing
errors, and even performs comparably, when the
input contains more than 10% errors. Based on
these results, we believe that the proposed method
would be a very practical pre-processing module
for other NLP applications.

The paper is organized as follows: Section 2 ex-
plains the proposed method. Section 3 shows the
experimental results. Finally, the last section de-
scribes the contributions of the proposed method.

2 The Proposed Method

The proposed method consists of three steps: a
baseline WS model, confidence and threshold es-
timation, and output optimization. The following
sections will explain the steps in detail.

2.1 Baseline Word Segmentation Model
We use the tri-gram Hidden Markov Model
(HMM) of (Lee et al., 2007) as the baseline WS
model; however, we adopt the Maximum Like-
lihood (ML) decoding strategy to independently
find the best word spacing states. ML-decoding
allows us to directly compare each output to the
threshold. There is little discrepancy in accuracy
when using ML-decoding, as compared to Viterbi-
decoding, as mentioned in (Merialdo, 1994).1

Let o1,n be a sequence of n-character user input
without WBMs, xt be the best word spacing state
for ot where 1 ≤ t ≤ n. Assume that xt is either 1
(space after ot) or 0 (no space after ot). Then each
best word spacing state x̂t for all t can be found by
using Equation 1.

x̂t = argmax
i∈(0,1)

P (xt = i|o1,n) (1)

= argmax
i∈(0,1)

P (o1,n, xt = i) (2)

= argmax
i∈(0,1)

∑
xt−2,xt−1

P (xt = i|xt−2, ot−1, xt−1, ot)

×
∑
xt−1

P (ot+1|ot−1, xt−1, ot, xt = i)

×
∑
xt+1

P (ot+2|ot, xt = i, ot+1, xt+1) (3)

Equation 2 is derived by applying the Bayes’
rule and by eliminating the constant denominator.
Moreover, the equation is simplified, as is Equa-
tion 3, by using the Markov assumption, and by

1In the preliminary experiment, Viterbi-decoding showed
a 0.5% higher word-unit precision.

eliminating the constant parts. Every part of Equa-
tion 3 can be calculated by adding the probabilities
of all possible combinations of xt−2, xt−1, xt+1
and xt+2 values.

The model is trained by using the relative fre-
quency information of the training data, and a
smoothing technique is applied to relieve the data-
sparseness problem which is the linear interpola-
tion of n-grams that are used in (Lee et al., 2007).

2.2 Confidence and Threshold Estimation
We set a variable threshold that is proportional to
the word spacing quality of the user input, Confi-
dence. Formally, we can define the threshold T as
a function of a confidence C, as in Equation 4.

T = f(C) (4)

Then, we define the confidence as is done in
Equation 5. Because calculating such a variable
is impossible, we estimate the value by substi-
tuting the word spacing states produced by the
baseline WS model, xWS1,n , with the correct word
spacing states, xcorrect1,n , as is done in Equation 6.
This estimation is based on the assumption that
the word spacing states of the WS model is suf-
ficiently similar to the correct word spacing states
in the character-unit precision.2

C =
# of xinputt same to x

correct
t

# of xinputt
(5)

≈ # of x
input
t same to x

WS
t

# of xinputt
(6)

≈ n
√√√√ n∏

k=1

P (x
input
k |o1,n) (7)

To handle the estimation error for short sen-
tences, we use the probability generating word
spacing states of the user input with the length nor-
malization as shown in Equation 7.

Figure 1 shows that the estimated confidence of
Equation 7 is almost linearly proportional to the
true confidence of Equation 5, thus suggesting that
the threshold T can be defined as a function of the
estimated confidence of Equation 7.3

2In the experiment with the development data, the base-
line WS model shows about 97% character-unit precision.

3The development data is generated by randomly intro-
ducing spacing errors into correctly spaced sentences. We
think that this reflects various intentional and un-intentional
error patterns of individuals.

30



20%

30%

40%

50%

60%

70%

80%

90%

100%

100% 96% 92% 88% 84% 80%

E
st

im
at

ed
 C

on
fi

d
en

ce

True Confidence

Figure 1: The relationship between estimated con-
fidence and true confidence

To keep the focus on the research subject of this
paper, we simply assume f(x) = x as in Equation
8, for the threshold function f .

T ≈ f(C) = C (8)

In the experimental results, we confirm that
even this simple threshold function can be help-
ful in improving the performance of the proposed
method against traditional WS models.

2.3 Output Optimization
After completing the two steps described in Sec-
tion 2.1 and 2.2, we have acquired the new spacing
states for the user input generated by the baseline
WS model, and the threshold measuring the word
spacing quality of the user input.

The proposed method only applies a part of the
new word spacing states to the user input, which
have probabilities that are higher than the thresh-
old; further the method discards the other new
word spacing states that have probabilities that are
lower than the threshold. By rejecting the unreli-
able output of the baseline WS model in this way,
the proposed method can effectively improve the
performance when the user input contains a rela-
tively small number of spacing errors.

3 Experimental Results

Two types of experiments have been performed.
In the first experiment, we investigate the level of
performance improvement based on different set-
tings of the user input’s word spacing error rate.
Because it is nearly impossible to obtain enough
test data for any error rate, we generate pseudo test
data in the same way that we generate develop-
ment data.4 In the second experiment, we attempt

4See Footnote 3.

figuring out whether the proposed method really
improves the word spacing quality of the user in-
put in a real-world setting.

3.1 Performance Improvement according to
the Word Spacing Error Rate of User
Input

For the first experiment, we use the Sejong corpus5

from 1998-1999 (1,000,000 Korean sentences) for
the training data, and ETRI corpus (30,000 sen-
tences) for the test data (ETRI, 1999). To gener-
ate the test data that have spacing errors, we make
twenty one copies of the test data and randomly
insert spacing errors from 0% to 20% in the same
way in which we made the development data. We
feel that this strategy can model both the inten-
tional and un-intentional human error patterns.

In Figure 2, the x-axis indicates the word spac-
ing error rate of the user input in terms of the
character-unit precision, and the y-axis shows the
word-unit precision of the output. Each graph de-
picts the word-unit precision of the test corpus,
a state-of-the-art Korean WS model (Lee et al.,
2007), the baseline WS model, and the proposed
method.

Although Lee’s model is known to perform
comparably with state-of-the-art Chinese and
Japanese WS models, it does not necessarily sug-
gest that the word spacing quality of the model’s
output is better than the user input. In Figure 2,
Lee’s model exacerbates the user input when it has
spacing errors that are lower than 3%.

The proposed method, however, produces a bet-
ter output, even if the user input has 1% spacing er-
rors. Moreover, the proposed method shows a con-
siderably better performance within the 10% spac-
ing error range, as compared to Lee’s model, al-
though the baseline WS model itself does not out-
performs Lee’s model. The performance improve-
ment in this error range is fairly significant be-
cause we found that the spacing error rate of texts
collected for the second experiment was about
9.1%.

3.2 Performance Comparison with Web Text
having Usual Error Rate

In the second experiment, we attempt finding out
whether the proposed method can be beneficial un-
der real-world circumstances. Web texts, which
consist of 1,000 erroneous sentences from famous

5Details available at: http://www.sejong.or.kr/eindex.php

31



84%

86%

88%

90%

92%

94%

96%

98%

100%

0% 2% 4% 6% 8% 10% 12% 14% 16% 18% 20%

w
or

d
-u

n
it

  p
re

ci
si

on

word spacing error rate of user input (in character-unit precision)
Test corpus Lee's model Baseline WS model Proposed method

Figure 2: Performance improvement according to the word spacing error rate of user input

Method Web Text
Test Corpus 70.89%
Lee’s Model 70.45%

Baseline WS Model 69.13%
Proposed Method 73.74%

Table 1: Performance comparison with Web text

Web portals and personal blogs, were collected
and used as the test data. Since the test data tend
to have a similar error rate to the narrow standard
deviation, we computed the overall performance
over the average word spacing error rate, which is
9.1%. The baseline WS model is trained on the
Sejong corpus, described in Section 3.1.

The test result is shown in Table 1. The
overall performance of Lee’s model, the baseline
WS model and the proposed method decreased
by roughly 18%. We hypothesize that the per-
formance degradation probably results from the
spelling errors of the test data, and the inconsis-
tencies that exist between the training data and the
test data. However, the proposed method still im-
proves the word spacing quality of the user input
by 3%, while the two traditional WS models de-
grades the quality. Such a result indicates that
the proposed method is effective for real-world
environments, as we had intended. Furthermore,
we also believe that the performance can be im-
proved if a proper training corpus is provided, or
if a spelling correction method is integrated.

4 Conclusion

In this paper, we proposed a new WS method that
uses the word spacing information of the user in-
put, for languages with WBMs. By utilizing the
user input, the proposed method effectively refines
the output of the baseline WS model and improves

the overall performance.
The most important contribution of this work is

that it produces an output that is better than the
user input even if it contains few spacing errors.
Therefore, the proposed method can be applied as
a pre-processing module for practical NLP appli-
cations without introducing a risk that would gen-
erate a worse output than the user input. Moreover,
the performance is notably better than a state-of-
the-art Korean WS model (Lee et al., 2007) within
the 10% spacing error range, which human writers
seldom exceed. It also performs comparably, even
if the user input contains more than 10% spacing
errors.

5 Acknowledgment

This work was partially supported by Grant-in-Aid
for Specially Promoted Research (MEXT, Japan)
and Special Coordination Funds for Promoting
Science and Technology (MEXT, Japan).

References
ETRI. 1999. Pos-tag guidelines. Technical report.

Electronics and Telecomminications Research Insti-
tute.

Do-Gil Lee, Hae-Chang Rim, and Dongsuk Yook.
2007. Automatic Word Spacing Using Probabilistic
Models Based on Character n-grams. IEEE Intelli-
gent Systems, 22(1):28–35.

Bernard Merialdo. 1994. Tagging English text with a
probabilistic model. Comput. Linguist., 20(2):155–
171.

Tetsuji Nakagawa. 2004. Chinese and Japanese word
segmentation using word-level and character-level
information. In COLING ’04, page 466, Morris-
town, NJ, USA. Association for Computational Lin-
guistics.

32


