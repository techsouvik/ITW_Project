






















































Do Automatic Annotation Techniques Have Any Impact on Supervised Complex Question Answering?


Proceedings of the ACL-IJCNLP 2009 Conference Short Papers, pages 329–332,
Suntec, Singapore, 4 August 2009. c©2009 ACL and AFNLP

Do Automatic Annotation Techniques Have Any Impact on Supervised
Complex Question Answering?

Yllias Chali
University of Lethbridge
Lethbridge, AB, Canada
chali@cs.uleth.ca

Sadid A. Hasan
University of Lethbridge
Lethbridge, AB, Canada
hasan@cs.uleth.ca

Shafiq R. Joty
University of British Columbia

Vancouver, BC, Canada
rjoty@cs.ubc.ca

Abstract

In this paper, we analyze the impact of
different automatic annotation methods on
the performance of supervised approaches
to the complex question answering prob-
lem (defined in the DUC-2007 main task).
Huge amount of annotated or labeled
data is a prerequisite for supervised train-
ing. The task of labeling can be ac-
complished either by humans or by com-
puter programs. When humans are em-
ployed, the whole process becomes time
consuming and expensive. So, in order
to produce a large set of labeled data we
prefer the automatic annotation strategy.
We apply five different automatic anno-
tation techniques to produce labeled data
using ROUGE similarity measure, Ba-
sic Element (BE) overlap, syntactic sim-
ilarity measure, semantic similarity mea-
sure, and Extended String Subsequence
Kernel (ESSK). The representative super-
vised methods we use are Support Vec-
tor Machines (SVM), Conditional Ran-
dom Fields (CRF), Hidden Markov Mod-
els (HMM), and Maximum Entropy (Max-
Ent). Evaluation results are presented to
show the impact.

1 Introduction

In this paper, we consider the complex question
answering problem defined in the DUC-2007 main
task1. We focus on an extractive approach of sum-
marization to answer complex questions where a
subset of the sentences in the original documents
are chosen. For supervised learning methods,
huge amount of annotated or labeled data sets are
obviously required as a precondition. The deci-
sion as to whether a sentence is important enough

1http://www-nlpir.nist.gov/projects/duc/duc2007/

to be annotated can be taken either by humans or
by computer programs. When humans are em-
ployed in the process, producing such a large la-
beled corpora becomes time consuming and ex-
pensive. There comes the necessity of using au-
tomatic methods to align sentences with the in-
tention to build extracts from abstracts. In this
paper, we use ROUGE similarity measure, Basic
Element (BE) overlap, syntactic similarity mea-
sure, semantic similarity measure, and Extended
String Subsequence Kernel (ESSK) to automati-
cally label the corpora of sentences (DUC-2006
data) into extract summary or non-summary cat-
egories in correspondence with the document ab-
stracts. We feed these 5 types of labeled data into
the learners of each of the supervised approaches:
SVM, CRF, HMM, and MaxEnt. Then we exten-
sively investigate the performance of the classi-
fiers to label unseen sentences (from 25 topics of
DUC-2007 data set) as summary or non-summary
sentence. The experimental results clearly show
the impact of different automatic annotation meth-
ods on the performance of the candidate super-
vised techniques.

2 Automatic Annotation Schemes

Using ROUGE Similarity Measures ROUGE
(Recall-Oriented Understudy for Gisting Evalua-
tion) is an automatic tool to determine the qual-
ity of a summary using a collection of measures
ROUGE-N (N=1,2,3,4), ROUGE-L, ROUGE-W
and ROUGE-S which count the number of over-
lapping units such as n-gram, word-sequences,
and word-pairs between the extract and the ab-
stract summaries (Lin, 2004). We assume each
individual document sentence as the extract sum-
mary and calculate its ROUGE similarity scores
with the corresponding abstract summaries. Thus
an average ROUGE score is assigned to each sen-
tence in the document. We choose the top N sen-
tences based on ROUGE scores to have the label

329



+1 (summary sentences) and the rest to have the
label −1 (non-summary sentences).
Basic Element (BE) Overlap Measure We ex-
tract BEs, the “head-modifier-relation” triples for
the sentences in the document collection using BE
package 1.0 distributed by ISI 2. The ranked list
of BEs sorted according to their Likelihood Ra-
tio (LR) scores contains important BEs at the top
which may or may not be relevant to the abstract
summary sentences. We filter those BEs by check-
ing possible matches with an abstract sentence
word or a related word. For each abstract sen-
tence, we assign a score to every document sen-
tence as the sum of its filtered BE scores divided
by the number of BEs in the sentence. Thus, ev-
ery abstract sentence contributes to the BE score
of each document sentence and we select the top
N sentences based on average BE scores to have
the label +1 and the rest to have the label −1.
Syntactic Similarity Measure In order to cal-
culate the syntactic similarity between the abstract
sentence and the document sentence, we first parse
the corresponding sentences into syntactic trees
using Charniak parser 3 (Charniak, 1999) and then
we calculate the similarity between the two trees
using the tree kernel (Collins and Duffy, 2001).
We convert each parenthesis representation gener-
ated by Charniak parser to its corresponding tree
and give the trees as input to the tree kernel func-
tions for measuring the syntactic similarity. The
tree kernel of two syntactic trees T1 and T2 is ac-
tually the inner product of the two m-dimensional
vectors, v(T1) and v(T2):

TK(T1, T2) = v(T1).v(T2)

The TK (tree kernel) function gives the simi-
larity score between the abstract sentence and the
document sentence based on the syntactic struc-
ture. Each abstract sentence contributes a score to
the document sentences and the top N sentences
are selected to be annotated as +1 and the rest as
−1 based on the average of similarity scores.
Semantic Similarity Measure Shallow seman-
tic representations, bearing a more compact infor-
mation, can prevent the sparseness of deep struc-
tural approaches and the weakness of BOW mod-
els (Moschitti et al., 2007). To experiment with
semantic structures, we parse the corresponding

2BE website:http://www.isi.edu/ cyl/BE
3available at ftp://ftp.cs.brown.edu/pub/nlparser/

sentences semantically using a Semantic Role La-
beling (SRL) system like ASSERT4. ASSERT is
an automatic statistical semantic role tagger, that
can annotate naturally occuring text with semantic
arguments. We represent the annotated sentences
using tree structures called semantic trees (ST).
Thus, by calculating the similarity between STs,
each document sentence gets a semantic similarity
score corresponding to each abstract sentence and
then the topN sentences are selected to be labeled
as +1 and the rest as −1 on the basis of average
similarity scores.

Extended String Subsequence Kernel (ESSK)
Formally, ESSK is defined as follows (Hirao et al.,
2004):

Kessk(T,U) =

d∑
m=1

∑
ti∈T

∑
uj∈U

Km(ti, uj)

Km(ti, uj) =

{
val(ti, uj) if m = 1
K

′
m−1(ti, uj) · val(ti, uj)

Here, K
′
m(ti, uj) is defined below. ti and uj

are the nodes of T and U , respectively. Each node
includes a word and its disambiguated sense. The
function val(t, u) returns the number of attributes
common to the given nodes t and u.

K
′
m(ti, uj) =

{
0 if j = 1
λK

′
m(ti, uj−1) +K

′′
m(ti, uj−1)

Here λ is the decay parameter for the number
of skipped words. We choose λ = 0.5 for this
research. K

′′
m(ti, uj) is defined as:

K
′′
m(ti, uj) =

{
0 if i = 1
λK

′′
m(ti−1, uj) +Km(ti−1, uj)

Finally, the similarity measure is defined after
normalization as below:

simessk(T,U) =
Kessk(T,U)√

Kessk(T, T )Kessk(U,U)

Indeed, this is the similarity score we assign to
each document sentence for each abstract sentence
and in the end, top N sentences are selected to
be annotated as +1 and the rest as −1 based on
average similarity scores.

3 Experiments

Task Description The problem definition at
DUC-2007 was: “Given a complex question (topic
description) and a collection of relevant docu-
ments, the task is to synthesize a fluent, well-
organized 250-word summary of the documents

4available at http://cemantix.org/assert

330



that answers the question(s) in the topic”. We con-
sider this task and use the five automatic annota-
tion methods to label each sentence of the 50 doc-
ument sets of DUC-2006 to produce five differ-
ent versions of training data for feeding the SVM,
HMM, CRF and MaxEnt learners. We choose the
top 30% sentences (based on the scores assigned
by an annotation scheme) of a document set to
have the label +1 and the rest to have −1. Unla-
beled sentences of 25 document sets of DUC-2007
data are used for the testing purpose.

Feature Space We represent each of the
document-sentences as a vector of feature-values.
We extract several query-related features and
some other important features from each sen-
tence. We use the features: n-gram overlap,
Longest Common Subsequence (LCS), Weighted
LCS (WLCS), skip-bigram, exact word overlap,
synonym overlap, hypernym/hyponym overlap,
gloss overlap, Basic Element (BE) overlap, syn-
tactic tree similarity measure, position of sen-
tences, length of sentences, Named Entity (NE),
cue word match, and title match (Edmundson,
1969).

Supervised Systems For SVM we use second
order polynomial kernel for the ROUGE and
ESSK labeled training. For the BE, syntactic, and
semantic labeled training third order polynomial
kernel is used. The use of kernel is based on the
accuracy we achieved during training. We apply
3-fold cross validation with randomized local-grid
search for estimating the value of the trade-off pa-
rameter C. We try the value of C in 2i following
heuristics, where i ∈ {−5,−4, · · · , 4, 5} and set
C as the best performed value 0.125 for second
order polynomial kernel and default value is used
for third order kernel. We use SVM light 5 pack-
age for training and testing in this research. In case
of HMM, we apply the Maximum Likelihood Esti-
mation (MLE) technique by frequency counts with
add-one smoothing to estimate the three HMM
parameters: initial state probabilities, transition
probabilities and emission probabilities. We use
Dr. Dekang Lin’s HMM package6 to generate
the most probable label sequence given the model
parameters and the observation sequence (unla-
beled DUC-2007 test data). We use MALLET-0.4
NLP toolkit7 to implement the CRF. We formu-

5http://svmlight.joachims.org/
6http://www.cs.ualberta.ca/ l̃indek/hmm.htm
7http://mallet.cs.umass.edu/

late our problem in terms of MALLET’s Simple-
Tagger class which is a command line interface to
the MALLET CRF class. We modify the Simple-
Tagger class in order to include the provision for
producing corresponding posterior probabilities of
the predicted labels which are used later for rank-
ing sentences. We build the MaxEnt system using
Dr. Dekang Lin’s MaxEnt package8. To define the
exponential prior of the λ values in MaxEnt mod-
els, an extra parameter α is used in the package
during training. We keep the value of α as default.

Sentence Selection The proportion of important
sentences in the training data will differ from the
one in the test data. A simple strategy is to rank
the sentences in a document, then select the top N
sentences. In SVM systems, we use the normal-
ized distance from the hyperplane to each sample
to rank the sentences. Then, we choose N sen-
tences until the summary length (250 words for
DUC-2007) is reached. For HMM systems, we
use Maximal Marginal Relevance (MMR) based
method to rank the sentences (Carbonell et al.,
1997). In CRF systems, we generate posterior
probabilities corresponding to each predicted label
in the label sequence to measure the confidence of
each sentence for summary inclusion. Similarly
for MaxEnt, the corresponding probability values
of the predicted labels are used to rank the sen-
tences.

Evaluation Results The multiple “reference
summaries” given by DUC-2007 are used in the
evaluation of our summary content. We evalu-
ate the system generated summaries using the au-
tomatic evaluation toolkit ROUGE (Lin, 2004).
We report the three widely adopted important
ROUGE metrics in the results: ROUGE-1 (uni-
gram), ROUGE-2 (bigram) and ROUGE-SU (skip
bi-gram). Figure 1 shows the ROUGE F-measures
for SVM, HMM, CRF and MaxEnt systems. The
X-axis containing ROUGE, BE, Synt (Syntactic),
Sem (Semantic), and ESSK stands for the annota-
tion scheme used. The Y-axis shows the ROUGE-
1 scores at the top, ROUGE-2 scores at the bottom
and ROUGE-SU scores in the middle. The super-
vised systems are distinguished by the line style
used in the figure.

From the figure, we can see that the ESSK la-
beled SVM system is having the poorest ROUGE -
1 score whereas the Sem labeled system performs

8http://www.cs.ualberta.ca/l̃indek/downloads.htm

331



Figure 1: ROUGE F-scores for different supervised systems

best. The other annotation methods’ impact is al-
most similar here in terms of ROUGE-1. Ana-
lyzing ROUGE-2 scores, we find that the BE per-
forms the best for SVM, on the other hand, Sem
achieves top ROUGE-SU score. As for the two
measures Sem annotation is performing the best,
we can typically conclude that Sem annotation is
the most suitable method for the SVM system.
ESSK works as the best for HMM and Sem la-
beling performs the worst for all ROUGE scores.
Synt and BE labeled HMMs perform almost simi-
lar whereas ROUGE labeled system is pretty close
to that of ESSK. Again, we see that the CRF per-
forms best with the ESSK annotated data in terms
of ROUGE -1 and ROUGE-SU scores and Sem
has the highest ROUGE-2 score. But BE and Synt
labeling work bad for CRF whereas the ROUGE
labeling performs decently. So, we can typically
conclude that ESSK annotation is the best method
for the CRF system. Analyzing further, we find
that ESSK works best for MaxEnt and BE label-
ing is the worst for all ROUGE scores. We can
also see that ROUGE, Synt and Sem labeled Max-
Ent systems perform almost similar. So, from this
discussion we can come to a conclusion that SVM
system performs best if the training data uses se-
mantic annotation scheme and ESSK works best
for HMM, CRF and MaxEnt systems.

4 Conclusion and Future Work

In the work reported in this paper, we have per-
formed an extensive experimental evaluation to
show the impact of five automatic annotation
methods on the performance of different super-
vised machine learning techniques in confronting
the complex question answering problem. Experi-
mental results show that Sem annotation is the best

for SVM whereas ESSK works well for HMM,
CRF and MaxEnt systems. In the near future,
we plan to work on finding more sophisticated ap-
proaches to effective automatic labeling so that we
can experiment with different supervised methods.

References
Jaime Carbonell, Yibing Geng, and Jade Goldstein.

1997. Automated query-relevant summarization and
diversity-based reranking. In IJCAI-97 Workshop on
AI in Digital Libraries, pages 12–19, Japan.

Eugene Charniak. 1999. A Maximum-Entropy-
Inspired Parser. In Technical Report CS-99-12,
Brown University, Computer Science Department.

Michael Collins and Nigel Duffy. 2001. Convolution
Kernels for Natural Language. In Proceedings of
Neural Information Processing Systems, pages 625–
632, Vancouver, Canada.

Harold P. Edmundson. 1969. New methods in auto-
matic extracting. Journal of the ACM, 16(2):264–
285.

Tsutomu Hirao, Jun Suzuki, Hideki Isozaki, and Eisaku
Maeda. 2004. Dependency-based sentence align-
ment for multiple document summarization. In Pro-
ceedings of the 20th International Conference on
Computational Linguistics, pages 446–452.

Chin-Yew Lin. 2004. ROUGE: A Package for Au-
tomatic Evaluation of Summaries. In Proceed-
ings of Workshop on Text Summarization Branches
Out, Post-Conference Workshop of Association for
Computational Linguistics, pages 74–81, Barcelona,
Spain.

Alessandro Moschitti, Silvia Quarteroni, Roberto
Basili, and Suresh Manandhar. 2007. Exploiting
Syntactic and Shallow Semantic Kernels for Ques-
tion/Answer Classificaion. In Proceedings of the
45th Annual Meeting of the Association of Compu-
tational Linguistics, pages 776–783, Prague, Czech
Republic. ACL.

332


