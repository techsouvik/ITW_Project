













































A Syntax-Driven Bracketing Model for Phrase-Based Translation


Proceedings of the 47th Annual Meeting of the ACL and the 4th IJCNLP of the AFNLP, pages 315–323,
Suntec, Singapore, 2-7 August 2009. c©2009 ACL and AFNLP

A Syntax-Driven Bracketing Model for Phrase-Based Translation

Deyi Xiong, Min Zhang, Aiti Aw and Haizhou Li
Human Language Technology

Institute for Infocomm Research
1 Fusionopolis Way, #21-01 South Connexis, Singapore 138632

{dyxiong, mzhang, aaiti, hli}@i2r.a-star.edu.sg

Abstract

Syntactic analysis influences the way in
which the source sentence is translated.
Previous efforts add syntactic constraints
to phrase-based translation by directly
rewarding/punishing a hypothesis when-
ever it matches/violates source-side con-
stituents. We present a new model that
automatically learns syntactic constraints,
including but not limited to constituent
matching/violation, from training corpus.
The model brackets a source phrase as
to whether it satisfies the learnt syntac-
tic constraints. The bracketed phrases are
then translated as a whole unit by the de-
coder. Experimental results and analy-
sis show that the new model outperforms
other previous methods and achieves a
substantial improvement over the baseline
which is not syntactically informed.

1 Introduction

The phrase-based approach is widely adopted in
statistical machine translation (SMT). It segments
a source sentence into a sequence of phrases, then
translates and reorder these phrases in the target.
In such a process, original phrase-based decod-
ing (Koehn et al., 2003) does not take advan-
tage of any linguistic analysis, which, however,
is broadly used in rule-based approaches. Since
it is not linguistically motivated, original phrase-
based decoding might produce ungrammatical or
even wrong translations. Consider the following
Chinese fragment with its parse tree:

Src: [把 [[7月 11日]NP [设立 [为 [航海 节]NP
]PP ]VP ]IP ]VP

Ref: established July 11 as Sailing Festival day

Output: [to/把 [〈[set up/设立 [for/为 naviga-
tion/航海]] on July 11/7月11日〉 knots/节]]

The output is generated from a phrase-based sys-
tem which does not involve any syntactic analy-
sis. Here we use “[]” (straight orientation) and
“〈〉” (inverted orientation) to denote the common
structure of the source fragment and its transla-
tion found by the decoder. We can observe that
the decoder inadequately breaks up the second NP
phrase and translates the two words “航海” and
“节” separately. However, the parse tree of the
source fragment constrains the phrase “航海 节”
to be translated as a unit.

Without considering syntactic constraints from
the parse tree, the decoder makes wrong decisions
not only on phrase movement but also on the lex-
ical selection for the multi-meaning word “节”1.
To avert such errors, the decoder can fully respect
linguistic structures by only allowing syntactic
constituent translations and reorderings. This, un-
fortunately, significantly jeopardizes performance
(Koehn et al., 2003; Xiong et al., 2008) because by
integrating syntactic constraint into decoding as a
hard constraint, it simply prohibits any other use-
ful non-syntactic translations which violate con-
stituent boundaries.

To better leverage syntactic constraint yet still
allow non-syntactic translations, Chiang (2005)
introduces a count for each hypothesis and ac-
cumulates it whenever the hypothesis exactly
matches syntactic boundaries on the source side.
On the contrary, Marton and Resnik (2008) and
Cherry (2008) accumulate a count whenever hy-
potheses violate constituent boundaries. These
constituent matching/violation counts are used as
a feature in the decoder’s log-linear model and
their weights are tuned via minimal error rate
training (MERT) (Och, 2003). In this way, syn-
tactic constraint is integrated into decoding as a
soft constraint to enable the decoder to reward hy-
potheses that respect syntactic analyses or to pe-

1This word can be translated into “section”, “festival”,
and “knot” in different contexts.

315



nalize hypotheses that violate syntactic structures.
Although experiments show that this con-

stituent matching/violation counting feature
achieves significant improvements on various
language-pairs, one issue is that matching syn-
tactic analysis can not always guarantee a good
translation, and violating syntactic structure does
not always induce a bad translation. Marton and
Resnik (2008) find that some constituency types
favor matching the source parse while others
encourage violations. Therefore it is necessary to
integrate more syntactic constraints into phrase
translation, not just the constraint of constituent
matching/violation.

The other issue is that during decoding we are
more concerned with the question of phrase co-
hesion, i.e. whether the current phrase can be
translated as a unit or not within particular syntac-
tic contexts (Fox, 2002)2, than that of constituent
matching/violation. Phrase cohesion is one of
the main reasons that we introduce syntactic con-
straints (Cherry, 2008). If a source phrase remains
contiguous after translation, we refer this type of
phrase bracketable, otherwise unbracketable. It
is more desirable to translate a bracketable phrase
than an unbracketable one.

In this paper, we propose a syntax-driven brack-
eting (SDB) model to predict whether a phrase
(a sequence of contiguous words) is bracketable
or not using rich syntactic constraints. We parse
the source language sentences in the word-aligned
training corpus. According to the word align-
ments, we define bracketable and unbracketable
instances. For each of these instances, we auto-
matically extract relevant syntactic features from
the source parse tree as bracketing evidences.
Then we tune the weights of these features us-
ing a maximum entropy (ME) trainer. In this way,
we build two bracketing models: 1) a unary SDB
model (UniSDB) which predicts whether an inde-
pendent phrase is bracketable or not; and 2) a bi-
nary SDB model(BiSDB) which predicts whether
two neighboring phrases are bracketable. Similar
to previous methods, our SDB model is integrated
into the decoder’s log-linear model as a feature so
that we can inherit the idea of soft constraints.

In contrast to the constituent matching/violation
counting (CMVC) (Chiang, 2005; Marton and
Resnik, 2008; Cherry, 2008), our SDB model has

2Here we expand the definition of phrase to include both
syntactic and non-syntactic phrases.

the following advantages

• The SDB model automatically learns syntac-
tic constraints from training data while the
CMVC uses manually defined syntactic con-
straints: constituency matching/violation. In
our SDB model, each learned syntactic fea-
ture from bracketing instances can be consid-
ered as a syntactic constraint. Therefore we
can use thousands of syntactic constraints to
guide phrase translation.

• The SDB model maintains and protects the
strength of the phrase-based approach in a
better way than the CMVC does. It is able to
reward non-syntactic translations by assign-
ing an adequate probability to them if these
translations are appropriate to particular syn-
tactic contexts on the source side, rather than
always punish them.

We test our SDB model against the baseline
which doest not use any syntactic constraints on
Chinese-to-English translation. To compare with
the CMVC, we also conduct experiments using
(Marton and Resnik, 2008)’s XP+. The XP+ ac-
cumulates a count for each hypothesis whenever
it violates the boundaries of a constituent with a
label from {NP, VP, CP, IP, PP, ADVP, QP, LCP,
DNP}. The XP+ is the best feature among all fea-
tures that Marton and Resnik use for Chinese-to-
English translation. Our experimental results dis-
play that our SDB model achieves a substantial
improvement over the baseline and significantly
outperforms XP+ according to the BLEU metric
(Papineni et al., 2002). In addition, our analysis
shows further evidences of the performance gain
from a different perspective than that of BLEU.

The paper proceeds as follows. In section 2 we
describe how to learn bracketing instances from
a training corpus. In section 3 we elaborate the
syntax-driven bracketing model, including feature
generation and the integration of the SDB model
into phrase-based SMT. In section 4 and 5, we
present our experiments and analysis. And we fi-
nally conclude in section 6.

2 The Acquisition of Bracketing
Instances

In this section, we formally define the bracket-
ing instance, comprising two types namely binary
bracketing instance and unary bracketing instance.

316



We present an algorithm to automatically ex-
tract these bracketing instances from word-aligned
bilingual corpus where the source language sen-
tences are parsed.

Let c and e be the source sentence and the
target sentence, W be the word alignment be-
tween them, T be the parse tree of c. We
define a binary bracketing instance as a tu-
ple 〈b, τ(ci..j), τ(cj+1..k), τ(ci..k)〉 where b ∈
{bracketable, unbracketable}, ci..j and cj+1..k
are two neighboring source phrases and τ(T, s)
(τ(s) for short) is a subtree function which returns
the minimal subtree covering the source sequence
s from the source parse tree T . Note that τ(ci..k)
includes both τ(ci..j) and τ(cj+1..k). For the two
neighboring source phrases, the following condi-
tions are satisfied:

∃eu..v, ep..q ∈ e s.t.
∀(m,n) ∈ W, i ≤ m ≤ j ↔ u ≤ n ≤ v (1)

∀(m,n) ∈ W, j + 1 ≤ m ≤ k ↔ p ≤ n ≤ q (2)

The above (1) means that there exists a target
phrase eu..v aligned to ci..j and (2) denotes a tar-
get phrase ep..q aligned to cj+1..k. If eu..v and
ep..q are neighboring to each other or all words be-
tween the two phrases are aligned to null, we set
b = bracketable, otherwise b = unbracketable.
From a binary bracketing instance, we derive a
unary bracketing instance 〈b, τ(ci..k)〉, ignoring
the subtrees τ(ci..j) and τ(cj+1..k).

Let n be the number of words of c. If we ex-
tract all potential bracketing instances, there will
be o(n2) unary instances and o(n3) binary in-
stances. To keep the number of bracketing in-
stances tractable, we only record 4 representa-
tive bracketing instances for each index j: 1) the
bracketable instance with the minimal τ(ci..k), 2)
the bracketable instance with the maximal τ(ci..k),
3) the unbracketable instance with the minimal
τ(ci..k), and 4) the unbracketable instance with the
maximal τ(ci..k).

Figure 1 shows the algorithm to extract brack-
eting instances. Line 3-11 find all potential brack-
eting instances for each (i, j, k) ∈ c but only keep
4 bracketing instances for each index j: two min-
imal and two maximal instances. This algorithm
learns binary bracketing instances, from which we
can derive unary bracketing instances.

1: Input: sentence pair (c, e), the parse tree T of c and the
word alignment W between c and e

2: < := ∅
3: for each (i, j, k) ∈ c do
4: if There exist a target phrase eu..v aligned to ci..j and

ep..q aligned to cj+1..k then
5: Get τ(ci..j), τ(cj+1..k), and τ(ci..k)
6: Determine b according to the relationship between

eu..v and ep..q
7: if τ(ci..k) is currently maximal or minimal then
8: Update bracketing instances for index j
9: end if

10: end if
11: end for
12: for each j ∈ c do
13: < := < ∪ {bracketing instances from j}
14: end for
15: Output: bracketing instances <

Figure 1: Bracketing Instances Extraction Algo-
rithm.

3 The Syntax-Driven Bracketing Model

3.1 The Model

Our interest is to automatically detect phrase
bracketing using rich contextual information. We
consider this task as a binary-class classification
problem: whether the current source phrase s is
bracketable (b) within particular syntactic contexts
(τ(s)). If two neighboring sub-phrases s1 and s2
are given, we can use more inner syntactic con-
texts to complete this binary classification task.

We construct the syntax-driven bracketing
model within the maximum entropy framework. A
unary SDB model is defined as:

PUniSDB(b|τ(s), T ) =
exp(

∑
i θihi(b, τ(s), T )∑

b exp(
∑

i θihi(b, τ(s), T )
(3)

where hi ∈ {0, 1} is a binary feature function
which we will describe in the next subsection, and
θi is the weight of hi. Similarly, a binary SDB
model is defined as:

PBiSDB(b|τ(s1), τ(s2), τ(s), T ) =
exp(

∑
i θihi(b, τ(s1), τ(s2), τ(s), T )∑

b exp(
∑

i θihi(b, τ(s1), τ(s2), τ(s), T )
(4)

The most important advantage of ME-based
SDB model is its capacity of incorporating more
fine-grained contextual features besides the binary
feature that detects constituent boundary violation
or matching. By employing these features, we
can investigate the value of various syntactic con-
straints in phrase translation.

317



jingfang
police

yi fengsuo
block

le baozha
bomb

xianchang
scene

NN NN

NP

VP

ASVVADNN

ADVP

VP

NP

IP

s

s1 s2

Figure 2: Illustration of syntax-driven features
used in SDB. Here we only show the features for
the source phrase s. The triangle, rounded rect-
angle and rectangle denote the rule feature, path
feature and constituent boundary matching feature
respectively.

3.2 Syntax-Driven Features

Let s be the source phrase in question, s1 and s2
be the two neighboring sub-phrases. σ(.) is the
root node of τ(.). The SDB model exploits various
syntactic features as follows.

• Rule Features (RF)
We use the CFG rules of σ(s), σ(s1) and
σ(s2) as features. These features capture
syntactic “horizontal context” which demon-
strates the expansion trend of the source
phrase s, s1 and s2 on the parse tree.

In figure 2, the CFG rule “ADVP→AD”,
“VP→VV AS NP”, and “VP→ADVP
VP” are used as features for s1, s2 and s
respectively.

• Path Features (PF)
The tree path σ(s1)..σ(s) connecting σ(s1)
and σ(s), σ(s2)..σ(s) connecting σ(s2)
and σ(s), and σ(s)..ρ connecting σ(s) and
the root node ρ of the whole parse tree are
used as features. These features provide
syntactic “vertical context” which shows the
generation history of the source phrases on
the parse tree.

(a) (b) (c)

Figure 3: Three scenarios of the relationship be-
tween phrase boundaries and constituent bound-
aries. The gray circles are constituent boundaries
while the black circles are phrase boundaries.

In figure 2, the path features are “ADVP
VP”, “VP VP” and “VP IP” for s1, s2 and s
respectively.

• Constituent Boundary Matching Features
(CBMF)
These features are to capture the relationship
between a source phrase s and τ(s) or
τ(s)’s subtrees. There are three different
scenarios3: 1) exact match, where s exactly
matches the boundaries of τ(s) (figure 3(a)),
2) inside match, where s exactly spans a
sequence of τ(s)’s subtrees (figure 3(b)), and
3) crossing, where s crosses the boundaries
of one or two subtrees of τ(s) (figure 3(c)).
In the case of 1) or 2), we set the value of
this feature to σ(s)-M or σ(s)-I respectively.
When s crosses the boundaries of the sub-
constituent ²l on s’s left, we set the value to
σ(²l)-LC; If s crosses the boundaries of the
sub-constituent ²r on s’s right, we set the
value to σ(²r)-RC; If both, we set the value
to σ(²l)-LC-σ(²r)-RC.

Let’s revisit the Figure 2. The source
phrase s1 exactly matches the constituent
ADVP, therefore CBMF is “ADVP-M”. The
source phrase s2 exactly spans two sub-trees
VV and AS of VP, therefore CBMF is
“VP-I”. Finally, the source phrase s cross
boundaries of the lower VP on the right,
therefore CBMF is “VP-RC”.

3.3 The Integration of the SDB Model into
Phrase-Based SMT

We integrate the SDB model into phrase-based
SMT to help decoder perform syntax-driven
phrase translation. In particular, we add a

3The three scenarios that we define here are similar to
those in (Lü et al., 2002).

318



new feature into the log-linear translation model:
PSDB(b|T, τ(.)). This feature is computed by the
SDB model described in equation (3) or equation
(4), which estimates a probability that a source
span is to be translated as a unit within partic-
ular syntactic contexts. If a source span can be
translated as a unit, the feature will give a higher
probability even though this span violates bound-
aries of a constituent. Otherwise, a lower proba-
bility is given. Through this additional feature, we
want the decoder to prefer hypotheses that trans-
late source spans which can be translated as a unit,
and avoids translating those which are discontinu-
ous after translation. The weight of this new fea-
ture is tuned via MERT, which measures the extent
to which this feature should be trusted.

In this paper, we implement the SDB model in a
state-of-the-art phrase-based system which adapts
a binary bracketing transduction grammar (BTG)
(Wu, 1997) to phrase translation and reordering,
described in (Xiong et al., 2006). Whenever a
BTG merging rule (s → [s1 s2] or s → 〈s1 s2〉)
is used, the SDB model gives a probability to the
span s covered by the rule, which estimates the
extent to which the span is bracketable. For the
unary SDB model, we only consider the features
from τ(s). For the binary SDB model, we use all
features from τ(s1), τ(s2) and τ(s) since the bi-
nary SDB model is naturally suitable to the binary
BTG rules.

The SDB model, however, is not only limited
to phrase-based SMT using BTG rules. Since it
is applied on a source span each time, any other
hierarchical phrase-based or syntax-based system
that translates source spans recursively or linearly,
can adopt the SDB model.

4 Experiments

We carried out the MT experiments on Chinese-
to-English translation, using (Xiong et al., 2006)’s
system as our baseline system. We modified the
baseline decoder to incorporate our SDB mod-
els as descried in section 3.3. In order to com-
pare with Marton and Resnik’s approach, we also
adapted the baseline decoder to their XP+ feature.

4.1 Experimental Setup

In order to obtain syntactic trees for SDB models
and XP+, we parsed source sentences using a lex-
icalized PCFG parser (Xiong et al., 2005). The
parser was trained on the Penn Chinese Treebank

with an F1 score of 79.4%.
All translation models were trained on the FBIS

corpus. We removed 15,250 sentences, for which
the Chinese parser failed to produce syntactic
parse trees. To obtain word-level alignments, we
ran GIZA++ (Och and Ney, 2000) on the remain-
ing corpus in both directions, and applied the
“grow-diag-final” refinement rule (Koehn et al.,
2005) to produce the final many-to-many word
alignments. We built our four-gram language
model using Xinhua section of the English Gi-
gaword corpus (181.1M words) with the SRILM
toolkit (Stolcke, 2002).

For the efficiency of MERT, we built our de-
velopment set (580 sentences) using sentences not
exceeding 50 characters from the NIST MT-02 set.
We evaluated all models on the NIST MT-05 set
using case-sensitive BLEU-4. Statistical signif-
icance in BLEU score differences was tested by
paired bootstrap re-sampling (Koehn, 2004).

4.2 SDB Training

We extracted 6.55M bracketing instances from our
training corpus using the algorithm shown in fig-
ure 1, which contains 4.67M bracketable instances
and 1.89M unbracketable instances. From ex-
tracted bracketing instances we generated syntax-
driven features, which include 73,480 rule fea-
tures, 153,614 path features and 336 constituent
boundary matching features. To tune weights of
features, we ran the MaxEnt toolkit (Zhang, 2004)
with iteration number being set to 100 and Gaus-
sian prior to 1 to avoid overfitting.

4.3 Results

We ran the MERT module with our decoders to
tune the feature weights. The values are shown
in Table 1. The PSDB receives the largest feature
weight, 0.29 for UniSDB and 0.38 for BiSDB, in-
dicating that the SDB models exert a nontrivial im-
pact on decoder.

In Table 2, we present our results. Like (Mar-
ton and Resnik, 2008), we find that the XP+ fea-
ture obtains a significant improvement of 1.08
BLEU over the baseline. However, using all
syntax-driven features described in section 3.2,
our SDB models achieve larger improvements
of up to 1.67 BLEU. The binary SDB (BiSDB)
model statistically significantly outperforms Mar-
ton and Resnik’s XP+ by an absolute improvement
of 0.59 (relatively 2%). It is also marginally better
than the unary SDB model.

319



Features
System P (c|e) P (e|c) Pw(c|e) Pw(e|c) Plm(e) Pr(e) Word Phr. XP+ PSDB
Baseline 0.041 0.030 0.006 0.065 0.20 0.35 0.19 -0.12 — —
XP+ 0.002 0.049 0.046 0.044 0.17 0.29 0.16 0.12 -0.12 —
UniSDB 0.023 0.051 0.055 0.012 0.21 0.20 0.12 0.04 — 0.29
BiSDB 0.016 0.032 0.027 0.013 0.13 0.23 0.08 0.09 — 0.38

Table 1: Feature weights obtained by MERT on the development set. The first 4 features are the phrase
translation probabilities in both directions and the lexical translation probabilities in both directions. Plm
= language model; Pr = MaxEnt-based reordering model; Word = word bonus; Phr = phrase bonus.

BLEU-n n-gram Precision
System 4 1 2 3 4 5 6 7 8
Baseline 0.2612 0.71 0.36 0.18 0.10 0.054 0.030 0.016 0.009
XP+ 0.2720** 0.72 0.37 0.19 0.11 0.060 0.035 0.021 0.012
UniSDB 0.2762**+ 0.72 0.37 0.20 0.11 0.062 0.035 0.020 0.011
BiSDB 0.2779**++ 0.72 0.37 0.20 0.11 0.065 0.038 0.022 0.014

Table 2: Results on the test set. **: significantly better than baseline (p < 0.01). + or ++: significantly
better than Marton and Resnik’s XP+ (p < 0.05 or p < 0.01, respectively).

5 Analysis

In this section, we present analysis to perceive the
influence mechanism of the SDB model on phrase
translation by studying the effects of syntax-driven
features and differences of 1-best translation out-
puts.

5.1 Effects of Syntax-Driven Features

We conducted further experiments using individ-
ual syntax-driven features and their combinations.
Table 3 shows the results, from which we have the
following key observations.

• The constituent boundary matching feature
(CBMF) is a very important feature, which
by itself achieves significant improvement
over the baseline (up to 1.13 BLEU). Both
our CBMF and Marton and Resnik’s XP+
feature focus on the relationship between a
source phrase and a constituent. Their signifi-
cant contribution to the improvement implies
that this relationship is an important syntactic
constraint for phrase translation.

• Adding more features, such as path feature
and rule feature, achieves further improve-
ments. This demonstrates the advantage of
using more syntactic constraints in the SDB
model, compared with Marton and Resnik’s
XP+.

BLEU-4
Features UniSDB BiSDB
PF + RF 0.2555 0.2644*@@
PF 0.2596 0.2671**@@
CBMF 0.2678** 0.2725**@
RF + CBMF 0.2737** 0.2780**++@@
PF + CBMF 0.2755**+ 0.2782**++@−

RF + PF + CBMF 0.2762**+ 0.2779**++

Table 3: Results of different feature sets. * or **:
significantly better than baseline (p < 0.05 or p <
0.01, respectively). + or ++: significantly better
than XP+ (p < 0.05 or p < 0.01, respectively).
@−: almost significantly better than its UniSDB
counterpart (p < 0.075). @ or @@: significantly
better than its UniSDB counterpart (p < 0.05 or
p < 0.01, respectively).

• In most cases, the binary SDB is constantly
significantly better than the unary SDB, sug-
gesting that inner contexts are useful in pre-
dicting phrase bracketing.

5.2 Beyond BLEU

We want to further study the happenings after we
integrate the constraint feature (our SDB model
and Marton and Resnik’s XP+) into the log-linear
translation model. In particular, we want to inves-
tigate: to what extent syntactic constraints change
translation outputs? And in what direction the
changes take place? Since BLEU is not sufficient

320



System CCM Rate (%)
Baseline 43.5
XP+ 74.5
BiSDB 72.4

Table 4: Consistent constituent matching rates re-
ported on 1-best translation outputs.

to provide such insights, we introduce a new sta-
tistical metric which measures the proportion of
syntactic constituents 4 whose boundaries are con-
sistently matched by decoder during translation.
This proportion, which we call consistent con-
stituent matching (CCM) rate , reflects the ex-
tent to which the translation output respects the
source parse tree.

In order to calculate this rate, we output transla-
tion results as well as phrase alignments found by
decoders. Then for each multi-branch constituent
c
j
i spanning from i to j on the source side, we

check the following conditions.

• If its boundaries i and j are aligned to phrase
segmentation boundaries found by decoder.

• If all target phrases inside cji ’s target span 5
are aligned to the source phrases within cji
and not to the phrases outside cji .

If both conditions are satisfied, the constituent cji
is consistently matched by decoder.

Table 4 shows the consistent constituent match-
ing rates. Without using any source-side syntac-
tic information, the baseline obtains a low CCM
rate of 43.53%, indicating that the baseline de-
coder violates the source parse tree more than it
respects the source structure. The translation out-
put described in section 1 is actually generated by
the baseline decoder, where the second NP phrase
boundaries are violated.

By integrating syntactic constraints into decod-
ing, we can see that both Marton and Resnik’s
XP+ and our SDB model achieve a significantly
higher constituent matching rate, suggesting that
they are more likely to respect the source struc-
ture. The examples in Table 5 show that the de-
coder is able to generate better translations if it is

4We only consider multi-branch constituents.
5Given a phrase alignment P = {cgf ↔ eqp}, if the seg-

mentation within cji defined by P is c
j
i = c

j1
i1

...c
jk
ik

, and

c
jr
ir
↔ evrur ∈ P, 1 ≤ r ≤ k, we define the target span of cji

as a pair where the first element is min(eu1 ...euk ) and the
second element is max(ev1 ...evk ), similar to (Fox, 2002).

CCM Rates (%)
System <6 6-10 11-15 16-20 >20
XP+ 75.2 70.9 71.0 76.2 82.2
BiSDB 69.3 74.7 74.2 80.0 85.6

Table 6: Consistent constituent matching rates for
structures with different spans.

faithful to the source parse tree by using syntactic
constraints.

We further conducted a deep comparison of
translation outputs of BiSDB vs. XP+ with re-
gard to constituent matching and violation. We
found two significant differences that may explain
why our BiSDB outperforms XP+. First, although
the overall CCM rate of XP+ is higher than that
of BiSDB, BiSDB obtains higher CCM rates for
long-span structures than XP+ does, which are
shown in Table 6. Generally speaking, viola-
tions of long-span constituents have a more neg-
ative impact on performance than short-span vio-
lations if these violations are toxic. This explains
why BiSDB achieves relatively higher precision
improvements for higher n-grams over XP+, as
shown in Table 3.

Second, compared with XP+ that only punishes
constituent boundary violations, our SDB model
is able to encourage violations if these violations
are done on bracketable phrases. We observed in
many cases that by violating constituent bound-
aries BiSDB produces better translations than XP+
does, which on the contrary matches these bound-
aries. Still consider the example shown in section
1. The following translations are found by XP+
and BiSDB respectively.

XP+: [to/把 〈[set up/设立 [for the/为 [naviga-
tion/航海 section/节]]] on July 11/7月11日〉]

BiSDB: [to/把 〈[[set up/设立 a/为] [marine/航海
festival/节]] on July 11/7月11日〉]

XP+ here matches all constituent boundaries while
BiSDB violates the PP constituent to translate the
non-syntactic phrase “设立 为”. Table 7 shows
more examples. From these examples, we clearly
see that appropriate violations are helpful and even
necessary for generating better translations. By
allowing appropriate violations to translate non-
syntactic phrases according to particular syntac-
tic contexts, our SDB model better inherits the
strength of phrase-based approach than XP+.

321



Src: [[为 [印度洋灾区民众]NP ]PP [奉献 [自己]NP [一份爱心]NP ]VP ]VP
Ref: show their loving hearts to people in the Indian Ocean disaster areas
Baseline: 〈love/爱心 [for the/为 〈[people/民众 [to/奉献 [own/自己 a report/一份]]]〉 〈in/灾区 the Indian Ocean/印

度洋〉]〉
XP+: 〈[contribute/奉献 [its/自己 [part/一份 love/爱心]]] [for/为 〈the people/民众 〈in/灾区 the Indian Ocean/印

度洋〉〉]〉
BiSDB: 〈[[[contribute/奉献 its/自己] part/一份] love/爱心] [for/为 〈the people/民众 〈in/灾区 the Indian Ocean印

度洋〉〉]〉
Src: [五角大厦 [已]ADVP [派遣 [[二十架]QP 飞机]NP [至南亚]PP]VP]IP [，]PU [其中包括...]IP
Ref: The Pentagon has dispatched 20 airplanes to South Asia, including...
Baseline: [[The Pentagon/五角大厦 has sent/已派遣] [〈[to/至 [[South Asia/南亚 ,/，] including/其中包括]] [20/二

十 plane/架飞机]〉]]
XP+: [The Pentagon/五角大厦 [has/已 [sent/派遣 [[20/二十 planes/架飞机] [to/至 South Asia/南亚]]]]] [,/，

[including/其中包括...]]
BiSDB: [The Pentagon/五角大厦 [has sent/已派遣 [[20/二十 planes/架飞机] [to/至 South Asia/南亚]]] [,/， [in-

cluding/其中包括...]]

Table 5: Translation examples showing that both XP+ and BiSDB produce better translations than the
baseline, which inappropriately violates constituent boundaries (within underlined phrases).

Src: [[在 [[[美国国务院与鲍尔]NP [短暂]ADJP [会谈]NP]NP 后]LCP]PP 表示]VP
Ref: said after a brief discussion with Powell at the US State Department
XP+: [〈after/后 〈〈[a brief/短暂 meeting/会谈] [with/与 Powell/鲍尔]〉 [in/在 the US State Department/美国国

务院]〉 said/表示]
BiSDB: 〈said after/后表示 〈[a brief/短暂 meeting/会谈] 〈 with Powell/与鲍尔 [at/在 the State Department of the

United States/美国国务院]〉〉〉
Src: [向 [[建立 [未来民主政治]NP]VP]IP]PP [迈出了 [关键性的一步]NP]VP
Ref: took a key step towards building future democratic politics
XP+: 〈[a/了 [key/关键性 step/的一步]] 〈forward/迈出 [to/向 [a/建立 [future/未来 political democracy/民主政

治]]]〉〉
BiSDB: 〈[made a/迈出了 [key/关键性 step/的一步]] [towards establishing a/向建立 〈democratic politics/民主政

治 in the future/未来〉]〉

Table 7: Translation examples showing that BiSDB produces better translations than XP+ via appropriate
violations of constituent boundaries (within double-underlined phrases).

6 Conclusion

In this paper, we presented a syntax-driven brack-
eting model that automatically learns bracketing
knowledge from training corpus. With this knowl-
edge, the model is able to predict whether source
phrases can be translated together, regardless of
matching or crossing syntactic constituents. We
integrate this model into phrase-based SMT to
increase its capacity of linguistically motivated
translation without undermining its strengths. Ex-
periments show that our model achieves substan-
tial improvements over baseline and significantly
outperforms (Marton and Resnik, 2008)’s XP+.

Compared with previous constituency feature,
our SDB model is capable of incorporating more
syntactic constraints, and rewarding necessary vi-
olations of the source parse tree. Marton and
Resnik (2008) find that their constituent con-
straints are sensitive to language pairs. In the fu-
ture work, we will use other language pairs to test

our models so that we could know whether our
method is language-independent.

References

Colin Cherry. 2008. Cohesive Phrase-based Decoding
for Statistical Machine Translation. In Proceedings
of ACL.

David Chiang. 2005. A Hierarchical Phrase-based
Model for Statistical Machine Translation. In Pro-
ceedings of ACL, pages 263–270.

David Chiang, Yuval Marton and Philip Resnik. 2008.
Online Large-Margin Training of Syntactic and
Structural Translation Features. In Proceedings of
EMNLP.

Heidi J. Fox 2002. Phrasal Cohesion and Statistical
Machine Translation. In Proceedings of EMNLP,
pages 304–311.

Philipp Koehn, Franz Joseph Och, and Daniel Marcu.
2003. Statistical Phrase-based Translation. In Pro-
ceedings of HLT-NAACL.

322



Philipp Koehn. 2004. Statistical Significance Tests for
Machine Translation Evaluation. In Proceedings of
EMNLP.

Philipp Koehn, Amittai Axelrod, Alexandra Birch
Mayne, Chris Callison-Burch, Miles Osborne and
David Talbot. 2005. Edinburgh System Descrip-
tion for the 2005 IWSLT Speech Translation Eval-
uation. In International Workshop on Spoken Lan-
guage Translation.

Yajuan Lü, Sheng Li, Tiezhun Zhao and Muyun Yang.
2002. Learning Chinese Bracketing Knowledge
Based on a Bilingual Language Model. In Proceed-
ings of COLING.

Yuval Marton and Philip Resnik. 2008. Soft Syntactic
Constraints for Hierarchical Phrase-Based Transla-
tion. In Proceedings of ACL.

Franz Josef Och and Hermann Ney. 2000. Improved
Statistical Alignment Models. In Proceedings of
ACL 2000.

Franz Josef Och. 2003. Minimum Error Rate Training
in Statistical Machine Translation. In Proceedings
of ACL 2003.

Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a Method for Automatically
Evaluation of Machine Translation. In Proceedings
of ACL.

Andreas Stolcke. 2002. SRILM - an Extensible Lan-
guage Modeling Toolkit. In Proceedings of Interna-
tional Conference on Spoken Language Processing,
volume 2, pages 901-904.

Dekai Wu. 1997. Stochastic Inversion Transduction
Grammars and Bilingual Parsing of Parallel Cor-
pora. Computational Linguistics, 23(3):377-403.

Deyi Xiong, Shuanglong Li, Qun Liu, Shouxun Lin,
Yueliang Qian. 2005. Parsing the Penn Chinese
Treebank with Semantic Knowledge. In Proceed-
ings of IJCNLP, Jeju Island, Korea.

Deyi Xiong, Qun Liu and Shouxun Lin. 2006. Max-
imum Entropy Based Phrase Reordering Model for
Statistical Machine Translation. In Proceedings of
ACL-COLING 2006.

Deyi Xiong, Min Zhang, Aiti Aw, and Haizhou Li.
2008. Linguistically Annotated BTG for Statistical
Machine Translation. In Proceedings of COLING
2008.

Le Zhang. 2004. Maximum Entropy Model-
ing Tooklkit for Python and C++. Available at
http://homepages.inf.ed.ac.uk/s0450736
/maxent toolkit.html.

323


