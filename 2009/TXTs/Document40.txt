













































Concise Integer Linear Programming Formulations for Dependency Parsing


Proceedings of the 47th Annual Meeting of the ACL and the 4th IJCNLP of the AFNLP, pages 342–350,
Suntec, Singapore, 2-7 August 2009. c©2009 ACL and AFNLP

Concise Integer Linear Programming Formulations
for Dependency Parsing

André F. T. Martins∗† Noah A. Smith∗ Eric P. Xing∗
∗School of Computer Science, Carnegie Mellon University, Pittsburgh, PA 15213, USA

†Instituto de Telecomunicações, Instituto Superior Técnico, Lisboa, Portugal
{afm,nasmith,epxing}@cs.cmu.edu

Abstract

We formulate the problem of non-
projective dependency parsing as a
polynomial-sized integer linear pro-
gram. Our formulation is able to handle
non-local output features in an efficient
manner; not only is it compatible with
prior knowledge encoded as hard con-
straints, it can also learn soft constraints
from data. In particular, our model is able
to learn correlations among neighboring
arcs (siblings and grandparents), word
valency, and tendencies toward nearly-
projective parses. The model parameters
are learned in a max-margin framework
by employing a linear programming
relaxation. We evaluate the performance
of our parser on data in several natural
languages, achieving improvements over
existing state-of-the-art methods.

1 Introduction

Much attention has recently been devoted to in-
teger linear programming (ILP) formulations of
NLP problems, with interesting results in appli-
cations like semantic role labeling (Roth and Yih,
2005; Punyakanok et al., 2004), dependency pars-
ing (Riedel and Clarke, 2006), word alignment
for machine translation (Lacoste-Julien et al.,
2006), summarization (Clarke and Lapata, 2008),
and coreference resolution (Denis and Baldridge,
2007), among others. In general, the rationale for
the development of ILP formulations is to incorpo-
rate non-local features or global constraints, which
are often difficult to handle with traditional algo-
rithms. ILP formulations focus more on the mod-
eling of problems, rather than algorithm design.
While solving an ILP is NP-hard in general, fast
solvers are available today that make it a practical
solution for many NLP problems.

This paper presents new, concise ILP formu-
lations for projective and non-projective depen-

dency parsing. We believe that our formula-
tions can pave the way for efficient exploitation of
global features and constraints in parsing applica-
tions, leading to more powerful models. Riedel
and Clarke (2006) cast dependency parsing as
an ILP, but efficient formulations remain an open
problem. Our formulations offer the following
comparative advantages:

• The numbers of variables and constraints are
polynomial in the sentence length, as opposed to
requiring exponentially many constraints, elim-
inating the need for incremental procedures like
the cutting-plane algorithm;

• LP relaxations permit fast online discriminative
training of the constrained model;

• Soft constraints may be automatically learned
from data. In particular, our formulations han-
dle higher-order arc interactions (like siblings
and grandparents), model word valency, and can
learn to favor nearly-projective parses.

We evaluate the performance of the new parsers
on standard parsing tasks in seven languages. The
techniques that we present are also compatible
with scenarios where expert knowledge is avail-
able, for example in the form of hard or soft first-
order logic constraints (Richardson and Domin-
gos, 2006; Chang et al., 2008).

2 Dependency Parsing

2.1 Preliminaries

A dependency tree is a lightweight syntactic repre-
sentation that attempts to capture functional rela-
tionships between words. Lately, this formalism
has been used as an alternative to phrase-based
parsing for a variety of tasks, ranging from ma-
chine translation (Ding and Palmer, 2005) to rela-
tion extraction (Culotta and Sorensen, 2004) and
question answering (Wang et al., 2007).

Let us first describe formally the set of legal de-
pendency parse trees. Consider a sentence x =

342



〈w0, . . . , wn〉, where wi denotes the word at the i-
th position, and w0 = $ is a wall symbol. We form
the (complete1) directed graph D = 〈V,A〉, with
vertices in V = {0, . . . , n} (the i-th vertex corre-
sponding to the i-th word) and arcs in A = V 2.
Using terminology from graph theory, we say that
B ⊆ A is an r-arborescence2 of the directed
graph D if 〈V,B〉 is a (directed) tree rooted at r.
We define the set of legal dependency parse trees
of x (denoted Y(x)) as the set of 0-arborescences
of D, i.e., we admit each arborescence as a poten-
tial dependency tree.

Let y ∈ Y(x) be a legal dependency tree for
x; if the arc a = 〈i, j〉 ∈ y, we refer to i as the
parent of j (denoted i = π(j)) and j as a child of
i. We also say that a is projective (in the sense of
Kahane et al., 1998) if any vertex k in the span of
a is reachable from i (in other words, if for any k
satisfying min(i, j) < k < max(i, j), there is a
directed path in y from i to k). A dependency tree
is called projective if it only contains projective
arcs. Fig. 1 illustrates this concept.3

The formulation to be introduced in §3 makes
use of the notion of the incidence vector associ-
ated with a dependency tree y ∈ Y(x). This is
the binary vector z , 〈za〉a∈A with each compo-
nent defined as za = I(a ∈ y) (here, I(.) denotes
the indicator function). Considering simultane-
ously all incidence vectors of legal dependency
trees and taking the convex hull, we obtain a poly-
hedron that we call the arborescence polytope,
denoted by Z(x). Each vertex of Z(x) can be
identified with a dependency tree in Y(x). The
Minkowski-Weyl theorem (Rockafellar, 1970) en-
sures that Z(x) has a representation of the form
Z(x) = {z ∈ R|A| | Az ≤ b}, for some p-by-|A|
matrix A and some vector b in Rp. However, it is
not easy to obtain a compact representation (where
p grows polynomially with the number of words
n). In §3, we will provide a compact represen-
tation of an outer polytope Z̄(x) ⊇ Z(x) whose
integer vertices correspond to dependency trees.
Hence, the problem of finding the dependency tree
that maximizes some linear function of the inci-

1The general case where A ⊆ V 2 is also of interest; it
arises whenever a constraint or a lexicon forbids some arcs
from appearing in dependency tree. It may also arise as a
consequence of a first-stage pruning step where some candi-
date arcs are eliminated; this will be further discussed in §4.

2Or “directed spanning tree with designated root r.”
3In this paper, we consider unlabeled dependency parsing,

where only the backbone structure (i.e., the arcs without the
labels depicted in Fig. 1) is to be predicted.

Figure 1: A projective dependency graph.

Figure 2: Non-projective dependency graph.

those that assume each dependency decision is in-
dependent modulo the global structural constraint
that dependency graphs must be trees. Such mod-
els are commonly referred to as edge-factored since
their parameters factor relative to individual edges
of the graph (Paskin, 2001; McDonald et al.,
2005a). Edge-factored models have many computa-
tional benefits, most notably that inference for non-
projective dependency graphs can be achieved in
polynomial time (McDonald et al., 2005b). The pri-
mary problem in treating each dependency as in-
dependent is that it is not a realistic assumption.
Non-local information, such as arity (or valency)
and neighbouring dependencies, can be crucial to
obtaining high parsing accuracies (Klein and Man-
ning, 2002; McDonald and Pereira, 2006). How-
ever, in the data-driven parsing setting this can be
partially adverted by incorporating rich feature rep-
resentations over the input (McDonald et al., 2005a).

The goal of this work is to further our current
understanding of the computational nature of non-
projective parsing algorithms for both learning and
inference within the data-driven setting. We start by
investigating and extending the edge-factored model
of McDonald et al. (2005b). In particular, we ap-
peal to the Matrix Tree Theorem for multi-digraphs
to design polynomial-time algorithms for calculat-
ing both the partition function and edge expecta-
tions over all possible dependency graphs for a given
sentence. To motivate these algorithms, we show
that they can be used in many important learning
and inference problems including min-risk decod-
ing, training globally normalized log-linear mod-
els, syntactic language modeling, and unsupervised

learning via the EM algorithm – none of which have
previously been known to have exact non-projective
implementations.

We then switch focus to models that account for
non-local information, in particular arity and neigh-
bouring parse decisions. For systems that model ar-
ity constraints we give a reduction from the Hamilto-
nian graph problem suggesting that the parsing prob-
lem is intractable in this case. For neighbouring
parse decisions, we extend the work of McDonald
and Pereira (2006) and show that modeling vertical
neighbourhoods makes parsing intractable in addi-
tion to modeling horizontal neighbourhoods. A con-
sequence of these results is that it is unlikely that
exact non-projective dependency parsing is tractable
for any model assumptions weaker than those made
by the edge-factored models.

1.1 Related Work
There has been extensive work on data-driven de-
pendency parsing for both projective parsing (Eis-
ner, 1996; Paskin, 2001; Yamada and Matsumoto,
2003; Nivre and Scholz, 2004; McDonald et al.,
2005a) and non-projective parsing systems (Nivre
and Nilsson, 2005; Hall and Nóvák, 2005; McDon-
ald et al., 2005b). These approaches can often be
classified into two broad categories. In the first cat-
egory are those methods that employ approximate
inference, typically through the use of linear time
shift-reduce parsing algorithms (Yamada and Mat-
sumoto, 2003; Nivre and Scholz, 2004; Nivre and
Nilsson, 2005). In the second category are those
that employ exhaustive inference algorithms, usu-
ally by making strong independence assumptions, as
is the case for edge-factored models (Paskin, 2001;
McDonald et al., 2005a; McDonald et al., 2005b).
Recently there have also been proposals for exhaus-
tive methods that weaken the edge-factored assump-
tion, including both approximate methods (McDon-
ald and Pereira, 2006) and exact methods through in-
teger linear programming (Riedel and Clarke, 2006)
or branch-and-bound algorithms (Hirakawa, 2006).

For grammar based models there has been limited
work on empirical systems for non-projective pars-
ing systems, notable exceptions include the work
of Wang and Harper (2004). Theoretical studies of
note include the work of Neuhaus and Böker (1997)
showing that the recognition problem for a mini-

$ Figure 1: A projective dependency graph.

Figure 2: Non-projective dependency graph.

those that assume each dependency decision is in-
dependent modulo the global structural constraint
that dependency graphs must be trees. Such mod-
els are commonly referred to as edge-factored since
their parameters factor relative to individual edges
of the graph (Paskin, 2001; McDonald et al.,
2005a). Edge-factored models have many computa-
tional benefits, most notably that inference for non-
projective dependency graphs can be achieved in
polynomial time (McDonald et al., 2005b). The pri-
mary problem in treating each dependency as in-
dependent is that it is not a realistic assumption.
Non-local information, such as arity (or valency)
and neighbouring dependencies, can be crucial to
obtaining high parsing accuracies (Klein and Man-
ning, 2002; McDonald and Pereira, 2006). How-
ever, in the data-driven parsing setting this can be
partially adverted by incorporating rich feature rep-
resentations over the input (McDonald et al., 2005a).

The goal of this work is to further our current
understanding of the computational nature of non-
projective parsing algorithms for both learning and
inference within the data-driven setting. We start by
investigating and extending the edge-factored model
of McDonald et al. (2005b). In particular, we ap-
peal to the Matrix Tree Theorem for multi-digraphs
to design polynomial-time algorithms for calculat-
ing both the partition function and edge expecta-
tions over all possible dependency graphs for a given
sentence. To motivate these algorithms, we show
that they can be used in many important learning
and inference problems including min-risk decod-
ing, training globally normalized log-linear mod-
els, syntactic language modeling, and unsupervised

learning via the EM algorithm – none of which have
previously been known to have exact non-projective
implementations.

We then switch focus to models that account for
non-local information, in particular arity and neigh-
bouring parse decisions. For systems that model ar-
ity constraints we give a reduction from the Hamilto-
nian graph problem suggesting that the parsing prob-
lem is intractable in this case. For neighbouring
parse decisions, we extend the work of McDonald
and Pereira (2006) and show that modeling vertical
neighbourhoods makes parsing intractable in addi-
tion to modeling horizontal neighbourhoods. A con-
sequence of these results is that it is unlikely that
exact non-projective dependency parsing is tractable
for any model assumptions weaker than those made
by the edge-factored models.

1.1 Related Work
There has been extensive work on data-driven de-
pendency parsing for both projective parsing (Eis-
ner, 1996; Paskin, 2001; Yamada and Matsumoto,
2003; Nivre and Scholz, 2004; McDonald et al.,
2005a) and non-projective parsing systems (Nivre
and Nilsson, 2005; Hall and Nóvák, 2005; McDon-
ald et al., 2005b). These approaches can often be
classified into two broad categories. In the first cat-
egory are those methods that employ approximate
inference, typically through the use of linear time
shift-reduce parsing algorithms (Yamada and Mat-
sumoto, 2003; Nivre and Scholz, 2004; Nivre and
Nilsson, 2005). In the second category are those
that employ exhaustive inference algorithms, usu-
ally by making strong independence assumptions, as
is the case for edge-factored models (Paskin, 2001;
McDonald et al., 2005a; McDonald et al., 2005b).
Recently there have also been proposals for exhaus-
tive methods that weaken the edge-factored assump-
tion, including both approximate methods (McDon-
ald and Pereira, 2006) and exact methods through in-
teger linear programming (Riedel and Clarke, 2006)
or branch-and-bound algorithms (Hirakawa, 2006).

For grammar based models there has been limited
work on empirical systems for non-projective pars-
ing systems, notable exceptions include the work
of Wang and Harper (2004). Theoretical studies of
note include the work of Neuhaus and Böker (1997)
showing that the recognition problem for a mini-

$

Figure 1: A projective dependency parse (top), and a non-
projective dependency parse (bottom) for two English sen-
tences; examples from McDonald and Satta (2007).

dence vectors can be cast as an ILP. A similar idea
was applied to word alignment by Lacoste-Julien
et al. (2006), where permutations (rather than ar-
borescences) were the combinatorial structure be-
ing requiring representation.

Letting X denote the set of possible sentences,
define Y ,

⋃
x∈X Y(x). Given a labeled dataset

L , 〈〈x1, y1〉, . . . , 〈xm, ym〉〉 ∈ (X × Y)m, we
aim to learn a parser, i.e., a function h : X → Y
that given x ∈ X outputs a legal dependency parse
y ∈ Y(x). The fact that there are exponentially
many candidates in Y(x) makes dependency pars-
ing a structured classification problem.

2.2 Arc Factorization and Locality
There has been much recent work on dependency
parsing using graph-based, transition-based, and
hybrid methods; see Nivre and McDonald (2008)
for an overview. Typical graph-based methods
consider linear classifiers of the form

hw(x) = argmaxy∈Y w
>f(x, y), (1)

where f(x, y) is a vector of features and w is the
corresponding weight vector. One wants hw to
have small expected loss; the typical loss func-
tion is the Hamming loss, `(y′; y) , |{〈i, j〉 ∈
y′ : 〈i, j〉 /∈ y}|. Tractability is usually ensured
by strong factorization assumptions, like the one
underlying the arc-factored model (Eisner, 1996;
McDonald et al., 2005), which forbids any feature
that depends on two or more arcs. This induces a
decomposition of the feature vector f(x, y) as:

f(x, y) =
∑

a∈y fa(x). (2)

Under this decomposition, each arc receives a
score; parsing amounts to choosing the configu-
ration that maximizes the overall score, which, as

343



shown by McDonald et al. (2005), is an instance
of the maximal arborescence problem. Combi-
natorial algorithms (Chu and Liu, 1965; Edmonds,
1967) can solve this problem in cubic time.4 If
the dependency parse trees are restricted to be
projective, cubic-time algorithms are available via
dynamic programming (Eisner, 1996). While in
the projective case, the arc-factored assumption
can be weakened in certain ways while maintain-
ing polynomial parser runtime (Eisner and Satta,
1999), the same does not happen in the nonprojec-
tive case, where finding the highest-scoring tree
becomes NP-hard (McDonald and Satta, 2007).
Approximate algorithms have been employed to
handle models that are not arc-factored (although
features are still fairly local): McDonald and
Pereira (2006) adopted an approximation based
on O(n3) projective parsing followed by a hill-
climbing algorithm to rearrange arcs, and Smith
and Eisner (2008) proposed an algorithm based on
loopy belief propagation.

3 Dependency Parsing as an ILP

Our approach will build a graph-based parser
without the drawback of a restriction to local fea-
tures. By formulating inference as an ILP, non-
local features can be easily accommodated in our
model; furthermore, by using a relaxation tech-
nique we can still make learning tractable. The im-
pact of LP-relaxed inference in the learning prob-
lem was studied elsewhere (Martins et al., 2009).

A linear program (LP) is an optimization prob-
lem of the form

minx∈Rd c
>x

s.t. Ax ≤ b.
(3)

If the problem is feasible, the optimum is attained
at a vertex of the polyhedron that defines the con-
straint space. If we add the constraint x ∈ Zd, then
the above is called an integer linear program
(ILP). For some special parameter settings—e.g.,
when b is an integer vector and A is totally uni-
modular5—all vertices of the constraining polyhe-
dron are integer points; in these cases, the integer
constraint may be suppressed and (3) is guaran-
teed to have integer solutions (Schrijver, 2003).
Of course, this need not happen: solving a gen-
eral ILP is an NP-complete problem. Despite this

4There is also a quadratic algorithm due to Tarjan (1977).
5A matrix is called totally unimodular if the determinants

of each square submatrix belong to {0, 1,−1}.

fact, fast solvers are available today that make this
a practical solution for many problems. Their per-
formance depends on the dimensions and degree
of sparsity of the constraint matrix A.

Riedel and Clarke (2006) proposed an ILP for-
mulation for dependency parsing which refines
the arc-factored model by imposing linguistically
motivated “hard” constraints that forbid some arc
configurations. Their formulation includes an ex-
ponential number of constraints—one for each
possible cycle. Since it is intractable to throw
in all constraints at once, they propose a cutting-
plane algorithm, where the cycle constraints are
only invoked when violated by the current solu-
tion. The resulting algorithm is still slow, and an
arc-factored model is used as a surrogate during
training (i.e., the hard constraints are only used at
test time), which implies a discrepancy between
the model that is optimized and the one that is ac-
tually going to be used.

Here, we propose ILP formulations that elim-
inate the need for cycle constraints; in fact, they
require only a polynomial number of constraints.
Not only does our model allow expert knowledge
to be injected in the form of constraints, it is also
capable of learning soft versions of those con-
straints from data; indeed, it can handle features
that are not arc-factored (correlating, for exam-
ple, siblings and grandparents, modeling valency,
or preferring nearly projective parses). While, as
pointed out by McDonald and Satta (2007), the
inclusion of these features makes inference NP-
hard, by relaxing the integer constraints we obtain
approximate algorithms that are very efficient and
competitive with state-of-the-art methods. In this
paper, we focus on unlabeled dependency parsing,
for clarity of exposition. If it is extended to labeled
parsing (a straightforward extension), our formu-
lation fully subsumes that of Riedel and Clarke
(2006), since it allows using the same hard con-
straints and features while keeping the ILP poly-
nomial in size.

3.1 The Arborescence Polytope

We start by describing our constraint space. Our
formulations rely on a concise polyhedral repre-
sentation of the set of candidate dependency parse
trees, as sketched in §2.1. This will be accom-
plished by drawing an analogy with a network
flow problem.

Let D = 〈V,A〉 be the complete directed graph

344



associated with a sentence x ∈ X , as stated in
§2. A subgraph y = 〈V,B〉 is a legal dependency
tree (i.e., y ∈ Y(x)) if and only if the following
conditions are met:

1. Each vertex in V \ {0} must have exactly one
incoming arc in B,

2. 0 has no incoming arcs in B,

3. B does not contain cycles.

For each vertex v ∈ V , let δ−(v) , {〈i, j〉 ∈
A | j = v} denote its set of incoming arcs, and
δ+(v) , {〈i, j〉 ∈ A | i = v} denote its set of
outgoing arcs. The two first conditions can be eas-
ily expressed by linear constraints on the incidence
vector z:

∑
a∈δ−(j) za = 1, j ∈ V \ {0} (4)∑
a∈δ−(0) za = 0 (5)

Condition 3 is somewhat harder to express. Rather
than adding exponentially many constraints, one
for each potential cycle (like Riedel and Clarke,
2006), we equivalently replace condition 3 by

3′. B is connected.

Note that conditions 1-2-3 are equivalent to 1-2-
3′, in the sense that both define the same set Y(x).
However, as we will see, the latter set of condi-
tions is more convenient. Connectedness of graphs
can be imposed via flow constraints (by requir-
ing that, for any v ∈ V \ {0}, there is a directed
path in B connecting 0 to v). We adapt the single
commodity flow formulation for the (undirected)
minimum spanning tree problem, due to Magnanti
and Wolsey (1994), that requires O(n2) variables
and constraints. Under this model, the root node
must send one unit of flow to every other node.
By making use of extra variables, φ , 〈φa〉a∈A,
to denote the flow of commodities through each
arc, we are led to the following constraints in ad-
dition to Eqs. 4–5 (we denote U , [0, 1], and
B , {0, 1} = U ∩ Z):

• Root sends flow n:
∑

a∈δ+(0) φa = n (6)

• Each node consumes one unit of flow:∑
a∈δ−(j)

φa −
∑

a∈δ+(j)
φa = 1, j ∈ V \ {0} (7)

• Flow is zero on disabled arcs:

φa ≤ nza, a ∈ A (8)

• Each arc indicator lies in the unit interval:

za ∈ U, a ∈ A. (9)

These constraints project an outer bound of the ar-
borescence polytope, i.e.,

Z̄(x) , {z ∈ R|A| | (z,φ) satisfy (4–9)}
⊇ Z(x). (10)

Furthermore, the integer points of Z̄(x) are pre-
cisely the incidence vectors of dependency trees
in Y(x); these are obtained by replacing Eq. 9 by

za ∈ B, a ∈ A. (11)

3.2 Arc-Factored Model
Given our polyhedral representation of (an outer
bound of) the arborescence polytope, we can
now formulate dependency parsing with an arc-
factored model as an ILP. By storing the arc-
local feature vectors into the columns of a matrix
F(x) , [fa(x)]a∈A, and defining the score vec-
tor s , F(x)>w (each entry is an arc score) the
inference problem can be written as

max
y∈Y(x)

w>f(x, y) = max
z∈Z(x)

w>F(x)z

= max
z,φ

s>z

s.t. A

[
z
φ

]
≤ b

z ∈ B
(12)

where A is a sparse constraint matrix (withO(|A|)
non-zero elements), and b is the constraint vec-
tor; A and b encode the constraints (4–9). This
is an ILP with O(|A|) variables and constraints
(hence, quadratic in n); if we drop the integer
constraint the problem becomes the LP relaxation.
As is, this formulation is no more attractive than
solving the problem with the existing combinato-
rial algorithms discussed in §2.2; however, we can
now start adding non-local features to build a more
powerful model.

3.3 Sibling and Grandparent Features
To cope with higher-order features of the form
fa1,...,aK (x) (i.e., features whose values depend on
the simultaneous inclusion of arcs a1, . . . , aK on

345



a candidate dependency tree), we employ a lin-
earization trick (Boros and Hammer, 2002), defin-
ing extra variables za1...aK , za1 ∧ . . .∧zaK . This
logical relation can be expressed by the following
O(K) agreement constraints:6

za1...aK ≤ zai , i = 1, . . . ,K
za1...aK ≥

∑K
i=1 zai −K + 1. (13)

As shown by McDonald and Pereira (2006) and
Carreras (2007), the inclusion of features that
correlate sibling and grandparent arcs may be
highly beneficial, even if doing so requires resort-
ing to approximate algorithms.7 Define Rsibl ,
{〈i, j, k〉 | 〈i, j〉 ∈ A, 〈i, k〉 ∈ A} and Rgrand ,
{〈i, j, k〉 | 〈i, j〉 ∈ A, 〈j, k〉 ∈ A}. To include
such features in our formulation, we need to add
extra variables zsibl , 〈zr〉r∈Rsibl and zgrand ,
〈zr〉r∈Rgrand that indicate the presence of sibling
and grandparent arcs. Observe that these indica-
tor variables are conjunctions of arc indicator vari-
ables, i.e., zsiblijk = zij ∧ zik and z

grand
ijk = zij ∧ zjk.

Hence, these features can be handled in our formu-
lation by adding the following O(|A| · |V |) vari-
ables and constraints:

zsiblijk ≤ zij , z
sibl
ijk ≤ zik, z

sibl
ijk ≥ zij + zik − 1

(14)
for all triples 〈i, j, k〉 ∈ Rsibl, and

z
grand
ijk ≤ zij , z

grand
ijk ≤ zjk, z

grand
ijk ≥ zij+zjk−1

(15)
for all triples 〈i, j, k〉 ∈ Rgrand. Let R , A ∪
Rsibl ∪ Rgrand; by redefining z , 〈zr〉r∈R and
F(x) , [fr(x)]r∈R, we may express our inference
problem as in Eq. 12, with O(|A| · |V |) variables
and constraints.

Notice that the strategy just described to han-
dle sibling features is not fully compatible with
the features proposed by Eisner (1996) for pro-
jective parsing, as the latter correlate only con-
secutive siblings and are also able to place spe-
cial features on the first child of a given word.
The ability to handle such “ordered” features is
intimately associated with Eisner’s dynamic pro-
gramming parsing algorithm and with the Marko-
vian assumptions made explicitly by his genera-
tive model. We next show how similar features

6Actually, any logical condition can be encoded with lin-
ear constraints involving binary variables; see e.g. Clarke and
Lapata (2008) for an overview.

7By sibling features we mean features that depend on
pairs of sibling arcs (i.e., of the form 〈i, j〉 and 〈i, k〉); by
grandparent features we mean features that depend on pairs
of grandparent arcs (of the form 〈i, j〉 and 〈j, k〉).

can be incorporated in our model by adding “dy-
namic” constraints to our ILP. Define:

znext siblijk ,




1 if 〈i, j〉 and 〈i, k〉 are
consecutive siblings,

0 otherwise,

zfirst childij ,

{
1 if j is the first child of i,
0 otherwise.

Suppose (without loss of generality) that i < j <
k ≤ n. We could naively compose the constraints
(14) with additional linear constraints that encode
the logical relation

znext siblijk = z
sibl
ijk ∧

∧
j<l<k ¬zil,

but this would yield a constraint matrix with
O(n4) non-zero elements. Instead, we define aux-
iliary variables βjk and γij :

βjk =

{
1, if ∃l s.t. π(l) = π(j) < j < l < k
0, otherwise,

γij =

{
1, if ∃k s.t. i < k < j and 〈i, k〉 ∈ y
0, otherwise.

(16)

Then, we have that znext siblijk = z
sibl
ijk ∧ (¬βjk) and

zfirst childij = zij∧(¬γij), which can be encoded via

znext siblijk ≤ z
sibl
ijk z

first child
ij ≤ zij

znext siblijk ≤ 1− βjk z
first child
ij ≤ 1− γij

znext siblijk ≥ z
sibl
ijk − βjk z

first child
ij ≥ zij − γij

The following “dynamic” constraints encode the
logical relations for the auxiliary variables (16):

βj(j+1) = 0 γi(i+1) = 0
βj(k+1) ≥ βjk γi(j+1) ≥ γij
βj(k+1) ≥

∑
i<j

zsiblijk γi(j+1) ≥ zij

βj(k+1) ≤ βjk +
∑
i<j

zsiblijk γi(j+1) ≤ γij + zij

Auxiliary variables and constraints are defined
analogously for the case n ≥ i > j > k. This
results in a sparser constraint matrix, with only
O(n3) non-zero elements.

3.4 Valency Features
A crucial fact about dependency grammars is that
words have preferences about the number and ar-
rangement of arguments and modifiers they ac-
cept. Therefore, it is desirable to include features

346



that indicate, for a candidate arborescence, how
many outgoing arcs depart from each vertex; de-
note these quantities by vi ,

∑
a∈δ+(i) za, for

each i ∈ V . We call vi the valency of the ith ver-
tex. We add valency indicators zvalik , I(vi = k)
for i ∈ V and k = 0, . . . , n− 1. This way, we are
able to penalize candidate dependency trees that
assign unusual valencies to some of their vertices,
by specifying a individual cost for each possible
value of valency. The following O(|V |2) con-
straints encode the agreement between valency in-
dicators and the other variables:∑n−1

k=0 kz
val
ik =

∑
a∈δ+(i) za, i ∈ V (17)∑n−1

k=0 z
val
ik = 1, i ∈ V
zvalik ≥ 0, i ∈ V, k ∈ {0, . . . , n− 1}

3.5 Projectivity Features
For most languages, dependency parse trees tend
to be nearly projective (cf. Buchholz and Marsi,
2006). We wish to make our model capable of
learning to prefer “nearly” projective parses when-
ever that behavior is observed in the data.

The multicommodity directed flow model of
Magnanti and Wolsey (1994) is a refinement of the
model described in §3.1 which offers a compact
and elegant way to indicate nonprojective arcs, re-
quiring O(n3) variables and constraints. In this
model, every node k 6= 0 defines a commodity:
one unit of commodity k originates at the root
node and must be delivered to node k; the vari-
able φkij denotes the flow of commodity k in arc
〈i, j〉. We first replace (4–9) by (18–22):

• The root sends one unit of commodity to each
node:∑

a∈δ−(0)
φka −

∑
a∈δ+(0)

φka = −1, k ∈ V \ {0} (18)

• Any node consumes its own commodity and no
other:∑

a∈δ−(j)
φka −

∑
a∈δ+(j)

φka = δ
k
j , j, k ∈ V \ {0} (19)

where δkj , I(j = k) is the Kronecker delta.
• Disabled arcs do not carry any flow:

φka ≤ za, a ∈ A, k ∈ V (20)

• There are exactly n enabled arcs:∑
a∈A za = n (21)

• All variables lie in the unit interval:

za ∈ U, φka ∈ U, a ∈ A, k ∈ V (22)

We next define auxiliary variables ψjk that indi-
cate if there is a path from j to k. Since each ver-
tex except the root has only one incoming arc, the
following linear equalities are enough to describe
these new variables:

ψjk =
∑

a∈δ−(j) φ
k
a, j, k ∈ V \ {0}

ψ0k = 1, k ∈ V \ {0}. (23)

Now, define indicators znp , 〈znpa 〉a∈A, where

znpa , I(a ∈ y and a is nonprojective).

From the definition of projective arcs in §2.1, we
have that znpa = 1 if and only if the arc is active
(za = 1) and there is some vertex k in the span of
a = 〈i, j〉 such that ψik = 0. We are led to the
following O(|A| · |V |) constraints for 〈i, j〉 ∈ A:

z
np
ij ≤ zij
z

np
ij ≥ zij − ψik, min(i, j) ≤ k ≤ max(i, j)

z
np
ij ≤ −

∑max(i,j)−1
k=min(i,j)+1

ψik + |j − i| − 1

There are other ways to introduce nonprojectiv-
ity indicators and alternative definitions of “non-
projective arc.” For example, by using dynamic
constraints of the same kind as those in §3.3,
we can indicate arcs that “cross” other arcs with
O(n3) variables and constraints, and a cubic num-
ber of non-zero elements in the constraint matrix
(omitted for space).

3.6 Projective Parsing
It would be straightforward to adapt the con-
straints in §3.5 to allow only projective parse trees:
simply force znpa = 0 for any a ∈ A. But there are
more efficient ways of accomplish this. While it is
difficult to impose projectivity constraints or cycle
constraints individually, there is a simpler way of
imposing both. Consider 3 (or 3′) from §3.1.
Proposition 1 Replace condition 3 (or 3′) with

3′′. If 〈i, j〉 ∈ B, then, for any k = 1, . . . , n
such that k 6= j, the parent of k must satisfy
(defining i′ , min(i, j) and j′ , max(i, j)):

i′ ≤ π(k) ≤ j′, if i′ < k < j′,
π(k) < i′ ∨ π(k) > j′, if k < i′ or k > j′

or k = i.

347



Then, Y(x) will be redefined as the set of projec-
tive dependency parse trees.
We omit the proof for space. Conditions 1, 2, and
3′′ can be encoded with O(n2) constraints.

4 Experiments

We report experiments on seven languages, six
(Danish, Dutch, Portuguese, Slovene, Swedish
and Turkish) from the CoNLL-X shared task
(Buchholz and Marsi, 2006), and one (English)
from the CoNLL-2008 shared task (Surdeanu et
al., 2008).8 All experiments are evaluated using
the unlabeled attachment score (UAS), using the
default settings.9 We used the same arc-factored
features as McDonald et al. (2005) (included in the
MSTParser toolkit10); for the higher-order models
described in §3.3–3.5, we employed simple higher
order features that look at the word, part-of-speech
tag, and (if available) morphological information
of the words being correlated through the indica-
tor variables. For scalability (and noting that some
of the models require O(|V | · |A|) constraints and
variables, which, when A = V 2, grows cubically
with the number of words), we first prune the base
graph by running a simple algorithm that ranks the
k-best candidate parents for each word in the sen-
tence (we set k = 10); this reduces the number of
candidate arcs to |A| = kn.11 This strategy is sim-
ilar to the one employed by Carreras et al. (2008)
to prune the search space of the actual parser. The
ranker is a local model trained using a max-margin
criterion; it is arc-factored and not subject to any
structural constraints, so it is very fast.

The actual parser was trained via the online
structured passive-aggressive algorithm of Cram-
mer et al. (2006); it differs from the 1-best MIRA
algorithm of McDonald et al. (2005) by solv-
ing a sequence of loss-augmented inference prob-
lems.12 The number of iterations was set to 10.

The results are summarized in Table 1; for the
sake of comparison, we reproduced three strong

8We used the provided train/test splits except for English,
for which we tested on the development partition. For train-
ing, sentences longer than 80 words were discarded. For test-
ing, all sentences were kept (the longest one has length 118).

9
http://nextens.uvt.nl/∼conll/software.html

10
http://sourceforge.net/projects/mstparser

11Note that, unlike reranking approaches, there are still ex-
ponentially many candidate parse trees after pruning. The
oracle constrained to pick parents from these lists achieves
> 98% in every case.

12The loss-augmented inference problem can also be ex-
pressed as an LP for Hamming loss functions that factor over
arcs; we refer to Martins et al. (2009) for further details.

baselines, all of them state-of-the-art parsers based
on non-arc-factored models: the second order
model of McDonald and Pereira (2006), the hy-
brid model of Nivre and McDonald (2008), which
combines a (labeled) transition-based and a graph-
based parser, and a refinement of the latter, due
to Martins et al. (2008), which attempts to ap-
proximate non-local features.13 We did not repro-
duce the model of Riedel and Clarke (2006) since
the latter is tailored for labeled dependency pars-
ing; however, experiments reported in that paper
for Dutch (and extended to other languages in the
CoNLL-X task) suggest that their model performs
worse than our three baselines.

By looking at the middle four columns, we can
see that adding non-arc-factored features makes
the models more accurate, for all languages. With
the exception of Portuguese, the best results are
achieved with the full set of features. We can
also observe that, for some languages, the valency
features do not seem to help. Merely modeling
the number of dependents of a word may not be
as valuable as knowing what kinds of dependents
they are (for example, distinguishing among argu-
ments and adjuncts).

Comparing with the baselines, we observe that
our full model outperforms that of McDonald and
Pereira (2006), and is in line with the most ac-
curate dependency parsers (Nivre and McDonald,
2008; Martins et al., 2008), obtained by com-
bining transition-based and graph-based parsers.14

Notice that our model, compared with these hy-
brid parsers, has the advantage of not requiring an
ensemble configuration (eliminating, for example,
the need to tune two parsers). Unlike the ensem-
bles, it directly handles non-local output features
by optimizing a single global objective. Perhaps
more importantly, it makes it possible to exploit
expert knowledge through the form of hard global
constraints. Although not pursued here, the same
kind of constraints employed by Riedel and Clarke
(2006) can straightforwardly fit into our model,
after extending it to perform labeled dependency
parsing. We believe that a careful design of fea-

13Unlike our model, the hybrid models used here as base-
lines make use of the dependency labels at training time; in-
deed, the transition-based parser is trained to predict a la-
beled dependency parse tree, and the graph-based parser use
these predicted labels as input features. Our model ignores
this information at training time; therefore, this comparison
is slightly unfair to us.

14See also Zhang and Clark (2008) for a different approach
that combines transition-based and graph-based methods.

348



[M
P0

6]

[N
M0

8]

[M
DS

X0
8]

AR
C-F

AC
TO

RE
D

+S
IB

L/G
RA

ND
P.

+V
AL

EN
CY

+P
RO

J. (
FU

LL
)

FU
LL

, R
EL

AX
ED

DANISH 90.60 91.30 91.54 89.80 91.06 90.98 91.18 91.04 (-0.14)
DUTCH 84.11 84.19 84.79 83.55 84.65 84.93 85.57 85.41 (-0.16)
PORTUGUESE 91.40 91.81 92.11 90.66 92.11 92.01 91.42 91.44 (+0.02)
SLOVENE 83.67 85.09 85.13 83.93 85.13 85.45 85.61 85.41 (-0.20)
SWEDISH 89.05 90.54 90.50 89.09 90.50 90.34 90.60 90.52 (-0.08)
TURKISH 75.30 75.68 76.36 75.16 76.20 76.08 76.34 76.32 (-0.02)
ENGLISH 90.85 – – 90.15 91.13 91.12 91.16 91.14 (-0.02)

Table 1: Results for nonprojective dependency parsing (unlabeled attachment scores). The three baselines are the second order
model of McDonald and Pereira (2006) and the hybrid models of Nivre and McDonald (2008) and Martins et al. (2008). The
four middle columns show the performance of our model using exact (ILP) inference at test time, for increasing sets of features
(see §3.2–§3.5). The rightmost column shows the results obtained with the full set of features using relaxed LP inference
followed by projection onto the feasible set. Differences are with respect to exact inference for the same set of features. Bold
indicates the best result for a language. As for overall performance, both the exact and relaxed full model outperform the arc-
factored model and the second order model of McDonald and Pereira (2006) with statistical significance (p < 0.01) according
to Dan Bikel’s randomized method (http://www.cis.upenn.edu/∼dbikel/software.html).

tures and constraints can lead to further improve-
ments on accuracy.

We now turn to a different issue: scalability. In
previous work (Martins et al., 2009), we showed
that training the model via LP-relaxed inference
(as we do here) makes it learn to avoid frac-
tional solutions; as a consequence, ILP solvers
will converge faster to the optimum (on average).
Yet, it is known from worst case complexity the-
ory that solving a general ILP is NP-hard; hence,
these solvers may not scale well with the sentence
length. Merely considering the LP-relaxed version
of the problem at test time is unsatisfactory, as it
may lead to a fractional solution (i.e., a solution
whose components indexed by arcs, z̃ = 〈za〉a∈A,
are not all integer), which does not correspond to a
valid dependency tree. We propose the following
approximate algorithm to obtain an actual parse:
first, solve the LP relaxation (which can be done
in polynomial time with interior-point methods);
then, if the solution is fractional, project it onto the
feasible set Y(x). Fortunately, the Euclidean pro-
jection can be computed in a straightforward way
by finding a maximal arborescence in the directed
graph whose weights are defined by z̃ (we omit
the proof for space); as we saw in §2.2, the Chu-
Liu-Edmonds algorithm can do this in polynomial
time. The overall parsing runtime becomes poly-
nomial with respect to the length of the sentence.

The last column of Table 1 compares the ac-
curacy of this approximate method with the ex-
act one. We observe that there is not a substantial
drop in accuracy; on the other hand, we observed
a considerable speed-up with respect to exact in-
ference, particularly for long sentences. The av-

erage runtime (across all languages) is 0.632 sec-
onds per sentence, which is in line with existing
higher-order parsers and is much faster than the
runtimes reported by Riedel and Clarke (2006).

5 Conclusions

We presented new dependency parsers based on
concise ILP formulations. We have shown how
non-local output features can be incorporated,
while keeping only a polynomial number of con-
straints. These features can act as soft constraints
whose penalty values are automatically learned
from data; in addition, our model is also compati-
ble with expert knowledge in the form of hard con-
straints. Learning through a max-margin frame-
work is made effective by the means of a LP-
relaxation. Experimental results on seven lan-
guages show that our rich-featured parsers outper-
form arc-factored and approximate higher-order
parsers, and are in line with stacked parsers, hav-
ing with respect to the latter the advantage of not
requiring an ensemble configuration.

Acknowledgments

The authors thank the reviewers for their com-
ments. Martins was supported by a grant from
FCT/ICTI through the CMU-Portugal Program,
and also by Priberam Informática. Smith was
supported by NSF IIS-0836431 and an IBM Fac-
ulty Award. Xing was supported by NSF DBI-
0546594, DBI-0640543, IIS-0713379, and an Al-
fred Sloan Foundation Fellowship in Computer
Science.

349



References
E. Boros and P.L. Hammer. 2002. Pseudo-Boolean op-

timization. Discrete Applied Mathematics, 123(1–
3):155–225.

S. Buchholz and E. Marsi. 2006. CoNLL-X shared
task on multilingual dependency parsing. In Proc.
of CoNLL.

X. Carreras, M. Collins, and T. Koo. 2008. TAG,
dynamic programming, and the perceptron for effi-
cient, feature-rich parsing. In Proc. of CoNLL.

X. Carreras. 2007. Experiments with a higher-order
projective dependency parser. In Proc. of CoNLL.

M. Chang, L. Ratinov, and D. Roth. 2008. Constraints
as prior knowledge. In ICML Workshop on Prior
Knowledge for Text and Language Processing.

Y. J. Chu and T. H. Liu. 1965. On the shortest arbores-
cence of a directed graph. Science Sinica, 14:1396–
1400.

J. Clarke and M. Lapata. 2008. Global inference
for sentence compression an integer linear program-
ming approach. JAIR, 31:399–429.

K. Crammer, O. Dekel, J. Keshet, S. Shalev-Shwartz,
and Y. Singer. 2006. Online passive-aggressive al-
gorithms. JMLR, 7:551–585.

A. Culotta and J. Sorensen. 2004. Dependency tree
kernels for relation extraction. In Proc. of ACL.

P. Denis and J. Baldridge. 2007. Joint determination
of anaphoricity and coreference resolution using in-
teger programming. In Proc. of HLT-NAACL.

Y. Ding and M. Palmer. 2005. Machine translation us-
ing probabilistic synchronous dependency insertion
grammar. In Proc. of ACL.

J. Edmonds. 1967. Optimum branchings. Journal
of Research of the National Bureau of Standards,
71B:233–240.

J. Eisner and G. Satta. 1999. Efficient parsing for
bilexical context-free grammars and head automaton
grammars. In Proc. of ACL.

J. Eisner. 1996. Three new probabilistic models for de-
pendency parsing: An exploration. In Proc. of COL-
ING.

S. Kahane, A. Nasr, and O. Rambow. 1998. Pseudo-
projectivity: a polynomially parsable non-projective
dependency grammar. In Proc. of COLING-ACL.

S. Lacoste-Julien, B. Taskar, D. Klein, and M. I. Jor-
dan. 2006. Word alignment via quadratic assign-
ment. In Proc. of HLT-NAACL.

T. L. Magnanti and L. A. Wolsey. 1994. Optimal
Trees. Technical Report 290-94, Massachusetts In-
stitute of Technology, Operations Research Center.

A. F. T. Martins, D. Das, N. A. Smith, and E. P. Xing.
2008. Stacking dependency parsers. In Proc. of
EMNLP.

A. F. T. Martins, N. A. Smith, and E. P. Xing. 2009.
Polyhedral outer approximations with application to
natural language parsing. In Proc. of ICML.

R. T. McDonald and F. C. N. Pereira. 2006. Online
learning of approximate dependency parsing algo-
rithms. In Proc. of EACL.

R. McDonald and G. Satta. 2007. On the complex-
ity of non-projective data-driven dependency pars-
ing. In Proc. of IWPT.

R. T. McDonald, F. Pereira, K. Ribarov, and J. Hajič.
2005. Non-projective dependency parsing using
spanning tree algorithms. In Proc. of HLT-EMNLP.

J. Nivre and R. McDonald. 2008. Integrating graph-
based and transition-based dependency parsers. In
Proc. of ACL-HLT.

V. Punyakanok, D. Roth, W. Yih, and D. Zimak. 2004.
Semantic role labeling via integer linear program-
ming inference. In Proc. of COLING.

M. Richardson and P. Domingos. 2006. Markov logic
networks. Machine Learning, 62(1):107–136.

S. Riedel and J. Clarke. 2006. Incremental integer
linear programming for non-projective dependency
parsing. In Proc. of EMNLP.

R. T. Rockafellar. 1970. Convex Analysis. Princeton
University Press.

D. Roth and W. T. Yih. 2005. Integer linear program-
ming inference for conditional random fields. In
ICML.

A. Schrijver. 2003. Combinatorial Optimization:
Polyhedra and Efficiency, volume 24 of Algorithms
and Combinatorics. Springer.

D. A. Smith and J. Eisner. 2008. Dependency parsing
by belief propagation. In Proc. of EMNLP.

M. Surdeanu, R. Johansson, A. Meyers, L. Màrquez,
and J. Nivre. 2008. The conll-2008 shared task
on joint parsing of syntactic and semantic dependen-
cies. Proc. of CoNLL.

R. E. Tarjan. 1977. Finding optimum branchings. Net-
works, 7(1):25–36.

M. Wang, N. A. Smith, and T. Mitamura. 2007. What
is the Jeopardy model? A quasi-synchronous gram-
mar for QA. In Proceedings of EMNLP-CoNLL.

Y. Zhang and S. Clark. 2008. A tale of
two parsers: investigating and combining graph-
based and transition-based dependency parsing us-
ing beam-search. In Proc. of EMNLP.

350


